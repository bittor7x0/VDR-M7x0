Index: epgsearch-0.9.24-orig/menu_whatson.c
===================================================================
--- epgsearch-0.9.24-orig/menu_whatson.c	(revisión: 143)
+++ epgsearch-0.9.24-orig/menu_whatson.c	(revisión: 144)
@@ -200,7 +200,7 @@
       strreplace(buffer, '|', '\t');
 
       char* title = NULL; 
-      msprintf(&title, "%s", event?event->Title():tr(">>> no info! <<<"));
+      title = strdup(event?event->Title():tr(">>> no info! <<<"));
       title = strreplacei(title, ":", "%colon%"); // asume a title has the form "a?b:c", 
       // we need to replace the colon to avoid misinterpretation the expression as a condition
       buffer = strreplacei(buffer, "%title%", title);
@@ -222,7 +222,6 @@
       char* tmp = strdup(varExpr.Evaluate(event).c_str());
       free(buffer);
       buffer = tmp;
-      
       buffer = strreplacei(buffer, "$status$", szStatus);
       buffer = strreplacei(buffer, "$t_status$", t);
       buffer = strreplacei(buffer, "$v_status$", v);
Index: epgsearch-0.9.24-orig/epgsearchtools.c
===================================================================
--- epgsearch-0.9.24-orig/epgsearchtools.c	(revisión: 143)
+++ epgsearch-0.9.24-orig/epgsearchtools.c	(revisión: 144)
@@ -516,17 +516,13 @@
    char *p = strcasestr(s, s1);
    if (p) {
       int of = p - s;
-      int l  = 0;
-      if (s)
-        l = strlen(s);
-      int l1 = 0;
-      if (s1)
-        l1 = strlen(s1);
+      int l  = strlen(s);
+      int l1 = strlen(s1);
       int l2 = 0;
       if (s2)
         l2 = strlen(s2);
       if (l2 > l1)
-         s = (char *)realloc(s, strlen(s) + l2 - l1 + 1);
+         s = (char *)realloc(s, l + l2 - l1 + 1);
       if (l2 != l1)
          memmove(s + of + l2, s + of + l1, l - of - l1 + 1);
       memcpy(s + of, s2, l2);
@@ -895,21 +891,40 @@
 
 char* FixSeparators(char* buffer, char sep)
 {
-   char tmp[5];
-   sprintf(tmp, "%c\t", sep);
-   buffer = strreplacei(buffer, tmp, "\t");
-   sprintf(tmp, "%c \t", sep);
-   buffer = strreplacei(buffer, tmp, "\t");
-   sprintf(tmp, "%c ", sep);
-   if (strstr(buffer, tmp) == buffer + strlen(buffer) - 2) buffer[strlen(buffer) - 2] = 0;
-   if (buffer[strlen(buffer)-1] == sep) buffer[strlen(buffer) - 1] = 0;
-
-   sprintf(tmp, "\t%c", sep);
-   buffer = strreplacei(buffer, tmp, "\t");
-   sprintf(tmp, "\t %c", sep);
-   buffer = strreplacei(buffer, tmp, "\t");
-   sprintf(tmp, "\t  %c", sep);
-   buffer = strreplacei(buffer, tmp, "\t");
+   int l = strlen(buffer);
+   char *dest = buffer;
+   for (int i = 0; i < l; i ++) {
+       char c = buffer[i];
+       int j = i;
+       if (c == sep) {
+          for (j = i + 1; (j < l) & (buffer[j] == ' '); j++)
+              ;
+            
+          if ((j < l) | (i + 1 < j)) {
+             switch (buffer[j]) {
+               case '\t':
+                 i = j;
+                 c = '\t';
+                 break;
+               case 0:
+                 i = j;
+                 c = 0;
+                 break;
+               }
+             }
+          }
+       if (c == '\t') {
+          for (; (j < l) & (buffer[j] == ' '); j++)
+              ;
+          if (j < l && buffer[j] == sep) {
+             buffer[j] = '\t';
+             i = j - 1;
+             continue;
+             }
+          }
+       *dest++ = c;
+       }
+   *dest = 0;
    return buffer;
 }
 
@@ -933,15 +948,17 @@
 
 int FindIgnoreCase(const string& expr, const string& query)
 {
-  icstring exprIC(expr.c_str());
-  icstring queryIC(query.c_str());
-  int pos = exprIC.find(queryIC);
-  return pos;
+  const char *p = expr.c_str();
+  const char *r = strcasestr(p, query.c_str());
+  
+  if (!r)
+     return string::npos;
+  return r - p;
 }
 
 bool EqualsNoCase(const string& a, const string& b)
 {
-   return (FindIgnoreCase(a,b) == 0 && a.size() == b.size());
+   return strcasecmp(a.c_str(), b.c_str()) == 0;
 }
 
 string Strip(const string& input)
