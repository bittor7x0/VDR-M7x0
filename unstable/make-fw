#!/bin/sh
###############################################################################
# This script to generate a alternative version of VDR-NG-FW from open7x0.org #
###############################################################################


###################
# Variables setup #
###################

# Path of script
BASE="${0%/*}"

# Version to generate
#   lite: Minimal install
#   pro:  Maximal install
vdr_version="pro"

# Local paths
vdr_fw="$BASE/VDR-NG-FW"
vdr_fw_orig="$vdr_fw.orig"
vdr_em_addons="$BASE/Addons"
vdr_em_files="$vdr_em_addons/Files"
vdr_em_patches="$vdr_em_addons/Patches"
vdr_em_delete="$vdr_em_addons/Delete"
vdr_em_plugins="$BASE/VDR-Plugins"
vdr_em_webif="$BASE/../webif"

# SVN branch from assembla VDR-EM
svn_em="http://svn.assembla.com/svn/VDR-M7x0/unstable"

# SVN branches from open7x0.org
svn_o7o="svn://open7x0.org/uclibc_build_env/branches/experimental"

# Path for temporal directory
tmp=`mktemp -d ./tmp-XXXXXXXXXX` || exit 1


#############
# Functions #
#############

# patches a package from a given patch-dir. all *.patch files are patched with patch -p1
# usage: patch_package <dest dir> <patchdir>
patch_package() {
	for patch_file in `find $2 -type f -iname '*.patch' | sort` ; do \
		patch -p1 -E -d $1 < $patch_file ; \
	done
}


#########################
# Update/Checkout files #
#########################

# Update/Checkout VDR-EM
if [ -d "$BASE/.svn" ]
then
	echo "Update VDR-EM"
	svn update -q
else
	rm -f "$BASE/make-fw"
	rm -rf "$tmp"
	echo "Checkout VDR-EM"
	svn checkout -q "$svn_em" "$BASE"
	echo "Run this script again"
	exit 0
fi

# Update/Checkout VDR-o7o
if [ -d "$vdr_fw_orig/.svn" ]
then
	echo "Update VDR-o7o original"
	svn update -q -r 402 "$vdr_fw_orig"
else
	echo "Checkout VDR-o7o original"
	svn checkout -q -r 402 "$svn_o7o" "$vdr_fw_orig"
fi


############################
# Creating VDR-EM Firmware #
############################

# Copy original files to temporal dir
echo "Copying files to temporal dir"
cp -Trf "$vdr_fw_orig" "$tmp"
cp -Trf "$vdr_em_files/common" "$tmp"
cp -Trf "$vdr_em_files/$vdr_version" "$tmp"
cp -rf "$tmp/buildin/base/m740"  "$tmp/buildin/base-$vdr_version"
cp -rf "$tmp/buildin/base/m750s" "$tmp/buildin/base-$vdr_version"

# Patch firmware
echo "Patching Firmware"
patch_package "$tmp" "$vdr_em_patches/common"
patch_package "$tmp" "$vdr_em_patches/$vdr_version"

# Copy temporal dir to final dir
echo ""

if [ -d "$vdr_fw" ]
then
	echo "Cleaning VDR-o7o final"
	( cd $vdr_fw; make distclean )
	rm  -f $vdr_fw/*.ofi
	rm -rf $vdr_fw/buildin/base-$vdr_version
	rm -rf $vdr_fw/make-incs
	rm -rf $vdr_fw/patches
	rm -rf $vdr_fw/prg-fw-configs
	rm -rf $vdr_fw/rootfs-file-lists
else
	mkdir -p "$vdr_fw"
fi

echo "Copying temporal dir to final dir"
cp -Trf "$tmp" "$vdr_fw"

# Delete files and dirs
echo ""
for delete in `cat "$vdr_em_delete/common.lst" | tr -d '\r' `; do
	if [ -e $delete ] ; then
		echo "Delete" $delete
		rm -rf $delete
	fi
done
for delete in `cat "$vdr_em_delete/$vdr_version.lst" | tr -d '\r' `; do
	if [ -e $delete ] ; then
		echo "Delete" $delete
		rm -rf $delete
	fi
done

# Get and set SVN versions
echo ""
echo "Getting and setting SVN versions to fw-version"
svn_em_version="SVN EM `svnversion -c \"$vdr_em_addons\" | cut -d \":\" -f 2`"
svn_o7o_version="SVN TC-o7o `svnversion -c \"$vdr_fw_orig\" | cut -d \":\" -f 2`"
svn_plugins_version="SVN plugins `svnversion -c \"$vdr_em_plugins\" | cut -d \":\" -f 2`"
#[ "$vdr_version" = "pro" ] && svn_webif_version="SVN webif `svnversion -c \"$vdr_em_webif\" | cut -d \":\" -f 2`"

echo $svn_em_version  >> $vdr_fw/buildin/base-$vdr_version/common/etc/fw-version
echo $svn_o7o_version >> $vdr_fw/buildin/base-$vdr_version/common/etc/fw-version
echo $svn_plugins_version >> $vdr_fw/buildin/base-$vdr_version/common/etc/fw-version
[ "$vdr_version" = "pro" ] && echo $svn_webif_version >> $vdr_fw/buildin/base-$vdr_version/common/etc/fw-version

# Clean temp dir
echo "Cleaning temporal dir"
rm -rf "$tmp"
echo ""
echo ""
echo "Now you can edit config files in \"$vdr_fw\" and later run \"make\""
echo ""
exit 0

