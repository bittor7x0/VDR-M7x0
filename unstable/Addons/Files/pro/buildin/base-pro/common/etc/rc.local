#!/bin/ash

[ -f /etc/rc.local.conf ] && source /etc/rc.local.conf

echo -n 'starting local stuff:'

if [ X"${hd_swap_dev}" != X"NO" ] ; then
    echo -n ' setting up swap'
    /sbin/swapon ${hd_swap_dev}
fi

if [ X"${do_net_mount}" != X"NO" ] ; then
    echo -n ' net-mount'
    ash /etc/rc.netmount
fi

if [ -f /rw-flash/.wbx ]; then
    echo -n ' wavebox migration'
    /usr/bin/wavebox-migration
    rm -f /rw-flash/.wbx
fi

if [ X"${bootmenu_start}" != X"NO" ] ; then
    alarm=`cat /etc/bootmenu/next_alarm`

    if [ ${alarm} -eq 0 ] ; then
        pic_tool alarm clear
    else
        pic_tool alarm set $(( ${alarm} - ${vdr_startup_time} ))
    fi

    echo -n ' bootmenu'
    export VDR_TV_MODE=`grep -i TvMode ${vdr_confdir}/setup.conf | cut -d '=' -f 2 | tr -d " "`
    `/usr/bin/bootmenu -s ${bootmenu_default} ${bootmenu_config}` &
else
    if [ X"${runvdr}" != X"NO" ]; then
        echo -n ' vdr' 
        export ${runvdr_vars}
        ash ${runvdr} &
    fi
fi

db_key=/etc/dropbear/dropbear_dss_host_key
[ ! -f $db_key ] && /usr/sbin/dropbearkey -t dss -f $db_key

db_key=/etc/dropbear/dropbear_rsa_host_key
[ ! -f $db_key ] && /usr/sbin/dropbearkey -t rsa -f $db_key

if [ X"${inetd}" != X"NO" ]; then
    echo "inetd";		inetd /etc/inetd.conf
fi

if [ X"${webif_start}" != X"NO" ]; then
    echo -n ' starting webif'
    /usr/sbin/webifd
fi

for bpath in ${bind_paths} ; do
	echo -n " Binding ${bpath}"
	mount -o bind /rw-flash${bpath} ${bpath}
done

if [ X"${hd_spindown_time}" != X"NO" ] && [ X"${hd_spindown_dev}" != X"NO" ] ; then
    echo -n ' starting spindown'
    /usr/sbin/spindown -d ${hd_spindown_time} +${hd_spindown_dev}
fi

if [ X"${memwatch}" != X"NO" ] && [ -d ${memwatch_dir} ] ; then
    echo -n ' starting memwatch'
    memwatch_dest="${memwatch_dir}/`date +%F-%H%M`"
    mkdir -p ${memwatch_dest}
    /usr/sbin/memwatch "${memwatch_dest}" ${memwatch_interval}
fi


#Rescue keys
/usr/bin/irexec -d /etc/lircrc

# Stop serial console logging
echo "0 4 1 7" > /proc/sys/kernel/printk

# put here your optional stuff


echo ' '
