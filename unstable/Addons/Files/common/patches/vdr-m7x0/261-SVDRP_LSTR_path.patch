diff -Naur VDR-NG-orig/svdrp.c VDR-NG/svdrp.c
--- VDR-NG-orig/svdrp.c	2009-03-22 20:26:56.000000000 +0100
+++ VDR-NG/svdrp.c	2009-03-22 21:26:23.000000000 +0100
@@ -229,9 +229,10 @@
   "    only data for that channel is listed. 'now', 'next', or 'at <time>'\n"
   "    restricts the returned data to present events, following events, or\n"
   "    events at the given time (which must be in time_t form).",
-  "LSTR [ <number> ]\n"
+  "LSTR [ <number> ] [path]\n"
   "    List recordings. Without option, all recordings are listed. Otherwise\n"
-  "    the information for the given recording is listed.",
+  "    the information for the given recording is listed. If the keyword 'path'\n ",
+  "    is given, the path to the recording(s) is included.",
   "LSTT [ <number> ] [ id ]\n"
   "    List timers. Without option, all timers are listed. Otherwise\n"
   "    only the given timer is listed. If the keyword 'id' is given, the\n"
@@ -1066,36 +1067,56 @@
 
 void cSVDRP::CmdLSTR(const char *Option)
 {
-  bool recordings = Recordings.Update(true);
-  if (*Option) {
-     if (isnumber(Option)) {
-        cRecording *recording = Recordings.Get(strtol(Option, NULL, 10) - 1);
-        if (recording) {
-           FILE *f = fdopen(file, "w");
-           if (f) {
-              recording->Info()->Write(f, "215-");
-              fflush(f);
-              Reply(215, "End of recording information");
-              // don't 'fclose(f)' here!
-              }
-           else
-              Reply(451, "Can't open file connection");
-           }
-        else
-           Reply(550, "Recording \"%s\" not found", Option);
-        }
-     else
-        Reply(501, "Error in recording number \"%s\"", Option);
-     }
-  else if (recordings) {
-     cRecording *recording = Recordings.First();
-     while (recording) {
-           Reply(recording == Recordings.Last() ? 250 : -250, "%d %s", recording->Index() + 1, recording->Title(' ', true));
-           recording = Recordings.Next(recording);
-           }
-     }
-  else
-     Reply(550, "No recordings available");
+   bool recordings = Recordings.Update(true);
+   int recnum=0;
+   bool incpath=false;
+   if (*Option) {
+      const char *delim = " \t";
+      const char *p=Option;
+      p+=strspn(p,delim);
+      if (isdigit(p[0])){
+         errno=0;
+         recnum=strtol(p,(char **)&p,10);
+         if (errno){
+            Reply(501, "Error in recording number \"%s\"", Option);
+         }
+         p+=strspn(p,delim);
+      }
+      incpath=((*p) && (strcmp(p,"path")==0));
+   }
+   if (recnum>0) {
+      cRecording *recording = Recordings.Get(recnum - 1);
+      if (recording) {
+         FILE *f = fdopen(file, "w");
+         if (f) {
+            recording->Info()->Write(f, "215-");
+            fflush(f);
+            if (incpath) {
+               Reply(-215, "P %s", recording->FileName());
+            }
+            Reply(215, "End of recording information");
+            // don't 'fclose(f)' here!
+            }
+         else
+            Reply(451, "Can't open file connection");
+         }
+      else
+         Reply(550, "Recording \"%s\" not found", Option);
+   }
+   else if (recordings) {
+      cRecording *recording = Recordings.First();
+      while (recording) {
+         if (incpath) {
+            Reply(recording == Recordings.Last() ? 250 : -250, "%d %s %s", recording->Index() + 1, recording->FileName(), recording->Title(' ', true));
+         }
+         else {
+            Reply(recording == Recordings.Last() ? 250 : -250, "%d %s", recording->Index() + 1, recording->Title(' ', true));
+         }
+         recording = Recordings.Next(recording);
+         }
+      }
+   else
+      Reply(550, "No recordings available");
 }
 
 void cSVDRP::CmdLSTT(const char *Option)
