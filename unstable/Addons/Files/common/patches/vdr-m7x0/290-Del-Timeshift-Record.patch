diff -Naur VDR-NG-orig/config.c VDR-NG/config.c
--- VDR-NG-orig/config.c	2008-10-12 20:31:22.000000000 +0200
+++ VDR-NG/config.c	2008-10-12 20:37:46.000000000 +0200
@@ -290,6 +290,7 @@
   PausePriority = 10;
   PauseLifetime = 1;
   UseSubtitle = 1;
+  DelTimeshiftRec = 0;
   UseVps = 0;
   VpsMargin = 120;
   RecordingDirs = 1;
@@ -479,6 +480,7 @@
   else if (!strcasecmp(Name, "PausePriority"))       PausePriority      = atoi(Value);
   else if (!strcasecmp(Name, "PauseLifetime"))       PauseLifetime      = atoi(Value);
   else if (!strcasecmp(Name, "UseSubtitle"))         UseSubtitle        = atoi(Value);
+  else if (!strcasecmp(Name, "DelTimeshiftRec"))     DelTimeshiftRec    = atoi(Value);
   else if (!strcasecmp(Name, "UseVps"))              UseVps             = atoi(Value);
   else if (!strcasecmp(Name, "VpsMargin"))           VpsMargin          = atoi(Value);
   else if (!strcasecmp(Name, "RecordingDirs"))       RecordingDirs      = atoi(Value);
@@ -575,6 +577,7 @@
   Store("PausePriority",      PausePriority);
   Store("PauseLifetime",      PauseLifetime);
   Store("UseSubtitle",        UseSubtitle);
+  Store("DelTimeshiftRec",    DelTimeshiftRec);
   Store("UseVps",             UseVps);
   Store("VpsMargin",          VpsMargin);
   Store("RecordingDirs",      RecordingDirs);
diff -Naur VDR-NG-orig/config.h VDR-NG/config.h
--- VDR-NG-orig/config.h	2008-10-12 20:31:22.000000000 +0200
+++ VDR-NG/config.h	2008-10-12 20:38:32.000000000 +0200
@@ -257,6 +257,7 @@
   int DefaultPriority, DefaultLifetime;
   int PausePriority, PauseLifetime;
   int UseSubtitle;
+  int DelTimeshiftRec;
   int UseVps;
   int VpsMargin;
   int RecordingDirs;
diff -Naur VDR-NG-orig/i18n.c VDR-NG/i18n.c
--- VDR-NG-orig/i18n.c	2008-10-12 20:31:22.000000000 +0200
+++ VDR-NG/i18n.c	2008-10-12 20:44:24.000000000 +0200
@@ -4762,6 +4762,50 @@
     "Anvend udsendelsesnavn",
     "Pou¾ívat název epizody",
   },
+  { "Setup.Recording$Delete timeshift recording",
+    "Zeitversetzte Aufnahme löschen",
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "Borrar grabación timeshift",
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+  },
+  { "request",
+    "abfragen",
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "preguntar",
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+  },
   { "Setup.Recording$Use VPS",
     "VPS benutzen",
     "Uporabi VPS",
diff -Naur VDR-NG-orig/menu.c VDR-NG/menu.c
--- VDR-NG-orig/menu.c	2008-10-12 20:31:22.000000000 +0200
+++ VDR-NG/menu.c	2008-10-12 20:35:17.000000000 +0200
@@ -3168,6 +3168,7 @@
 
 class cMenuSetupRecord : public cMenuSetupBase {
 private:
+  const char *DelTimeshiftRecValues[3];
   const char *RecordingsSortModeTexts[MAXSORTMODES];
 public:
   cMenuSetupRecord(void);
@@ -3175,6 +3176,9 @@
 
 cMenuSetupRecord::cMenuSetupRecord(void)
 {
+  DelTimeshiftRecValues[0]   = tr("request");
+  DelTimeshiftRecValues[1]   = tr("no");
+  DelTimeshiftRecValues[2]   = tr("yes");
   RecordingsSortModeTexts[0] = tr("main dir alphabetically, subdirs flexible");
   RecordingsSortModeTexts[1] = tr("main dir by date, subdirs flexible");
   RecordingsSortModeTexts[2] = tr("all alphabetically");
@@ -3189,6 +3193,7 @@
   Add(new cMenuEditIntItem( tr("Setup.Recording$Pause priority"),            &data.PausePriority, 0, MAXPRIORITY));
   Add(new cMenuEditIntItem( tr("Setup.Recording$Pause lifetime (d)"),        &data.PauseLifetime, 0, MAXLIFETIME));
   Add(new cMenuEditBoolItem(tr("Setup.Recording$Use episode name"),          &data.UseSubtitle));
+  Add(new cMenuEditStraItem(tr("Setup.Recording$Delete timeshift recording"),&data.DelTimeshiftRec, 3, DelTimeshiftRecValues));
   Add(new cMenuEditBoolItem(tr("Setup.Recording$Use VPS"),                   &data.UseVps));
   Add(new cMenuEditIntItem( tr("Setup.Recording$VPS margin (s)"),            &data.VpsMargin, 0));
   Add(new cMenuEditBoolItem(tr("Setup.Recording$Record Dolby Digital"),      &data.UseDolbyInRecordings));
@@ -4485,6 +4490,7 @@
 
 cRecordControl *cRecordControls::GetRecordControl(const char *FileName)
 {
+ if(FileName)
   for (int i = 0; i < MAXRECORDCONTROLS; i++) {
       if (RecordControls[i] && strcmp(RecordControls[i]->FileName(), FileName) == 0)
          return RecordControls[i];
@@ -4577,6 +4583,56 @@
      currentReplayControl = NULL;
 }
 
+void cReplayControl::Stop(void)
+{
+  int dummy;
+  bool playing = GetIndex(dummy, dummy, false);
+  cRecordControl* rc = cRecordControls::GetRecordControl(fileName);
+
+  if (playing && rc && rc->InstantId()) {
+     isyslog("found Timeshiftrecording");
+
+     if ((Setup.DelTimeshiftRec != 0 ) || (Interface->Confirm(tr("Delete recording?")))) {
+        cRecordControl *rc = cRecordControls::GetRecordControl(fileName);
+        if (rc) {
+           cTimer *timer = rc->Timer();
+           if (timer) {
+              const char* reccmd_backup = cRecordingUserCommand::GetCommand();
+              cRecordingUserCommand::SetCommand(NULL);
+ 
+              timer->Skip();
+              cRecordControls::Process(time(NULL));
+              if (timer->IsSingleEvent()) {
+                 isyslog("deleting timer %s", *timer->ToDescr());
+                 Timers.Del(timer);
+                 }
+              Timers.SetModified();
+
+              // restore reccmd
+              cRecordingUserCommand::SetCommand(reccmd_backup);
+              }
+           }
+        isyslog("stop replaying %s", fileName);
+        cDvbPlayerControl::Stop();
+
+        if (Setup.DelTimeshiftRec != 1) {
+           cRecording *recording = Recordings.GetByName(fileName);;
+           if (recording) {
+              if (recording->Delete()) {
+                 Recordings.DelByName(fileName);
+                 ClearLastReplayed(fileName);
+                 return;
+                 }
+              else
+                 Skins.Message(mtError, tr("Error while deleting recording!"));
+              }
+           }
+        }
+     else
+        cDvbPlayerControl::Stop();
+     }
+}
+
 void cReplayControl::SetRecording(const char *FileName, const char *Title)
 {
   free(fileName);
@@ -4989,7 +5045,12 @@
                            else
                               Show();
                            break;
-            case kBack:    return osRecordings;
+            case kBack: {  cRecordControl* rc = cRecordControls::GetRecordControl(fileName);
+                           if (rc && rc->InstantId())
+                              return osEnd;
+                           else
+                              return osRecordings;
+                        }
             default:       return osUnknown;
             }
           }
diff -Naur VDR-NG-orig/menu.h VDR-NG/menu.h
--- VDR-NG-orig/menu.h	2008-10-12 20:31:21.000000000 +0200
+++ VDR-NG/menu.h	2008-10-12 20:32:18.000000000 +0200
@@ -249,6 +249,7 @@
 public:
   cReplayControl(void);
   virtual ~cReplayControl();
+  void Stop(void);
   virtual cOsdObject *GetInfo(void);
   virtual eOSState ProcessKey(eKeys Key);
   virtual void Show(void);
diff -Naur VDR-NG-orig/recording.h VDR-NG/recording.h
--- VDR-NG-orig/recording.h	2008-10-12 20:31:22.000000000 +0200
+++ VDR-NG/recording.h	2008-10-12 20:32:21.000000000 +0200
@@ -189,6 +189,7 @@
 private:
   static const char *command;
 public:
+  static const char *GetCommand(void) { return command; }
   static void SetCommand(const char *Command) { command = Command; }
   static void InvokeCommand(const char *State, const char *RecordingFileName);
   };
