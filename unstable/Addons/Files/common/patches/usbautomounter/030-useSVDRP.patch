diff -Naur usbautomounter-orig/display.c usbautomounter/display.c
--- usbautomounter-orig/display.c	2009-05-06 17:26:49.000000000 +0200
+++ usbautomounter/display.c	2009-05-06 17:29:50.000000000 +0200
@@ -25,6 +25,12 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <ctype.h>
+#include <errno.h>
+#include <netdb.h>
+#include <netinet/in.h>
+#include <sys/socket.h>
+#include <string.h>
+#include <unistd.h>
 #include "display.h"
 #include "tools.h"
 
@@ -35,6 +41,11 @@
 #define BAR_WIDTH (OSD_WIDTH - (2 * (OSD_HKEEPOUT + 20)))
 #define BAR_HEIGHT 30
 #define BAR_XPOS ((OSD_WIDTH - BAR_WIDTH) / 2)
+#define SVDRADDRESS "localhost"
+#define SVDRPORT 2001
+#define SVDRPBarStep 10
+#define SVDRPBarMinTime 30
+#define SVDRPBarMaxTime 60
 
 /* Texts for flasher */
 static const i18n_text_t mounter_texts[] = {
@@ -177,6 +188,9 @@
 	int init;
 	struct osd_progress_bar bar;
 } display_ctx;
+extern int useSVDRP;
+int SendSVDRPMessage(const char* Message);
+void CloseSVDRP();
 
 static void get_vdr_config(void)
 {
@@ -256,6 +270,15 @@
 
 int display_init(int autoboot)
 {
+	if(useSVDRP>0)
+	{
+		get_vdr_config();
+		i18n_init(-1);
+		if(i18n_register(mounter_texts))
+			SYSLOG_ERR("Cannot init translation");
+		SendSVDRPMessage(tr("Filesystem Check"));
+		return 0;
+	}
 	int text_height;
 	int y;
 
@@ -321,12 +344,36 @@
 
 void display_deinit(void)
 {
+	if(useSVDRP>0)
+	{
+		CloseSVDRP();		
+		i18n_deinit();
+		return;
+	}
 	if (display_ctx.init)
 		libosd_deinit(display_ctx.autoboot,1);
 }
 
+#define MAXBUF 512
+int LastBar=0;
+int LastBarTime=0;
 int display_update_bar(int value)
 {
+	if(useSVDRP>0)
+	{
+		time_t Now=time(NULL);
+		if(Now-LastBarTime<SVDRPBarMinTime)
+			return;
+		if((value>LastBar)&&(value-LastBar<SVDRPBarStep)&&(Now-LastBarTime<SVDRPBarMaxTime))
+			return;
+		LastBar=(value/SVDRPBarStep)*SVDRPBarStep;
+		LastBarTime=Now;
+		char Buffer[MAXBUF];
+		snprintf(Buffer,MAXBUF,"%s (%d%%)",tr("Filesystem Check"),LastBar);
+		Buffer[MAXBUF-1]=0;
+		SendSVDRPMessage(Buffer);
+		return;
+	}
 	int r;
 	r = osd_progress_update(&display_ctx.bar, 1, value);
 	osd_flush();
@@ -335,6 +382,12 @@
 
 void display_msg(const char *txt)
 {
+	if(useSVDRP>0)
+	{
+		LastBarTime=0;
+		SendSVDRPMessage(txt);
+		return;
+	}
 	int text_height;
 	text_height = font_get_line_height();
 	osd_draw_text_line(0, display_ctx.y_msg, OSD_WIDTH , text_height, txt,
@@ -342,3 +395,99 @@
 		TEXT_ALIGN_CENTER | TEXT_ALIGN_TOP);
 	osd_flush();
 }
+
+int sd=-1;
+int RecvSVDRP()
+{
+	if(sd==-1)
+		return 0;
+	char buf1[MAXBUF];
+	struct timeval tv;
+	fd_set rfds;
+	FD_ZERO(&rfds);
+	FD_SET(sd,&rfds);
+	while(1)
+	{
+		tv.tv_sec=1;
+		tv.tv_usec=0;
+		if(select(sd+1,&rfds,NULL,NULL,&tv)<1)
+		{
+			close(sd);
+			sd=-1;
+			return 0;
+		}
+		int Received=recv(sd,buf1,MAXBUF,0);
+		if(Received<1)
+		{
+			close(sd);
+			sd=-1;
+			return 0;
+		}
+		int f;		
+		for(f=0;f<Received;f++)
+			if(buf1[f]=='\n')
+				return 1;
+	}     
+	return 0;
+}
+int OpenSVDRP()
+{
+	if(sd!=-1)
+		return 1;
+	struct hostent *hostaddr=gethostbyname(SVDRADDRESS);
+	if(!hostaddr)
+		return 0;
+
+	sd=socket(PF_INET,SOCK_STREAM,6);
+	if(sd==-1)
+		return 0;
+
+	struct sockaddr_in socketaddr;
+	memset(&socketaddr,0,sizeof(socketaddr));
+	socketaddr.sin_family=AF_INET;
+	socketaddr.sin_port=htons(SVDRPORT);
+
+	memcpy(&socketaddr.sin_addr,hostaddr->h_addr,hostaddr->h_length);
+
+	if(connect(sd,(struct sockaddr *)&socketaddr,sizeof(socketaddr))==-1)
+	{
+		close(sd);
+		sd=-1;
+		return 0;
+	}
+	return 1;
+}
+int SendSVDRP(const char *msg)
+{
+	if(!OpenSVDRP())
+		return 0;
+	if(send(sd,msg,strlen(msg),0)!=strlen(msg))
+	{
+		close(sd);
+		sd=-1;
+		return 0;	
+	}
+	return 1;
+}
+void CloseSVDRP()
+{
+	if(sd==-1)
+		return;
+	if(!SendSVDRP("QUIT\n\r"))
+		return;
+	if(!RecvSVDRP())
+		return;
+	close(sd);
+	sd=-1;
+}
+int SendSVDRPMessage(const char* Message)
+{
+	char Buffer[MAXBUF];
+	snprintf(Buffer,MAXBUF,"MESG %s\n\r",Message);
+	Buffer[MAXBUF-1]=0;
+	if(!SendSVDRP(Buffer))
+		return 0;
+	if(RecvSVDRP())
+		CloseSVDRP();
+	return 1;
+}
diff -Naur usbautomounter-orig/setup.c usbautomounter/setup.c
--- usbautomounter-orig/setup.c	2009-05-04 10:39:10.000000000 +0200
+++ usbautomounter/setup.c	2009-05-06 17:29:50.000000000 +0200
@@ -296,6 +296,7 @@
 	free(conf->action_volume_lost);
 }
 
+extern int useSVDRP;
 int read_config_file(struct usbautomounter_config *conf)
 {
 	FILE *conf_file;
@@ -343,6 +344,12 @@
 		} else if (!strcasecmp(key, "FsckAsHotplug")) {
 			conf->fsck_as_hotplug = atoi(value);
          free(value);
+		}
+		else if(!strcasecmp(key,"SVDRP"))
+		{
+			if(useSVDRP==0)
+				useSVDRP=atoi(value);
+			free(value);
 		} else {
 			SYSLOG_WARN("Unknown config file Entry '%s = %s'", key, value);
 			free(value);
diff -Naur usbautomounter-orig/usbautomounter.c usbautomounter/usbautomounter.c
--- usbautomounter-orig/usbautomounter.c	2009-05-06 17:26:49.000000000 +0200
+++ usbautomounter/usbautomounter.c	2009-05-06 17:31:55.000000000 +0200
@@ -37,6 +37,7 @@
 #include "config.h"
 #include "display.h"
 
+int useSVDRP=0;
 struct usbmounter_context {
 	int ashotplug;
 	int autoboot;
@@ -476,7 +477,7 @@
 
 	snprintf(checker_bin, 128, "/sbin/fsck.%s",part->fstypename);
 	checker_bin[127] = 0;
-	if (cont->ashotplug) {
+	if((cont->ashotplug)&&((useSVDRP<=0)||(!cont->conf.fsck_as_hotplug))){
 		if (!cont->conf.fsck_as_hotplug)
 			return;
 
@@ -621,7 +622,7 @@
 
 out:
 	if (check_ret >= 0 && check_ret < 4) {
-		if (!cont->ashotplug) {
+		if((!cont->ashotplug)||(useSVDRP>0)){
 			display_msg(tr("Check successful"));
 			sleep(2);
 		}
@@ -636,7 +637,7 @@
 	} else {
 		SYSLOG_INFO("Device '%s' remains unclean after fsck",
 			part->devname);
-		if (!cont->ashotplug) {
+		if((!cont->ashotplug)||(useSVDRP>0)){
 			display_msg(tr("Check failed"));
 			sleep(2);
 		}
@@ -806,12 +807,13 @@
 
 static void print_usage() {
 	fprintf(stderr, "usbautomounter " USB_MOUNTER_VERSION_STR "\n\n");
-	fprintf(stderr, "usbautomounter <command> [fsck|nofsck] [lazy]\n");
+	fprintf(stderr, "usbautomounter <command> [fsck|nofsck] [nolazy] [SVDRP|noSVDRP]\n");
 	fprintf(stderr, "\t<command> := usb | mount | remount | umount\n");
 	fprintf(stderr, "\tusb | mount | remount\tmounts/remounts all usb storage devices\n");
 	fprintf(stderr, "\tumount\t\tumounts all mounted usb storage devices\n");
 	fprintf(stderr, "\tfsck|nofsck\toptional, force or disable filesystems check\n");
 	fprintf(stderr, "\tnolazy\t\toptional, not unmount busy devices\n");
+	fprintf(stderr, "\tSVDRP|noSVDRP\toptional, use or disable SVDRP\n");
 }
 
 int main(int argc, char **argv)
@@ -832,6 +834,10 @@
 			force_fsck=-1;
 		else if(!strcasecmp(argv[f],"nolazy"))
 			lazy=0;
+		else if(!strcasecmp(argv[f],"SVDRP"))
+			useSVDRP=1;
+		else if(!strcasecmp(argv[f],"noSVDRP"))
+			useSVDRP=-1;
 	}
 
 	if (!strcasecmp(argv[1],"mount")) {
