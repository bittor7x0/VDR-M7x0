<%!
/*
* 
* This source-code is licensed under GPL v2.
* See ../../LICENSE for details
* 
* (c) Christian Kelinski <k@kille.cx>
* Please checkout the README file!
* 
* Originally written for the open7x0.org VDR-FW project:
* www.open7x0.org
* 
* Modified for http://vdr-m7x0.foroactivo.com.es by:
* atinar <atinar1@hotmail.com>
* 
* You will need the KLONE web application development framework
* from www.koanlogic.com Version 2.
* 
*/

#include <klapp_conf.h>
#include <time.h>

#include "i18n.h"
#include "misc.h"
#include "epg.h"
#include "partitions.h"
#include "svdrp_comm.h"

#ifdef DEBUG
void dbg_index_kl1(void) { dbg("index.kl1"); }
#endif

%><%

	#ifdef DEBUG
	dbg_index_kl1();
	#endif
	
	config(session, request);
	webifState.currentPage=PN_INDEX;
	int ntabs=initHtmlPage(response,out,tr("homepage"),NULL);
	printMenu(out,ntabs);

	io_printf(out,"%.*s<div id=\"main\">\n",ntabs++,tabs);
	hostConf_t *host=getFirstVdrHost();
	channel_t channel;
	if (host && getChannel(host,0,&channel)) {
		channelList_t channels;
		channels.length=1;
		channels.channel=&channel;
		nowNextList_t nnl;
		getNowNextList(host,&nnl,&channels);
		if (nnl.length>0) {
			nowNextEntry_t *nne=&nnl.entry[0];
			const char *LiveStream=tr("liveStream");

			io_printf(out,"%.*s<h2>\n",ntabs++,tabs);
			io_printf(out,"%.*s<ul class=\"controls\"><li class=\"control buttonm-i ui-state-default\">\n",ntabs++,tabs);
			io_printf(out,"%.*s<a class=\"ui-icon ui-icon-tv\" href=\"watchit.kl1?channelnum=%d\" title=\"%s\">%s</a>\n"
				,ntabs,tabs,channel.channelNum,LiveStream,LiveStream);
			io_printf(out,"%.*s</li></ul>\n",--ntabs,tabs);
			io_printf(out,"%.*s%s &raquo;%s&laquo;</h2>\n",--ntabs,tabs,tr("channel.current"),channel.channelName);

			io_printf(out,"%.*s<div class=\"section\">\n",ntabs++,tabs);
			if (nne->event[0].start==0) {
				io_printf(out,"%.*s<div class=\"alert\">%s</div>\n",ntabs,tabs,tr("warnNoEPG"));
			} else {
				io_printf(out,"%.*s<table id=\"nowOnTv\" class=\"list programs\" summary=\"%s\">\n",ntabs++,tabs,tr("nowOnTv"));
				io_printf(out,"%.*s<col class=\"info\"/>\n",ntabs,tabs);
				io_printf(out,"%.*s<col class=\"space\"/>\n",ntabs,tabs);
				io_printf(out,"%.*s<col class=\"info\"/>\n",ntabs,tabs);
				io_printf(out,"%.*s<thead>\n",ntabs++,tabs);
				io_printf(out,"%.*s<tr>",ntabs++,tabs);
				int n;
				struct tm *t;
				for (n=0;n<2;n++){
					if (n) io_printf(out,"<th class=\"space\"></th>");
					if (nne->event[n].start>0) {
						t=localtime(&nne->event[n].start);
						io_printf(out,"<th>%02d:%02d</th>",t->tm_hour,t->tm_min);
					} else {
						io_printf(out,"<th>%s</th>",tr((n)?"next":"now"));
					} 
				}
				io_printf(out,"</tr>\n");
				io_printf(out,"%.*s</thead>\n",--ntabs,tabs);
				io_printf(out,"%.*s<tbody>\n",ntabs++,tabs);
				io_printf(out,"%.*s<tr>\n",ntabs++,tabs);
				eventEntry_t *ee;
				for (n=0;n<2;n++){
					ee=&nne->event[n];
					if(n>0){
						io_printf(out,"%.*s<td class=\"space\"></td>\n",ntabs,tabs);
					}
					io_printf(out,"%.*s<td class=\"info\">\n",ntabs++,tabs);
					if (ee->start>0) {
						printEvent(out,ntabs,ee);
					} else {
						io_printf(out,"%.*s<div class=\"title\">%s</div>\n",ntabs,tabs,(ee->title)?ee->title:"&nbsp;");
					}
					io_printf(out,"%.*s</td>\n",--ntabs,tabs);
				}
				io_printf(out,"%.*s</tr>\n",--ntabs,tabs);
				io_printf(out,"%.*s</tbody>\n",--ntabs,tabs);
				io_printf(out,"%.*s</table>\n",--ntabs,tabs);
				/*
				//TODO pendiente de que funcione el comando SVDRP necesario
				io_printf(out,"%.*s"
					"<div class=\"currentImage\">"
						"<img style=\"width:400px;height:300px\" src=\"currentimage.kl1?quality=80&sizex=400&sizey=300\"/>"
					"</div>\n",ntabs,tabs);
				*/
			}
			io_printf(out,"%.*s</div>\n",--ntabs,tabs);
		}
		freeNNL(&nnl);
	} else {
		printMessage(out,ntabs,"alert",tr("VDR not running!"),NULL,NULL);
		io_printf(out,"%.*s</div>",--ntabs,tabs);
	}
	freeChannel(&channel);
	
	//TODO integrar en comando SVDRP
	io_printf(out,"%.*s<h2>%s</h2>\n",ntabs,tabs,tr("freeSpace"));
	io_printf(out,"%.*s<div class=\"section\">\n",ntabs++,tabs);
	partitionList_t partitions;
	getPartitionList(&partitions);
	if (partitions.length){
		io_printf(out,"%.*s<table id=\"partitionSpace\" class=\"list\" summary=\"%s\">\n",ntabs++,tabs,tr("partitionSpace"));
		io_printf(out,"%.*s<thead>\n",ntabs++,tabs);
		io_printf(out,"%.*s"
			"<tr>"
				"<th>%s</th>"
				"<th colspan=\"2\">%s</th>"
				"<th>%s</th>"
			"</tr>\n",ntabs,tabs,tr("partition"),tr("used"),tr("available"));
		io_printf(out,"%.*s</thead>\n",--ntabs,tabs);
		int i;
		partitionInfo_t *partition;
		io_printf(out,"%.*s<tbody>\n",ntabs++,tabs);
		for (i=0,partition=partitions.partition;i<partitions.length;i++,partition++){
			io_printf(out,"%.*s<tr><td>%s</td><td>%.0f MB</td><td>%.0f %%</td><td>%.0f MB</td></tr>\n"
				,ntabs,tabs,partition->name,partition->usedMB,partition->usedPercent,partition->freeMB
			);
		}
		io_printf(out,"%.*s</tbody>\n",--ntabs,tabs);
		io_printf(out,"%.*s</table>\n",--ntabs,tabs);
	} else {
		printMessage(out,ntabs,"alert",tr("noMediaErr"),NULL,NULL);
	}
	freePartitionList(&partitions);
	io_printf(out,"%.*s</div>\n",--ntabs,tabs);
	io_printf(out,"%.*s</div>\n",--ntabs,tabs);
	finishHtmlPage(out,ntabs);
end:
	closeSvdrpAll();
%>
