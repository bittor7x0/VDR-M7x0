<%!
/*
* 
* This source-code is licensed under GPL v2.
* See ../../LICENSE for details
* 
* (c) Christian Kelinski <k@kille.cx>
* Please checkout the README file!
* 
* Originally written for the open7x0.org VDR-FW project:
* www.open7x0.org
* 
* Modified for http://vdr-m7x0.foroactivo.com.es by:
* atinar <atinar1@hotmail.com>
* 
* You will need the KLONE web application development framework
* from www.koanlogic.com Version 2.
* 
*/

#include <klapp_conf.h>
#include <time.h>

#include "i18n.h"
#include "misc.h"
#include "svdrp_comm.h"
#include "epg.h"

#ifdef DEBUG
static void dbg_now_next_kl1(void){
   dbg("now-next.kl1");
}
#endif

%><%

	#ifdef DEBUG
	dbg_now_next_kl1();
	#endif

	context_t vctx;
	context_t *ctx=&vctx;
	initCtx(ctx,session,request,response,out,256);

	vars_t *args = request_get_args(request);
	int channelNum=vars_get_value_i(args,"chan");

	if (channelNum<1) {
		warn("Invalid parameters");
		returnHttpNoContent(response);
		goto end;
	}
	hostConf_t *host=(vars_countn(args,"hostId")>0) ? getHost(vars_get_value_i(args,"hostId")) : getFirstVdrHost();
	if (host==NULL){
		warn("No host");
		returnHttpNoContent(response);
		goto end;
	};

	// Get events for this channel
	channelEvents_t channelEvents;
	initChannelEvents(&channelEvents);
	channelEvents.channelNum=channelNum;
	channelEvents.dumpMode=dmNowNext;
	getChannelEvents(host,&channelEvents);
	if (channelEvents.length==0){
		warn("No events");
		returnHttpNoContent(response);
	} else {
		if (channelEvents.length>1){
			//Refresh header field
			epgEvent_t *nne=channelEvents.entry;
			long int waitSeconds=0;
			char *refresh;
			if ( (channelEvents.length>=2) && (nne[1].start>0) && (nne[0].start>0) && (nne[0].title) && (nne[1].title) ) {
				time_t now=time(NULL);
				waitSeconds=nne[1].start-now;
			}
			if (waitSeconds<5){
				waitSeconds=5;
			}
			asprintf(&refresh,"%ld;URL=/now-next.kl1?chan=%d",waitSeconds,channelNum);
			response_set_field(response,"Refresh",refresh);
			free(refresh);
		}
		
		initHtmlDoc(ctx);

		ctx_printfn(ctx,"<body id=\"nowNextBody\">\n",0,1);
		ctx_printfn(ctx,"<div id=\"tabs\">\n",0,1);

		int i;
		char *title[channelEvents.length];
		epgEvent_t *event;
		for (i=0,event=channelEvents.entry;i<channelEvents.length;i++,event++){
			title[i]=NULL;
			if (event->title) {
				if (event->start>0) {
					struct tm t = *localtime(&event->start);
					asprintf(&title[i],"%02d:%02d",t.tm_hour,t.tm_min);
				} else {
					title[i]=strdup((i==0)?tr("Now"):tr("next")); 
				}
			}
		}
		ctx_printfn(ctx,"<ul id=\"tabsSelector\">\n",0,1);
		int c=0;
		for (i=0;i<channelEvents.length;i++){
			if (title[i]){
				ctx_printf0(ctx,"<li><a href=\"#tabs-%d\">%s</a></li>\n",c++,title[i]);
			}
		}
		ctx_printfn(ctx,"</ul>\n",-1,0);
		c=0;
		for (i=0,event=channelEvents.entry;i<channelEvents.length;i++,event++){
			if (title[i]) {
				ctx_printfn(ctx,"<div id=\"tabs-%d\" class=\"eventSummary\">\n",0,1,c++);
				ctx_printf0(ctx,"<h3>%s</h3>\n",title[i]);
				ctx_printf0(ctx,"<h4>%s</h4>\n",(event->title)?event->title:(event->shortdesc && event->desc)?event->shortdesc:"--");
				ctx_printfn(ctx,"<div class=\"desc\">\n",0,1);
				printEventDesc(ctx,(event->desc)?event->desc:event->shortdesc,BT_FALSE);
				ctx_printfn(ctx,"</div>\n",-1,0);
				ctx_printfn(ctx,"</div>\n",-1,0);
			}
		}
		for (i=0;i<channelEvents.length;i++) free(title[i]);
	}
	freeChannelEvents(&channelEvents);
	ctx_printfn(ctx,"</div>\n",-1,0); //tabs
	ctx_printfn(ctx,"</body>\n",-1,0);
	ctx_printfn(ctx,"</html>\n",-1,0);
end:
	freeCtx(ctx);
	closeSvdrpAll();
%>
