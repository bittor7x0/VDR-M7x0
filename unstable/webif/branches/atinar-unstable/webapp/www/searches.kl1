<%!
/*
* 
* This source-code is licensed under GPL v2.
* See ../../LICENSE for details
* 
* (c) Atinar <atinar1@hotmail.com>
* Please checkout the README file!
* 
* Originally written for http://vdr-m7x0.foroactivo.com.es
* 
* You will need the KLONE web application development framework
* from www.koanlogic.com Version 2.
* 
*/

#include <klapp_conf.h>
#include <time.h>
#include <locale.h>
#include <u/libu.h>

#include "channels.h"
#include "conf.h"
#include "epg.h"
#include "i18n.h"
#include "searches.h"
#include "svdrp_comm.h"
#include "timers.h"

#ifdef DEBUG
static void dbg_searches_kl1(void){
   dbg("searches.kl1");
}
#endif

static void printHtmlHeadExtra(context_t *ctx){
	if (!ctx->isAjaxRequest){
		ctx_printf0(ctx,"<script type=\"text/javascript\" src=\"%s/js/jquery.form-2.36.js\"></script>\n",webifConf.www);
		ctx_printf0(ctx,"<script type=\"text/javascript\" src=\"%s/js/formHandler.js\"></script>\n",webifConf.www);
		ctx_printf0(ctx,"<script type=\"text/javascript\" src=\"%s/js/searches.js\"></script>\n",webifConf.www);
	}
	ctx_printfn(ctx,"<script type=\"text/javascript\">\n",0,1);
	if (!ctx->isAjaxRequest){
		ctx_printf0(ctx,"$(function(){webif.searchesPageInit();});\n");
	}
	ctx_printfn(ctx,"$.extend(webif.messages,{\n",0,1);
	ctx_printf0(ctx,"searchDeleteConfirm:'%s',\n",tr("search.delete.confirm"));
	ctx_printf0(ctx,"nothingToSearchFor:'%s',\n",tr("search.err.nothingToSearchFor"));
	ctx_printf0(ctx,"nothingToCompareWith:'%s'\n",tr("search.err.nothingToCompareWith"));
	ctx_printfn(ctx,"});\n",-1,0);
	ctx_printfn(ctx,"</script>\n",-1,0);
}

%><%

	#ifdef DEBUG
	dbg_searches_kl1();
	#endif

	context_t vctx;
	context_t *ctx=&vctx;
	initCtx(ctx,session,request,response,out,1024);

	vars_t *args = request_get_args(request);
	int searchId=(vars_countn(args,"searchId")>0) ? vars_get_value_i(args,"searchId") : -1;
	boolean_t mySearchStr;
	boolean_t myOldSearchStr;
	char *searchStr=ctxGetRequestParam(ctx,args,"searchStr",&mySearchStr);
	char *oldSearchStr=ctxGetRequestParam(ctx,args,"oldSearchStr",&myOldSearchStr);
	const int hostId=vars_get_value_i(args,"hostId");
	const int oldHostId=vars_get_value_i(args,"oldHostId");
	hostConf_t *host=(vars_countn(args,"hostId")>0) ? getHost(hostId) : NULL;
	if (!host || !host->isVdr){
		host=getFirstVdrHost();
	}
	ctx->currentPage=PN_SEARCHES;
	ctx->currentAction=(vars_countn(args,"a")>0) ? vars_get_value_i(args,"a") : PA_SUMMARY;
	ctx->sortBy=(vars_countn(args,"sort")>0) ? vars_get_value_i(args,"sort") : SF_NAME;
	ctx->sortDirection=(vars_countn(args,"direction")>0) ? vars_get_value_i(args,"direction") : SD_ASC;

	channelList_t vchannels;
	channelList_t *channels=&vchannels;
	initChannelList(channels);

	initHtmlPage(ctx,tr("searches"),printHtmlHeadExtra);
	if (!ctx->isAjaxRequest){
		ctx_printfn(ctx,"<div class=\"level2-div ui-widget\">\n",0,1);
		ctx_printf0(ctx,"<h2 class=\"level2-top ui-widget-header\">%s</h2>\n",tr("searches"));
		ctx_printfn(ctx,"<div class=\"level2 ui-widget-content ui-helper-clearfix\">\n",0,1);
	}
	if (ctx->isReload){
		ctx->currentAction=PA_SUMMARY;
	}
	if (ctx->currentAction==PA_DELETE) {
		if ( (searchId>=0) && (oldSearchStr) ) {
			ctx_printfn(ctx,"<div class=\"messageDialog\">\n",0,1);
			if (!deleteSearch(ctx,host,searchId,oldSearchStr)){
				ctx->currentAction=PA_EDIT;
				if (mySearchStr){
					free(searchStr);
				}
				searchStr=oldSearchStr;
				mySearchStr=myOldSearchStr;
				myOldSearchStr=BT_FALSE;
			}
			ctx_printfn(ctx,"</div>\n",-1,0); //messageDialog
		}
		if (!ctx->isAjaxRequest){
			ctx->currentAction=PA_SUMMARY;
		}
	}
	if (ctx->currentAction==PA_ADD) {
		if (channels->length==0 && host){
			getChannelList(host,channels,SF_NONE,SD_NONE);
		}
		if (searchStr==NULL){
			search_t vsearch;
			if (initSearchFromArgs(&vsearch,args,channels,ctx)){
				searchStr=makeSearchStr(&vsearch,channels);
				mySearchStr=BT_TRUE;
			}
			freeSearch(&vsearch);
		}
		ctx_printfn(ctx,"<div class=\"messageDialog\">\n",0,1);
		boolean_t searchesChanged=BT_FALSE;
		if ( (searchId>=0) && (oldSearchStr) && (hostId==oldHostId) ) {
			searchesChanged=editSearch(ctx,host,searchId,oldSearchStr,searchStr);
		} else if (searchStr) {
			searchesChanged=addSearch(ctx,host,searchStr);
			if (searchesChanged){
				if ( (searchId>=0) && (oldSearchStr) && hostId!=oldHostId){
					hostConf_t *oldHost=getHost(oldHostId);
					deleteSearch(ctx,oldHost,searchId,oldSearchStr);
				}
			}
		}
		if (searchesChanged) {
			updateSearches(ctx,host);
		}
		ctx_printfn(ctx,"</div>\n",-1,0);
		if (!ctx->isAjaxRequest){
			ctx->currentAction=PA_SUMMARY;
		}
	}
	if (ctx->currentAction==PA_EDIT || ctx->currentAction==PA_SEARCH_CREATE_FROM_EVENT) {
		if (channels->length==0){
			getChannelList(host,channels,SF_NONE,SD_NONE);
		}
		search_t vsearch;
		search_t *search=&vsearch;
		initSearch(search);
		if (ctx->currentAction==PA_EDIT){
			if (searchStr) {
				parseSearch(searchStr,search,channels);
				search->searchStr=searchStr;
			}
			search->id=searchId;
			search->hostId=hostId;
		} else {
			initSearchFromEvent(ctx,search,host,vars_get_value_i(args,"channelNum"),vars_get_value_i(args,"eventId"));	
		}
		printSearchForm(ctx,search,channels,"level3");
		freeSearch(search);
	}
	if (ctx->currentAction==PA_SUMMARY) {
		if (channels->length==0 && host){
			getChannelList(host,channels,SF_NONE,SD_NONE);
		}
		if (channels->length>0) {
			searchList_t searches;
			getSearchList(&searches,channels,ctx->sortBy,ctx->sortDirection);
			boolean_t printHost=boolean(webifConf.numVDRs>1);
			ctx_printfn(ctx,"<table id=\"searches\" class=\"level3-div\" summary=\"%s\">\n",0,1,tr("searches"));
			ctx_printf0(ctx,"<col class=\"searchId number\"/>\n");
			if (printHost) ctx_printf0(ctx,"<col class=\"hostId number\"/>\n");
			ctx_printf0(ctx,"<col class=\"search\"/>\n");
			ctx_printf0(ctx,"<col class=\"directory\"/>\n");
			ctx_printf0(ctx,"<col class=\"hour\"/>\n");
			ctx_printf0(ctx,"<col class=\"hour\"/>\n");
			ctx_printfn(ctx,"<thead class=\"level3-top\">\n",0,1);
			ctx_printfn(ctx,"<tr>\n",0,1);
			printList1TH(ctx,"searches.kl1",SF_SE_NUMBER,"#");
			if (printHost){
				printList1TH(ctx,"searches.kl1",SF_HOST,"Host");
			}
			printList1TH(ctx,"searches.kl1",SF_NAME,tr("search"));
			printList1TH(ctx,"searches.kl1",SF_DIRECTORY,tr("directory"));
			printList1TH(ctx,"searches.kl1",SF_START,tr("start"));
			printList1TH(ctx,"searches.kl1",SF_START,tr("end"));
			ctx_printfn(ctx,"</tr>\n",-1,0);
			ctx_printfn(ctx,"</thead>\n",-1,0);

			ctx_printfn(ctx,"<tbody class=\"level3\">\n",0,1);
			const char *EditSearch=tr("search.edit");
			const search_t *search;
			struct tm sdate;
			int i,hour,min;
			for (i=0,search=searches.entry;i<searches.length;i++,search++) {
				ctx_printfn(ctx,"<tr%s>\n",0,1,classActive[isFlagSet(SFL_USE_AS_SEARCH_TIMER,search->flags)]);
				ctx_printf0(ctx,"<td class=\"number\">%d</td>\n",search->id);
				if (printHost) 
					ctx_printf0(ctx,"<td class=\"number\">%d</td>\n",search->hostId);
				ctx_printfn(ctx,"<td>\n",0,1);
				ctx_printf0(ctx,
					"<a class=\"searchEdit titleLink\" href=\"searches.kl1?a=%d&amp;searchId=%d&amp;searchStr=%s&amp;hostId=%d\" title=\"%s\">"
						"%s"
					"</a>"
					,PA_EDIT,search->id,CTX_URL_ENCODE(search->searchStr,-1,NULL),search->hostId,EditSearch,search->search);
				ctx_printfn(ctx,"</td>\n",-1,0);
				ctx_printf0(ctx,"<td>%s</td>\n",CTX_HTML_ENCODE(search->directory,-1));
				if (isFlagSet(SFL_USE_TIME,search->flags)){
					hour=search->startTime/100;
					min=search->startTime-hour*100;
					ctx_printf0(ctx,"<td class=\"hour\">%02d:%02d</td>\n",hour,min);
					hour=search->stopTime/100;
					min=search->stopTime-hour*100;
					ctx_printf0(ctx,"<td class=\"hour\">%02d:%02d</td>\n",hour,min);
				} else {
					ctx_printf0(ctx,"<td class=\"hour\">00:00</td>\n");
					ctx_printf0(ctx,"<td class=\"hour\">23:59</td>\n");
				}

				ctx_printfn(ctx,"</tr>\n",-1,0);
			}
			ctx_printfn(ctx,"</tbody>\n",-1,0);
			ctx_printfn(ctx,"</table>\n",-1,0);
			freeSearchList(&searches);
		} else {
			//TODO
		}
	}
	if (!ctx->isAjaxRequest){
		ctx_printfn(ctx,"</div>\n",-1,0); //level2
		ctx_printfn(ctx,"</div>\n",-1,0); //level2-div
	}
	finishHtmlPage(ctx);
	if (mySearchStr){
		free(searchStr);
		mySearchStr=BT_FALSE;
	}
	if (myOldSearchStr){
		free(oldSearchStr);
		myOldSearchStr=BT_FALSE;
	}
	freeChannelList(channels);
	freeCtx(ctx);
	closeSvdrpAll();
%>
