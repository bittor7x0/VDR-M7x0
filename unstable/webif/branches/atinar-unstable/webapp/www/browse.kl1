<%!
/*
* 
* This source-code is licensed under GPL v2.
* See ../../LICENSE for details
* 
* Originally written for http://vdr-m7x0.foroactivo.com.es by:
* atinar <atinar1@hotmail.com>
* 
* You will need the KLONE web application development framework
* from www.koanlogic.com Version 2.
* 
*/

#include <klapp_conf.h>
#include <klone/utils.h>
#include <time.h>
#include <dirent.h>
#include <error.h>
#include <stdio.h>
#include <string.h>
#include <u/libu.h>

#include "browse.h"
#include "conf.h"
#include "misc.h"
#include "i18n.h"
#include "recordings.h"
#include "svdrp_comm.h"

#ifdef DEBUG
void dbg_browse_kl1(void) { dbg("browse.kl1"); }
#endif

%><%

	#ifdef DEBUG
	dbg_browse_kl1();
	#endif

	config(session, request);
	vars_t *args = request_get_args(request);
	enum {AUXSZ=4096};
	char aux[AUXSZ];
	webifState.currentPage=PN_BROWSE;
	webifState.currentAction=(vars_countn(args,"a")>0)?vars_get_value_i(args,"a"):PA_BROWSE;
	
	if (webifState.currentAction==PA_PLAY) {
		rec_t rec;
		initRec(&rec);
		initRecFromArgs(&rec,args);
		boolean_t ok=printRecPlaylist(request,response,out,&rec,aux);
		freeRec(&rec);
		if (ok) goto end;
	}
	
	int ntabs=initHtmlPage(response,out,tr("recordings"),
"		<script type=\"text/javascript\">\n"
"			webif.messages.confirmDelete='%s';\n"
"		</script>\n"
"		<script type=\"text/javascript\" src=\"/js/browse.js\"></script>\n"
		,tr("rec.delete.confirm")
	);
	printMenu(out,ntabs);
	io_printf(out,"%.*s<div id=\"main\">\n",ntabs++,tabs);
	io_printf(out,"%.*s<h2>%s</h2>\n",ntabs,tabs,tr("recordings"));
	io_printf(out,"%.*s<div class=\"section ui-helper-clearfix\">\n",ntabs++,tabs);
	
	if (webifState.currentAction==PA_DELETE) {
		if (webifConf.deletionDisabled) {
			io_printf(out,"%.*s<div class=\"alert\">%s</div>\n",ntabs,tabs,tr("deletionDisabled"));
		} else {
			const char *path=vars_get_value(args,"path");
			if (isValidRecPath(path)) {
				rec_t rec;
				initRec(&rec);
				initRecFromArgs(&rec,args);
				char *message=NULL;
				if (deleRec(&rec,&message))
					printMessage(out,ntabs,"message",tr("rec.delete.ok"),message,aux);
				else
					printMessage(out,ntabs,"message",tr("rec.delete.err"),message,aux);
				if (message) free(message);
				freeRec(&rec);
			} else {
				printMessage(out,ntabs,"alert",tr("recErrNoValidPath"),NULL,NULL);
			}
		}
		webifState.currentAction=PA_BROWSE;
	}
	if (webifState.currentAction==PA_EDIT) {
		rec_t rec;
		initRec(&rec);
		initRecFromArgs(&rec,args);
		getRecInfo(&rec);
		io_printf(out,"%.*s<form action=\"/browse.kl1\" method=\"post\">\n",ntabs++,tabs);
		if (vars_countn(args,"pl")>0)
			io_printf(out,"%.*s<input type=\"hidden\" name=\"pl\" value=\"%d\"/>\n",ntabs,tabs,vars_get_value_i(args,"pl"));
		printRecEditForm(out,ntabs,&rec,aux);
		io_printf(out,"%.*s</form>\n",--ntabs,tabs);
		freeRec(&rec);
		goto finish;
	}
	if (webifState.currentAction==PA_CONFIRM) {
		rec_t rec;
		initRec(&rec);
		initRecFromArgs(&rec,args);
		const char *oldName=vars_get_value(args,"oldName");
		if (rec.path && oldName!=NULL && !sameString(oldName,rec.name)){
			char *message=NULL;
			if (editRec(&rec,&message))
				printMessage(out,ntabs,"message",tr("rec.edit.ok"),message,aux);
			else 
				printMessage(out,ntabs,"message",tr("rec.edit.err"),message,aux);
			free(message);
		}
		freeRec(&rec);
		webifState.currentAction=PA_BROWSE;
	}
	if (webifState.currentAction==PA_BROWSE){
		const char *argpath=(vars_countn(args, "path")>0) ? vars_get_value(args,"path") : NULL;
		char *path=NULL;
		if (argpath) {
			int l=strlen(argpath);
			int pl=(vars_countn(args,"pl")>0) ? vars_get_value_i(args,"pl") : l;
			if (pl>l) pl=l;
			const char * c;
			for (c=argpath+pl-1;(c>=argpath) && (*c=='/' || *c=='_');c--) pl--;
			if (pl>0) {
				if (argpath[0]=='/') {
					argpath++;
					pl--;
				}
				if (pl>0)
				crit_goto_if((path=strndup(argpath,pl))==NULL,outOfMemory);
			}
		}
		if (path && path[0]=='/') path++;

		io_printf(out,"%.*s<div id=\"recPathWrapper\">\n",ntabs++,tabs);
		printRecPathUl(out,ntabs,path,aux);
		io_printf(out,"%.*s</div>\n",--ntabs,tabs);

		recDir_t rdir;
		initRecDir(&rdir);
		getRecDir(path,&rdir);
		io_printf(out,"%.*s<div id=\"recFoldersWrapper\">\n",ntabs++,tabs);
		printRecDirListUL(out,ntabs,path,(path)?strlen(path):0,&rdir,aux,0);
		io_printf(out,"%.*s</div>\n",--ntabs,tabs);
		freeRecDir(&rdir);
		free(path);
	}
finish:
	io_printf(out,"%.*s</div>\n",--ntabs,tabs);
	io_printf(out,"%.*s</div>\n",--ntabs,tabs);
	finishHtmlPage(out,ntabs);
	goto end;
outOfMemory:
	crit("browse.kl1:out of memory");
	exit(1);
end:
	closeSvdrpAll();
%>
