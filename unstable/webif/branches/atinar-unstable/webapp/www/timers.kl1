<%!
/*
* 
* This source-code is licensed under GPL v2.
* See ../../LICENSE for details
* 
* (c) Christian Kelinski <k@kille.cx>
* Please checkout the README file!
* 
* Originally written for the open7x0.org VDR-FW project:
* www.open7x0.org
* 
* Modified for http://vdr-m7x0.foroactivo.com.es by:
* atinar <atinar1@hotmail.com>
* 
* You will need the KLONE web application development framework
* from www.koanlogic.com Version 2.
* 
*/

#include <klapp_conf.h>
#include <time.h>
#include <locale.h>
#include <u/libu.h>

#include "channels.h"
#include "conf.h"
#include "epg.h"
#include "i18n.h"
#include "svdrp_comm.h"
#include "timers.h"

#ifdef DEBUG
static void dbg_timers_kl1(void){
   dbg("timers.kl1");
}
#endif

static void printHtmlHeadExtra(wcontext_t *wctx){
	if (!wctx->isAjaxRequest){
		wctx_printf0(wctx,"<script type=\"text/javascript\" src=\"%s/js/jquery.form-2.36.js\"></script>\n",webifConf.www);
		wctx_printf0(wctx,"<script type=\"text/javascript\" src=\"%s/js/formHandler.js\"></script>\n",webifConf.www);
		wctx_printf0(wctx,"<script type=\"text/javascript\" src=\"%s/js/timers.js\"></script>\n",webifConf.www);
	}
	wctx_printfn(wctx,"<script type=\"text/javascript\">\n",0,1);
	if (!wctx->isAjaxRequest){
		wctx_printf0(wctx,"$(function(){webif.timersPageInit();});\n");
	}
	wctx_printfn(wctx,"$.extend(webif.messages,{\n",0,1);
	wctx_printf0(wctx,"timerDeleteConfirm:'%s',\n",tr("timer.delete.confirm"));
	wctx_printfn(wctx,"});\n",-1,0);
	wctx_printfn(wctx,"</script>\n",-1,0);
}

%><%

	#ifdef DEBUG
	dbg_timers_kl1();
	#endif

	wcontext_t vwctx;
	wcontext_t *wctx=&vwctx;
	if (initCtx(wctx,PN_TIMERS,session,request,response,out,4096)){
		int i=0;
		int l;

		vars_t *args = request_get_args(request);
		int timerId=vars_get_value_i(args,"timerId");
		bool myTimerStr;
		bool myOldTimerStr;
		char *timerStr=wctxGetRequestParam(wctx,args,"timerStr",&myTimerStr);
		char *oldTimerStr=wctxGetRequestParam(wctx,args,"oldTimerStr",&myOldTimerStr);
		const int hostId=vars_get_value_i(args,"hostId");
		const int oldHostId=vars_get_value_i(args,"oldHostId");
		hostConf_t *host=(vars_countn(args,"hostId")>0) ? getHost(hostId) : NULL;
		if (!host || !host->isVdr){
			host=getFirstVdrHost();
		}
		wctx->currentAction=(vars_countn(args,"a")>0) ? vars_get_value_i(args,"a") : PA_SUMMARY;
		wctx->sortBy=(vars_countn(args,"sort")>0) ? vars_get_value_i(args,"sort") : SF_START;
		wctx->sortDirection=(vars_countn(args,"direction")>0) ? vars_get_value_i(args,"direction") : SD_ASC;

		channelList_t vchannels;
		channelList_t *channels=&vchannels;
		initChannelList(channels);

		initHtmlPage(wctx,tr("timers"),printHtmlHeadExtra);
		if (!wctx->isAjaxRequest){
			wctx_printfn(wctx,"<div class=\"level2-div ui-widget\">\n",0,1);
			wctx_printf0(wctx,"<h2 class=\"level2-top ui-widget-header\">%s</h2>\n",tr("timers"));
			wctx_printfn(wctx,"<div class=\"level2 ui-widget-content\">\n",0,1);
		}
		if (wctx->isReload && wctx->currentAction==PA_ADD){
			wctx->currentAction=PA_SUMMARY;
		}
		bool timersHaveChanged=false;
		if (wctx->currentAction==PA_DELETE) {
			if ( (timerId>0) && (oldTimerStr) ) {
				wctx_printfn(wctx,"<div class=\"messageDialog\">\n",0,1);
				timersHaveChanged=deleteTimer(wctx,host,timerId,oldTimerStr);
				if (!timersHaveChanged){
					wctx->currentAction=PA_EDIT;
					if (myTimerStr){
						free(timerStr);
					}
					timerStr=oldTimerStr;
					myTimerStr=myOldTimerStr;
					myOldTimerStr=false;
				}
				wctx_printfn(wctx,"</div>\n",-1,0); //messageDialog
			}
			if (!wctx->isAjaxRequest){
				wctx->currentAction=PA_SUMMARY;
			}
		}
		if (wctx->currentAction==PA_ADD) {
			if (timerStr==NULL){
				vdrTimer_t timer;
				if (initTimerFromArgs(&timer,args,wctx)){
					timerStr=makeTimerStr(&timer);
					myTimerStr=true;
				}
				freeTimer(&timer);
			}
			wctx_printfn(wctx,"<div class=\"messageDialog\">\n",0,1);
			if ( (timerId>0) && (timerStr) && (oldTimerStr) && (hostId==oldHostId)) {
				timersHaveChanged=editTimer(wctx,host,timerId,oldTimerStr,timerStr);
			} else if (timerStr) {
				if (addTimer(wctx,host,timerStr)){
					timersHaveChanged=true;
					if ((timerId>0) && (oldTimerStr) && (hostId!=oldHostId)){
						hostConf_t *oldHost=getHost(oldHostId);
						deleteTimer(wctx,oldHost,timerId,oldTimerStr);
					}
				}
			}
			wctx_printfn(wctx,"</div>\n",-1,0);
			if (!wctx->isAjaxRequest){
				wctx->currentAction=PA_SUMMARY;
			}
		}
		if (timersHaveChanged && wctx->isAjaxRequest){
			if (vars_countn(args,"epg_grid_start")){
				if (channels->length==0 && host){
					getChannelList(host,channels,SF_NONE,SD_NONE);
				}
				if (channels->length>0) {
					time_t start, end;
					timerList_t timers;
					initTimerList(&timers);
					getTimerList(&timers,channels,wctx->sortBy,wctx->sortDirection);
					getEpgGridLimits(vars_get_value(args,"epg_grid_start"),&start,&end);
					printTimersDiv(wctx,AJAX_REPLACE_PREFIX("timers"),&timers,start,end);
					freeTimerList(&timers);
				}
			} else if (vars_countn(args,"epg_channel_num")){
				const int channelNum=vars_get_value_i(args,"epg_channel_num");
				if (channelNum>0){
					if (channels->length==0 && host){
						getChannelList(host,channels,SF_NONE,SD_NONE);
					}
					if (channels->length>0) {
						timerList_t timers;
						initTimerList(&timers);
						getTimerList(&timers,channels,wctx->sortBy,wctx->sortDirection);
						printChannelEpg(wctx,AJAX_REPLACE_PREFIX("epg"),host,channelNum,&timers);
						freeTimerList(&timers);
					}
				}
			} else {
				wctx->currentAction=PA_SUMMARY;
			}
		}
		if (wctx->currentAction==PA_EDIT || wctx->currentAction==PA_TIMER_CREATE_FROM_EVENT) {
			if (channels->length==0){
				getChannelList(host,channels,SF_NONE,SD_NONE);
			}
			vdrTimer_t vtimer;
			vdrTimer_t *timer=&vtimer;
			initTimer(timer);
			if (wctx->currentAction==PA_EDIT){
				if (timerStr) {
					parseTimer(timerStr,timer);
					timer->timerStr=timerStr;
				} else {
					timer->start=time(NULL);
					timer->type=TT_ONE_TIME;
				}
				timer->id=timerId;
				timer->hostId=hostId;
			} else {
				initTimerFromEvent(wctx,timer,host,vars_get_value_i(args,"channelNum"),vars_get_value_i(args,"eventId"));	
			}
			printTimerForm(wctx,timer,channels);
			freeTimer(timer);
		}
		if (wctx->currentAction==PA_SUMMARY) {
			if (channels->length==0 && host){
				getChannelList(host,channels,SF_NONE,SD_NONE);
			}
			if (channels->length>0) {
				timerList_t timers;
				conflictList_t conflicts;
				getTimerList(&timers,channels,wctx->sortBy,wctx->sortDirection);
				getConflictList(&conflicts,&timers);
				bool printHost=boolean(webifConf.numVDRs>1);
				wctx_printfn(wctx,"<table id=\"%s\" class=\"level3-div\" summary=\"%s\">\n",0,1,AJAX_REPLACE_PREFIX("timers"),tr("timerList"));
				wctx_printf0(wctx,"<col class=\"number\"/>\n");
				if (printHost) wctx_printf0(wctx,"<col class=\"number\"/>\n");
				wctx_printf0(wctx,"<col class=\"tmDate date\"/>\n");
				wctx_printf0(wctx,"<col class=\"chName\"/>\n");
				wctx_printf0(wctx,"<col class=\"tmStart hour\"/>\n");
				wctx_printf0(wctx,"<col class=\"tmEnd hour\"/>\n");
				wctx_printf0(wctx,"<col class=\"tmName\"/>\n");
				wctx_printf0(wctx,"<col class=\"mxName\"/>\n");
				
				wctx_printfn(wctx,"<thead class=\"level3-top\">\n",0,1);
				wctx_printfn(wctx,"<tr>\n",0,1);
				printList1TH(wctx,"timers.kl1",SF_TM_NUMBER,"#");
				if (printHost){
					printList1TH(wctx,"timers.kl1",SF_HOST,"Host");
				}
				printList1TH(wctx,"timers.kl1",SF_START,tr("date"));
				printList1TH(wctx,"timers.kl1",SF_CH_NUMBER,tr("channel"));
				printList1TH(wctx,"timers.kl1",SF_START,tr("start"));
				printList1TH(wctx,"timers.kl1",SF_START,tr("end"));
				printList1TH(wctx,"timers.kl1",SF_TITLE,tr("title"));
				printList1TH(wctx,"timers.kl1",SF_MUX,tr("channelMux"));
				wctx_printfn(wctx,"</tr>\n",-1,0);
				wctx_printfn(wctx,"</thead>\n",-1,0);

				wctx_printfn(wctx,"<tbody class=\"level3\">\n",0,1);
				const char *EditTimer=tr("timer.edit");
				const char *Schedule=tr("epg");
				channel_t noChannel;
				const channel_t *channel;
				noChannel.channelNum=1;
				noChannel.channelName="";
				noChannel.multiplexName="";
				const vdrTimer_t *timer;
				for (i=0,timer=timers.entry;i<timers.length;i++,timer++) {
					struct tm t1=*localtime(&timer->start);
					struct tm t2=*localtime(&timer->stop);
					channel=(timer->channel)?timer->channel:&noChannel;
					wctx_printfn(wctx,"<tr class=\"%s%s\">\n",0,1,isFlagSet(TF_ACTIVE,timer->flags)?"active":"inactive",(timer->inConflict)?" conflict":"");
					wctx_printf0(wctx,"<td class=\"number\">%d</td>\n",timer->id);
					if (printHost) {
						wctx_printf0(wctx,"<td class=\"number\">%d</td>\n",timer->hostId);
					}
					if (timer->type==TT_REGULAR) {
						wctx_printf0(wctx,"<td class=\"date\">%s (%.7s)</td>\n",formatDate(&t1,0),timer->wdays);
					} else {
						wctx_printf0(wctx,"<td class=\"date\">%s</td>\n",formatDate(&t1,0));
					}
					wctx_printf0(wctx,
						"<td>"
							"<a class=\"channel\" href=\"epg.kl1?channelNum=%d#timer%d_1\" title=\"%s\">%s</a>"
						"</td>\n"
						,channel->channelNum,timer->id,Schedule,channel->channelName);
					wctx_printf0(wctx,"<td class=\"hour\">%02d:%02d</td>\n",t1.tm_hour,t1.tm_min);
					wctx_printf0(wctx,"<td class=\"hour\">%02d:%02d</td>\n",t2.tm_hour,t2.tm_min);
					wctx_printf0(wctx,
						"<td>"
							"<a class=\"timerEdit titleLink\" href=\"timers.kl1?a=%d&amp;timerId=%d&amp;timerStr=%s&amp;hostId=%d\" title=\"%s\">%s</a>"
						"</td>\n"
						,PA_EDIT,timer->id,CTX_URL_ENCODE(timer->timerStr,-1,NULL),timer->hostId,EditTimer,timer->title);
					wctx_printf0(wctx,"<td>%s</td>\n",channel->multiplexName);
					wctx_printfn(wctx,"</tr>\n",-1,0);
				}
				wctx_printfn(wctx,"</tbody>\n",-1,0);
				wctx_printfn(wctx,"</table>\n",-1,0);
				freeConflictList(&conflicts);
				freeTimerList(&timers);
			} else {
				printMessage(wctx,"alert",tr("warnNoEPG"),NULL, false);
			}
		}
		if (!wctx->isAjaxRequest){
			wctx_printfn(wctx,"</div>\n",-1,0); //level2
			wctx_printfn(wctx,"</div>\n",-1,0); //level2-div
		}
		finishHtmlPage(wctx);
		if (myTimerStr){
			free(timerStr);
			myTimerStr=false;
		}
		if (myOldTimerStr){
			free(oldTimerStr);
			myOldTimerStr=false;
		}
		freeChannelList(channels);
		closeSvdrpAll();
	}
	freeCtx(wctx);
%>
