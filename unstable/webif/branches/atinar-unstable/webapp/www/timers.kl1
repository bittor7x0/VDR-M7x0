<%!
/*
* 
* This source-code is licensed under GPL v2.
* See ../../LICENSE for details
* 
* (c) Christian Kelinski <k@kille.cx>
* Please checkout the README file!
* 
* Originally written for the open7x0.org VDR-FW project:
* www.open7x0.org
* 
* Modified for http://vdr-m7x0.foroactivo.com.es by:
* atinar <atinar1@hotmail.com>
* 
* You will need the KLONE web application development framework
* from www.koanlogic.com Version 2.
* 
*/

#include <klapp_conf.h>
#include <time.h>
#include <locale.h>
#include <u/libu.h>

#include "channels.h"
#include "conf.h"
#include "epg.h"
#include "i18n.h"
#include "svdrp_comm.h"
#include "timers.h"

#ifdef DEBUG
static void dbg_timers_kl1(void){
   dbg("timers.kl1");
}
#endif

static void printHtmlHeadExtra(context_t *ctx){
	if (!ctx->isAjaxRequest){
		ctx_printf0(ctx,"<script type=\"text/javascript\" src=\"%s/js/jquery.form-2.36.js\"></script>\n",webifConf.www);
		ctx_printf0(ctx,"<script type=\"text/javascript\" src=\"%s/js/formHandler.js\"></script>\n",webifConf.www);
		ctx_printf0(ctx,"<script type=\"text/javascript\" src=\"%s/js/timers.js\"></script>\n",webifConf.www);
	}
	ctx_printfn(ctx,"<script type=\"text/javascript\">\n",0,1);
	if (!ctx->isAjaxRequest){
		ctx_printf0(ctx,"$(function(){webif.timersPageInit();});\n");
	}
	ctx_printfn(ctx,"$.extend(webif.messages,{\n",0,1);
	ctx_printf0(ctx,"timerDeleteConfirm:'%s',\n",tr("timer.delete.confirm"));
	ctx_printfn(ctx,"});\n",-1,0);
	ctx_printfn(ctx,"</script>\n",-1,0);
}

%><%

	#ifdef DEBUG
	dbg_timers_kl1();
	#endif

	context_t vctx;
	context_t *ctx=&vctx;
	initCtx(ctx,session,request,response,out,4096);

	int i=0;
	int l;

	vars_t *args = request_get_args(request);
	int timerId=vars_get_value_i(args,"timerId");
	boolean_t myTimerStr;
	boolean_t myOldTimerStr;
	char *timerStr=ctxGetRequestParam(ctx,args,"timerStr",&myTimerStr);
	char *oldTimerStr=ctxGetRequestParam(ctx,args,"oldTimerStr",&myOldTimerStr);
	const int hostId=vars_get_value_i(args,"hostId");
	const int oldHostId=vars_get_value_i(args,"oldHostId");
	hostConf_t *host=(vars_countn(args,"hostId")>0) ? getHost(hostId) : NULL;
	if (!host || !host->isVdr){
		host=getFirstVdrHost();
	}
	ctx->currentPage=PN_TIMERS;
	ctx->currentAction=(vars_countn(args,"a")>0) ? vars_get_value_i(args,"a") : PA_SUMMARY;
	ctx->sortBy=(vars_countn(args,"sort")>0) ? vars_get_value_i(args,"sort") : SF_START;
	ctx->sortDirection=(vars_countn(args,"direction")>0) ? vars_get_value_i(args,"direction") : SD_ASC;

	channelList_t vchannels;
	channelList_t *channels=&vchannels;
	initChannelList(channels);

	initHtmlPage(ctx,tr("timers"),printHtmlHeadExtra);
	if (!ctx->isAjaxRequest){
		ctx_printfn(ctx,"<div class=\"level2-div ui-widget\">\n",0,1);
		ctx_printf0(ctx,"<h2 class=\"level2-top ui-widget-header\">%s</h2>\n",tr("timers"));
		ctx_printfn(ctx,"<div class=\"level2 ui-widget-content\">\n",0,1);
	}
	if (ctx->isReload && ctx->currentAction==PA_ADD){
		ctx->currentAction=PA_SUMMARY;
	}
	boolean_t timersHaveChanged=BT_FALSE;
	if (ctx->currentAction==PA_DELETE) {
		if ( (timerId>0) && (oldTimerStr) ) {
			ctx_printfn(ctx,"<div class=\"messageDialog\">\n",0,1);
			timersHaveChanged=deleteTimer(ctx,host,timerId,oldTimerStr);
			if (!timersHaveChanged){
				ctx->currentAction=PA_EDIT;
				if (myTimerStr){
					free(timerStr);
				}
				timerStr=oldTimerStr;
				myTimerStr=myOldTimerStr;
				myOldTimerStr=BT_FALSE;
			}
			ctx_printfn(ctx,"</div>\n",-1,0); //messageDialog
		}
		if (!ctx->isAjaxRequest){
			ctx->currentAction=PA_SUMMARY;
		}
	}
	if (ctx->currentAction==PA_ADD) {
		if (timerStr==NULL){
			vdrTimer_t timer;
			if (initTimerFromArgs(&timer,args,ctx)){
				timerStr=makeTimerStr(&timer);
				myTimerStr=BT_TRUE;
			}
			freeTimer(&timer);
		}
		ctx_printfn(ctx,"<div class=\"messageDialog\">\n",0,1);
		if ( (timerId>0) && (timerStr) && (oldTimerStr) && (hostId==oldHostId)) {
			timersHaveChanged=editTimer(ctx,host,timerId,oldTimerStr,timerStr);
		} else if (timerStr) {
			if (addTimer(ctx,host,timerStr)){
				timersHaveChanged=BT_TRUE;
				if ((timerId>0) && (oldTimerStr) && (hostId!=oldHostId)){
					hostConf_t *oldHost=getHost(oldHostId);
					deleteTimer(ctx,oldHost,timerId,oldTimerStr);
				}
			}
		}
		ctx_printfn(ctx,"</div>\n",-1,0);
		if (!ctx->isAjaxRequest){
			ctx->currentAction=PA_SUMMARY;
		}
	}
	if (timersHaveChanged && ctx->isAjaxRequest){
		if (vars_countn(args,"epg_grid_start")){
			if (channels->length==0 && host){
				getChannelList(host,channels,SF_NONE,SD_NONE);
			}
			if (channels->length>0) {
				time_t start, end;
				timerList_t timers;
				initTimerList(&timers);
				getTimerList(&timers,channels,ctx->sortBy,ctx->sortDirection);
				getEpgGridLimits(vars_get_value(args,"epg_grid_start"),&start,&end);
				printTimersDiv(ctx,AJAX_REPLACE_PREFIX("timers"),&timers,start,end);
				freeTimerList(&timers);
			}
		} else if (vars_countn(args,"epg_channel_num")){
			const int channelNum=vars_get_value_i(args,"epg_channel_num");
			if (channelNum>0){
				if (channels->length==0 && host){
					getChannelList(host,channels,SF_NONE,SD_NONE);
				}
				if (channels->length>0) {
					timerList_t timers;
					initTimerList(&timers);
					getTimerList(&timers,channels,ctx->sortBy,ctx->sortDirection);
					printChannelEpg(ctx,AJAX_REPLACE_PREFIX("epg"),host,channelNum,&timers);
					freeTimerList(&timers);
				}
			}
		} else {
			ctx->currentAction=PA_SUMMARY;
		}
	}
	if (ctx->currentAction==PA_EDIT || ctx->currentAction==PA_TIMER_CREATE_FROM_EVENT) {
		if (channels->length==0){
			getChannelList(host,channels,SF_NONE,SD_NONE);
		}
		vdrTimer_t vtimer;
		vdrTimer_t *timer=&vtimer;
		initTimer(timer);
		if (ctx->currentAction==PA_EDIT){
			if (timerStr) {
				parseTimer(timerStr,timer);
				timer->timerStr=timerStr;
			} else {
				timer->start=time(NULL);
				timer->type=TT_ONE_TIME;
			}
			timer->id=timerId;
			timer->hostId=hostId;
		} else {
			initTimerFromEvent(ctx,timer,host,vars_get_value_i(args,"channelNum"),vars_get_value_i(args,"eventId"));	
		}
		printTimerForm(ctx,timer,channels);
		freeTimer(timer);
	}
	if (ctx->currentAction==PA_SUMMARY) {
		if (channels->length==0 && host){
			getChannelList(host,channels,SF_NONE,SD_NONE);
		}
		if (channels->length>0) {
			timerList_t timers;
			getTimerList(&timers,channels,ctx->sortBy,ctx->sortDirection);
			boolean_t printHost=boolean(webifConf.numVDRs>1);
			ctx_printfn(ctx,"<table id=\"%s\" class=\"level3-div\" summary=\"%s\">\n",0,1,AJAX_REPLACE_PREFIX("timers"),tr("timerList"));
			ctx_printf0(ctx,"<col class=\"number\"/>\n");
			if (printHost) ctx_printf0(ctx,"<col class=\"number\"/>\n");
			ctx_printf0(ctx,"<col class=\"tmDate date\"/>\n");
			ctx_printf0(ctx,"<col class=\"chName\"/>\n");
			ctx_printf0(ctx,"<col class=\"tmStart hour\"/>\n");
			ctx_printf0(ctx,"<col class=\"tmEnd hour\"/>\n");
			ctx_printf0(ctx,"<col class=\"tmName\"/>\n");
			ctx_printf0(ctx,"<col class=\"mxName\"/>\n");
			
			ctx_printfn(ctx,"<thead class=\"level3-top\">\n",0,1);
			ctx_printfn(ctx,"<tr>\n",0,1);
			printList1TH(ctx,"timers.kl1",SF_TM_NUMBER,"#");
			if (printHost){
				printList1TH(ctx,"timers.kl1",SF_HOST,"Host");
			}
			printList1TH(ctx,"timers.kl1",SF_START,tr("date"));
			printList1TH(ctx,"timers.kl1",SF_CH_NUMBER,tr("channel"));
			printList1TH(ctx,"timers.kl1",SF_START,tr("start"));
			printList1TH(ctx,"timers.kl1",SF_START,tr("end"));
			printList1TH(ctx,"timers.kl1",SF_TITLE,tr("title"));
			printList1TH(ctx,"timers.kl1",SF_MUX,tr("channelMux"));
			ctx_printfn(ctx,"</tr>\n",-1,0);
			ctx_printfn(ctx,"</thead>\n",-1,0);

			ctx_printfn(ctx,"<tbody class=\"level3\">\n",0,1);
			const char *EditTimer=tr("timer.edit");
			const char *Schedule=tr("epg");
			channel_t noChannel;
			const channel_t *channel;
			noChannel.channelNum=1;
			noChannel.channelName="";
			noChannel.multiplexName="";
			const vdrTimer_t *timer;
			for (i=0,timer=timers.entry;i<timers.length;i++,timer++) {
				struct tm t1=*localtime(&timer->start);
				struct tm t2=*localtime(&timer->stop);
				channel=(timer->channel)?timer->channel:&noChannel;
				ctx_printfn(ctx,"<tr%s>\n",0,1,classActive[isFlagSet(TF_ACTIVE,timer->flags)]);
				ctx_printf0(ctx,"<td class=\"number\">%d</td>\n",timer->id);
				if (printHost) {
					ctx_printf0(ctx,"<td class=\"number\">%d</td>\n",timer->hostId);
				}
				if (timer->type==TT_REGULAR) {
					ctx_printf0(ctx,"<td class=\"date\">%s (%.7s)</td>\n",formatDate(&t1,0),timer->wdays);
				} else {
					ctx_printf0(ctx,"<td class=\"date\">%s</td>\n",formatDate(&t1,0));
				}
				ctx_printf0(ctx,
					"<td>"
						"<a class=\"channel\" href=\"epg.kl1?channelNum=%d#timer%d_1\" title=\"%s\">%s</a>"
					"</td>\n"
					,channel->channelNum,timer->id,Schedule,channel->channelName);
				ctx_printf0(ctx,"<td class=\"hour\">%02d:%02d</td>\n",t1.tm_hour,t1.tm_min);
				ctx_printf0(ctx,"<td class=\"hour\">%02d:%02d</td>\n",t2.tm_hour,t2.tm_min);
				ctx_printf0(ctx,
					"<td>"
						"<a class=\"timerEdit titleLink\" href=\"timers.kl1?a=%d&amp;timerId=%d&amp;timerStr=%s&amp;hostId=%d\" title=\"%s\">%s</a>"
					"</td>\n"
					,PA_EDIT,timer->id,CTX_URL_ENCODE(timer->timerStr,-1,NULL),timer->hostId,EditTimer,timer->title);
				ctx_printf0(ctx,"<td>%s</td>\n",channel->multiplexName);
				ctx_printfn(ctx,"</tr>\n",-1,0);
			}
			ctx_printfn(ctx,"</tbody>\n",-1,0);
			ctx_printfn(ctx,"</table>\n",-1,0);
			freeTimerList(&timers);
		} else {
			printMessage(ctx,"alert",tr("warnNoEPG"),NULL, BT_FALSE);
		}
	}
	if (!ctx->isAjaxRequest){
		ctx_printfn(ctx,"</div>\n",-1,0); //level2
		ctx_printfn(ctx,"</div>\n",-1,0); //level2-div
	}
	finishHtmlPage(ctx);
	if (myTimerStr){
		free(timerStr);
		myTimerStr=BT_FALSE;
	}
	if (myOldTimerStr){
		free(oldTimerStr);
		myOldTimerStr=BT_FALSE;
	}
	freeChannelList(channels);
	freeCtx(ctx);
	closeSvdrpAll();
%>
