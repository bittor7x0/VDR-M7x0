<%!
/*
* 
* This source-code is licensed under GPL v2.
* See ../../LICENSE for details
* 
* (c) Hans-Peter Jochmann
*     Christian Kelinski <k@kille.cx>
* Please checkout the README file!
* 
* Originally written for the open7x0.org VDR-FW project:
* www.open7x0.org
* 
* Modified for http://vdr-m7x0.foroactivo.com.es by:
* atinar <atinar1@hotmail.com>
* 
* You will need the KLONE web application development framework
* from www.koanlogic.com Version 2.
* 
*/

#include <klapp_conf.h>
#include <time.h>

#include "i18n.h"
#include "misc.h"
#include "channels.h"
#include "svdrp_comm.h"

#ifdef DEBUG
static void dbg_live_kl1(void){
   dbg("live.kl1");
}
#endif

static void printHtmlHeadExtra(context_t *ctx){
	ctx_printf0(ctx,"<link rel=\"stylesheet\" type=\"text/css\" href=\"%s/css/live.css\" media=\"screen\" />\n",webifConf.www);
	ctx_printf0(ctx,"<script type=\"text/javascript\" src=\"%s/js/jquery.selectboxes.js\"></script>\n",webifConf.www);
	ctx_printf0(ctx,"<script type=\"text/javascript\" src=\"%s/js/live.js\"></script>\n",webifConf.www);
	initJavascript(ctx);
	ctx_printf0(ctx,"$(function(){webif.livePageInit();});\n");
	finishJavascript(ctx);
}

%><%

	#ifdef DEBUG
	dbg_live_kl1();
	#endif

	context_t vctx;
	context_t *ctx=&vctx;
	initCtx(ctx,session,request,response,out,0);
	vars_t *args = request_get_args(request);
	int channelNum=vars_get_value_i(args,"channelNum");
	hostConf_t *host=(vars_countn(args,"hostId")>0) ? getHost(vars_get_value_i(args,"hostId")) : getFirstVdrHost();
	ctx->currentPage=PN_LIVE_STREAM;
	ctx->currentChannelNum=channelNum;
   initHtmlPage(ctx,tr("liveStream"),printHtmlHeadExtra);

	ctx_printfn(ctx,"<div class=\"level2-div ui-widget\">\n",0,1);
	ctx_printf0(ctx,"<h2 class=\"level2-top ui-widget-header\">%s</h2>\n",tr("liveStream"));
	ctx_printfn(ctx,"<div class=\"level2 ui-widget-content ui-helper-clearfix\">\n",0,1);

	if (host==NULL || !host->isVdr){
		ctx_printfn(ctx,"<div class=\"messageDialog\">\n",0,1);
		printMessage(ctx,"alert",tr("VDR not running!"),NULL,BT_FALSE);
	} else {
		channelList_t channels;
		const char *hostAddr=getHostHttpAddr(host,ctx);
		ctx_printfn(ctx,"<script type=\"text/javascript\">\n",0,1);
		ctx_printf0(ctx,"webif.state.url_base='http://%s';\n",hostAddr);
		ctx_printf0(ctx,"webif.state.channelNum='%d';\n",channelNum);
		ctx_printfn(ctx,"</script>\n",-1,0);
		
		getChannelList(host,&channels,SF_CH_NUMBER,SD_ASC);
		if ((channelNum<1) || (channelNum>channels.length)) {
			channel_t channel;
			if (getChannel(host,0,&channel)){
				channelNum=channel.channelNum;
			}
			freeChannel(&channel);
		}
		ctx_printfn(ctx,"<div id=\"control\">\n",0,1);
		const char *Play=tr("play");
		const char *Pause=tr("pause");
		const char *Fullscreen=tr("fullScreen");
		const char *Mute=tr("mute");
		const char *VolumeDown=tr("volumeDown");
		const char *VolumeUp=tr("volumeUp");

		{ //form
			ctx_printfn(ctx,"<form action=\"live.kl1\" method=\"post\" class=\"ui-helper-clearfix\">\n",0,1);
			ctx_printfn(ctx,"<ul class=\"controls\"><!--\n",0,1);
			ctx_printfn(ctx,"--><li class=\"control\">\n",0,1);
			printChannelListSelect(ctx,NULL,"channelNum",&channels,channelNum,NULL);
			ctx_printfn(ctx,"</li><!--\n",0,1);
			ctx_printfn(ctx,"--><li class=\"control\">\n",0,1);
			ctx_printf0(ctx,"<select id=\"audioTrack\" name=\"audioTrack\" size=\"1\" title=\"%s\"></select>\n",tr("audio.track"));
			ctx_printfn(ctx,"</li><!--\n",0,1);
			/* Produce error de desbordamiento de buffer en streamdevserver
			ctx_printf0(ctx,
				"--><li id=\"PlayOrPause\" class=\"control button-i ui-state-default\" >"
					"<span class=\"ui-icon ui-icon-pause\" title=\"%s\">%s</span>"
				"</li><!--\n",Pause,Pause);
			*/
			ctx_printf0(ctx,
				"--><li id=\"Fullscreen\" class=\"control button-i ui-state-default\" >"
					"<span class=\"ui-icon ui-icon-arrow-4-diag\" title=\"%s\">%s</span>"
				"</li><!--\n",Fullscreen,Fullscreen);
			ctx_printf0(ctx,
				"--><li id=\"Mute\" class=\"control button-i ui-state-default\" >"
					"<span class=\"ui-icon ui-icon-volume-off\" title=\"%s\">%s</span>"
				"</li><!--\n",Mute,Mute);
			ctx_printf0(ctx,
				"--><li id=\"VolumeDown\" class=\"control button-i ui-state-default\" >"
					"<span class=\"ui-icon ui-icon-volume-down\" title=\"%s\">%s</span>"
				"</li><!--\n",VolumeDown,VolumeDown);
			ctx_printf0(ctx,
				"--><li id=\"VolumeUp\" class=\"control button-i ui-state-default\" >"
					"<span class=\"ui-icon ui-icon-volume-up\" title=\"%s\">%s</span>"
				"</li><!--\n",VolumeUp,VolumeUp);
			ctx_printfn(ctx,"--></ul>\n",-1,0);
			ctx_printfn(ctx,"</form>\n",-1,0);
		}

		ctx_printf0(ctx,"<div id=\"info\"></div>\n");

		ctx_printfn(ctx,"</div>\n",-1,0); //control
			
			
		if ((channelNum>0) && (channelNum<=channels.length)) {
			const char *context =(channels.channel[channelNum-1].vpid>1) ? "/" : "/ES/";
			ctx_printfn(ctx,"<div id=\"vlcDiv\">\n",0,1);
//#define USE_EMBED_TAG
#ifdef USE_EMBED_TAG
				ctx_printfn(ctx,"<embed id=\"vlc\" width=\"%d\" height=\"%d\" type=\"application/x-vlc-plugin\"\n"
					,0,1,webifConf.videoWidth,webifConf.videoHeight);
				ctx_printf0(ctx,"	pluginspage=\"http://www.videolan.org/\"  version=\"VideoLAN.VLCPlugin.2\"\n");
				ctx_printf0(ctx,"	autoPlay=\"true\" target=\"http://%s:3000%s%d\" />\n",ntabs--,tabs,hostAddr,context,channelNum);
#else
			int p;
			for (p=0;p<2;p++){
				if (p==0) {
					ctx_printf0(ctx,"<!--[if !IE]><!-->\n");
					ctx_printfn(ctx,"<object id=\"vlc\" width=\"%d\" height=\"%d\" type=\"application/x-vlc-plugin\">\n"
						,0,1,webifConf.videoWidth,webifConf.videoHeight);
				}
				else {
					ctx_printf0(ctx,"<!--[if IE]>\n");
					ctx_printfn(ctx,"<object id=\"vlc\" width=\"%d\" height=\"%d\" type=\"application/x-vlc-plugin\" \n"
						,0,1,webifConf.videoWidth,webifConf.videoHeight);
					ctx_printf0(ctx,"classid=\"clsid:9BE31822-FDAD-461B-AD51-BE1D1C159921\"\n");
					ctx_printf0(ctx,"codebase=\"http://downloads.videolan.org/pub/videolan/vlc/latest/win32/axvlc.cab\">\n");
				}
				ctx_printf0(ctx,"<param name=\"ShowDisplay\" value=\"true\" />\n");
				ctx_printf0(ctx,"<param name=\"AutoLoop\" value=\"false\" />\n");
				ctx_printf0(ctx,"<param name=\"AutoPlay\" value=\"false\" />\n");
				//ctx_printf0(ctx,"<param name=\"src\" value=\"playlistch.kl1?type=%d\" />\n",webifConf.playlistType);
				ctx_printfn(ctx,"</object>\n",-1,0);
				ctx_printf0(ctx,"%s<![endif]-->\n",(p==0)?"<!--":"");
			}
#endif
			ctx_printfn(ctx,"</div>\n",-1,0); //vlcDiv
		}
		freeChannelList(&channels);
	}
	ctx_printfn(ctx,"</div>\n",-1,0); //level2
	ctx_printfn(ctx,"</div>\n",-1,0); //level2-div

	finishHtmlPage(ctx);
end:
	freeCtx(ctx);
	closeSvdrpAll();
%>
