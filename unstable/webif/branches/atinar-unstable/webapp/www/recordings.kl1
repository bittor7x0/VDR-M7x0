<%!
/*
* 
* This source-code is licensed under GPL v2.
* See ../../LICENSE for details
* 
* (c) Christian Kelinski <k@kille.cx>
* Please checkout the README file!
* 
* Originally written for the open7x0.org VDR-FW project:
* www.open7x0.org
* 
* Modified for http://vdr-m7x0.foroactivo.com.es by:
* atinar <atinar1@hotmail.com>
* 
* You will need the KLONE web application development framework
* from www.koanlogic.com Version 2.
* 
*/

#include <klapp_conf.h>
#include <klone/utils.h>
#include <time.h>

#include "conf.h"
#include "misc.h"
#include "i18n.h"
#include "recordings.h"
#include "svdrp_comm.h"

#ifdef DEBUG
dbg_recordings_kl1(void) { dbg("recordings.kl1"); }
#endif

%><%

	#ifdef DEBUG
	dbg_recordings_kl1();
	#endif

	config(session, request);
	vars_t *args = request_get_args(request);
	enum {AUXSZ=4096};
	char aux[AUXSZ];
	webifState.sortBy=(vars_countn(args, "sort")>0) ? vars_get_value_i(args,"sort") : SF_START;
	webifState.sortDirection=(vars_countn(args, "direction")>0) ? vars_get_value_i(args,"direction") : SD_ASC;
	webifState.currentPage=PN_RECORDINGS;
	webifState.currentAction=(vars_countn(args,"a")>0) ? vars_get_value_i(args,"a") : PA_SUMMARY;
	
	if (webifState.currentAction==PA_PLAY) {
		rec_t rec;
		initRecFromArgs(&rec,args);
		boolean_t ok=printRecPlaylist(request,response,out,&rec,aux);
		freeRec(&rec);
		if (ok) goto end;
	}
	
	int ntabs=initHtmlPage(response,out,tr("recordings"),
"		<script type=\"text/javascript\">\n"
"			webif.messages.confirmDelete='%s';\n"
"		</script>\n"
		,tr("rec.delete.confirm")
	);
	printMenu(out,ntabs);
	io_printf(out,"%.*s<div id=\"main\">\n",ntabs++,tabs);
	io_printf(out,"%.*s<h2>%s</h2>\n",ntabs,tabs,tr("recordings"));
	io_printf(out,"%.*s<div class=\"section\">\n",ntabs++,tabs);
	
	if (webifState.currentAction==PA_DELETE) {
		if (webifConf.deletionDisabled) {
			io_printf(out,"%.*s<div class=\"alert\">%s</div>\n",ntabs,tabs,tr("deletionDisabled"));
		} else {
			rec_t rec;
			initRecFromArgs(&rec,args);
			char *message=NULL;
			if (deleRec(&rec,&message))
				printMessage(out,ntabs,"message",tr("rec.delete.ok"),message,aux);
			else
				printMessage(out,ntabs,"message",tr("rec.delete.err"),message,aux);
			if (message) free(message);
			freeRec(&rec);
		}
	}
	if (webifState.currentAction==PA_EDIT) {
		rec_t rec;
		initRecFromArgs(&rec,args);
		getRecInfo(&rec);
		io_printf(out,"%.*s<form action=\"/recordings.kl1\" method=\"post\">\n",ntabs++,tabs);
		io_printf(out,"%.*s<input type=\"hidden\" name=\"sort\" value=\"%d\" />\n",ntabs,tabs,webifState.sortBy);
		io_printf(out,"%.*s<input type=\"hidden\" name=\"direction\" value=\"%d\" />\n",ntabs,tabs,webifState.sortDirection);
		printRecEditForm(out,ntabs,&rec,aux);
		io_printf(out,"%.*s</form>\n",--ntabs,tabs);
		freeRec(&rec);
		goto end;
	}
	if (webifState.currentAction==PA_CONFIRM) {
		rec_t rec;
		initRecFromArgs(&rec,args);
		const char *oldName=vars_get_value(args,"oldName");
		if (oldName!=NULL && !sameString(oldName,rec.name)){
			char *message=NULL;
			if (editRec(&rec,&message))
				printMessage(out,ntabs,"message",tr("rec.edit.ok"),message,aux);
			else 
				printMessage(out,ntabs,"message",tr("rec.edit.err"),message,aux);
			free(message);
		}
		freeRec(&rec);
	}
	if (BT_TRUE){
		recList_t recs;
		getRecList(&recs,webifState.sortBy,webifState.sortDirection);
		io_printf(out,"%.*s<table id=\"recordings\" class=\"list\" summary=\"\">\n",ntabs++,tabs);
		io_printf(out,"%.*s<col class=\"number\"/>\n",ntabs,tabs);
		io_printf(out,"%.*s<col class=\"date\"/>\n",ntabs,tabs);
		io_printf(out,"%.*s<col class=\"hour\"/>\n",ntabs,tabs);
		io_printf(out,"%.*s<col class=\"content\"/>\n",ntabs,tabs);
		io_printf(out,"%.*s<thead>\n",ntabs++,tabs);
		io_printf(out,"%.*s<tr>\n",ntabs++,tabs);
		printList1TH(out,ntabs,"recordings.kl1",SF_RC_NUMBER,"#");
		printList1TH(out,ntabs,"recordings.kl1",SF_START,tr("date"));
		printList1TH(out,ntabs,"recordings.kl1",SF_START,tr("start"));
		printList1TH(out,ntabs,"recordings.kl1",SF_TITLE,tr("title"));
		io_printf(out,"%.*s</tr>",--ntabs,tabs);
		io_printf(out,"%.*s</thead>",--ntabs,tabs);
		io_printf(out,"%.*s<tbody>",ntabs++,tabs);
		const char *RecEdit=tr("rec.edit");
		const char *RecDelete=tr("rec.delete");
		const char *Play=tr("play");
		rec_t *prec;
		int i,l;
		for (i=0,prec=recs.entry;i<recs.length;i++,prec++) {
			struct tm t1=*localtime(&prec->event.start);
			io_printf(out,"%.*s<tr class=\"rec\">\n",ntabs++,tabs);
			io_printf(out,"%.*s<td class=\"number\" >%d</td>\n",ntabs,tabs,prec->id);
			io_printf(out,"%.*s<td class=\"date\">%s</td>\n",ntabs,tabs,formatDate(&t1,0));
			io_printf(out,"%.*s<td class=\"hour\">%02d:%02d</td>\n",ntabs,tabs,t1.tm_hour,t1.tm_min);
			io_printf(out,"%.*s<td class=\"content\">\n",ntabs++,tabs);
			io_printf(out,"%.*s<form action=\"/recordings.kl1\" class=\"controls\" >\n",ntabs++,tabs);
			io_printf(out,"%.*s<input type=\"hidden\" name=\"sort\" value=\"%d\" />\n",ntabs,tabs,webifState.sortBy);
			io_printf(out,"%.*s<input type=\"hidden\" name=\"direction\" value=\"%d\" />\n",ntabs,tabs,webifState.sortDirection);
			printRecControls(out,8,prec,aux,Play,RecEdit,RecDelete);
			l=strlen(prec->name);
			u_htmlncpy(aux,prec->name,l,HTMLCPY_ENCODE);
			//io_printf(out,"%.*s<input type=\"text\" name=\"name\" class=\"name readOnly\" readonly=\"readonly\" value=\"%s\" size=\"%d\" />\n",ntabs,tabs,aux,l);
			io_printf(out,"%.*s</form>\n",--ntabs,tabs);
			io_printf(out,"%.*s%s</td>\n",--ntabs,tabs,aux);
			io_printf(out,"%.*s</tr>\n",--ntabs,tabs);
		}
		freeRecList(&recs);
		io_printf(out,"%.*s</tbody>\n",--ntabs,tabs);
		io_printf(out,"%.*s</table>\n",--ntabs,tabs);
	}
	io_printf(out,"%.*s</div>\n",--ntabs,tabs);
	io_printf(out,"%.*s</div>\n",--ntabs,tabs);
	finishHtmlPage(out,ntabs);
	goto end;
outOfMemory:
	crit("recordings.kl1:out of memory");
	exit(1);
end:
	closeSvdrpAll();
%>
