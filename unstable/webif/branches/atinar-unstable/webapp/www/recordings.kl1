<%!
/*
* 
* This source-code is licensed under GPL v2.
* See ../../LICENSE for details
* 
* (c) Christian Kelinski <k@kille.cx>
* Please checkout the README file!
* 
* Originally written for the open7x0.org VDR-FW project:
* www.open7x0.org
* 
* Modified for http://vdr-m7x0.foroactivo.com.es by:
* atinar <atinar1@hotmail.com>
* 
* You will need the KLONE web application development framework
* from www.koanlogic.com Version 2.
* 
*/

#include <klapp_conf.h>
#include <klone/utils.h>
#include <time.h>
#include <dirent.h>
#include <error.h>
#include <stdio.h>
#include <string.h>
#include <u/libu.h>

#include "browse.h"
#include "conf.h"
#include "misc.h"
#include "i18n.h"
#include "partitions.h"
#include "recordings.h"
#include "svdrp_comm.h"

#ifdef DEBUG
static void dbg_recordings_kl1(void){
   dbg("recordings.kl1");
}
#endif

static void printHtmlHeadExtra(wcontext_t *wctx){
	if (!wctx->isAjaxRequest) {
		wctx_printf0(wctx,"<link rel=\"stylesheet\" type=\"text/css\" href=\"%s/css/recordings.css\" media=\"screen\" />\n",webifConf.www);
		wctx_printf0(wctx,"<script type=\"text/javascript\" src=\"%s/js/jquery.form-2.36.js\"></script>\n",webifConf.www);
		wctx_printf0(wctx,"<script type=\"text/javascript\" src=\"%s/js/formHandler.js\"></script>\n",webifConf.www);
		wctx_printf0(wctx,"<script type=\"text/javascript\" src=\"%s/js/recordings.js\"></script>\n",webifConf.www);
		wctx_printfn(wctx,"<script type=\"text/javascript\">\n",0,1);
		wctx_printf0(wctx,"$(function(){webif.recordingsPageInit();});\n");
		wctx_printfn(wctx,"$.extend(webif.messages,{\n",0,1);
		wctx_printf0(wctx,"recDeleteConfirm:'%s',\n",tr("rec.delete.confirm"));
		wctx_printfn(wctx,"});\n",-1,0);
		wctx_printfn(wctx,"$.extend(webif.actions,{\n",0,1);
		wctx_printf0(wctx,"getRecInfo:%d,\n",PA_GET_REC_INFO);
		wctx_printfn(wctx,"});\n",-1,0);
		wctx_printfn(wctx,"</script>\n",-1,0);
	}
}

%><%

	#ifdef DEBUG
	dbg_recordings_kl1();
	#endif

	wcontext_t vwctx;
	wcontext_t *wctx=&vwctx;
	if (initCtx(wctx,PN_RECORDINGS,session,request,response,out,4096)){
		vars_t *args = request_get_args(request);
		wctx->sortBy=(vars_countn(args, "sort")>0) ? vars_get_value_i(args,"sort") : SF_START;
		wctx->sortDirection=(vars_countn(args, "direction")>0) ? vars_get_value_i(args,"direction") : SD_ASC;
		wctx->currentAction=(vars_countn(args,"a")>0)?vars_get_value_i(args,"a"):PA_BROWSE;
		pageAction_t nextAction=(vars_countn(args,"na")>0)?vars_get_value_i(args,"na"):wctx->currentAction;
		
		if (wctx->currentAction==PA_PLAY) {
			rec_t rec;
			initRecFromArgs(wctx,&rec,args);
			bool ok=printRecPlaylist(wctx,&rec);
			freeRec(&rec);
			if (ok) goto end;
		}
		initHtmlPage(wctx,tr("recordings"),printHtmlHeadExtra);
		if (!wctx->isAjaxRequest) {
			wctx_printfn(wctx,"<div class=\"level2-div ui-widget\">\n",0,1);
			wctx_printf0(wctx,"<h2 class=\"level2-top ui-widget-header\">%s</h2>\n",tr("recordings"));
			wctx_printfn(wctx,"<div class=\"level2 ui-widget-content ui-helper-clearfix\">\n",0,1);
		}

		bool recordingsHaveChanged=false;
		if (wctx->currentAction==PA_DELETE) {
			wctx_printfn(wctx,"<div class=\"messageDialog\">\n",0,1);
			if (webifConf.deletionDisabled) {
				printMessage(wctx,"alert",tr("rec.delete.err"),tr("deletionDisabled"),false);
			} else {
				rec_t rec;
				if (initRecFromArgs(wctx,&rec,args)){
					recordingsHaveChanged=deleteRec(wctx,&rec);
				}
				freeRec(&rec);
			}
			wctx_printfn(wctx,"</div>\n",-1,0);
			if (!wctx->isAjaxRequest || recordingsHaveChanged){
				wctx->currentAction=nextAction;
			}
		}
		if (wctx->currentAction==PA_CONFIRM) {
			wctx_printfn(wctx,"<div class=\"messageDialog\">\n",0,1);
			rec_t rec;
			if (initRecFromArgs(wctx,&rec,args)){
				recordingsHaveChanged=editRec(wctx,&rec,vars_get_value(args,"oldName"));
			}
			freeRec(&rec);
			wctx_printfn(wctx,"</div>\n",-1,0);
			if (!wctx->isAjaxRequest || recordingsHaveChanged){
				wctx->currentAction=nextAction;
			}
		}
		if (wctx->currentAction==PA_EDIT) {
			rec_t rec;
			if (initRecFromArgs(wctx,&rec,args)) {
				getRecInfo(&rec);
				wctx_printfn(wctx,"<form action=\"/recordings.kl1\" method=\"post\">\n",0,1);
				if (vars_countn(args,"pl")>0){
					wctx_printf0(wctx,"<input type=\"hidden\" name=\"pl\" value=\"%d\"/>\n",vars_get_value_i(args,"pl"));
				}
				wctx_printf0(wctx,"<input type=\"hidden\" name=\"sort\" value=\"%d\" />\n",wctx->sortBy);
				wctx_printf0(wctx,"<input type=\"hidden\" name=\"direction\" value=\"%d\" />\n",wctx->sortDirection);
				wctx_printf0(wctx,"<input type=\"hidden\" name=\"na\" value=\"%d\" />\n",nextAction);
				printRecEditForm(wctx,&rec);
				wctx_printfn(wctx,"</form>\n",-1,0);
			}
			freeRec(&rec);
		}
		if (wctx->currentAction==PA_BROWSE) {
			bool isACopy;
			char *argpath=wctxGetRequestParam(wctx,args,"path",&isACopy);
			char *path=NULL;
			if (argpath) {
				int l=strlen(argpath);
				int pl=(vars_countn(args,"pl")>0) ? vars_get_value_i(args,"pl") : l;
				if (pl>l) pl=l;
				const char * c;
				for (c=argpath+pl-1;(c>=argpath) && (*c=='/' || *c=='_');c--) pl--;
				if (pl>0) {
					if (argpath[0]=='/') {
						argpath++;
						pl--;
					}
					if (pl>0) {
						if (isACopy) {
							path=argpath;
							path[pl]=0;
						} else {
							crit_goto_if((path=strndup(argpath,pl))==NULL,outOfMemory);
						}
					}
				}
			}
			char *pathrel=path;
			if (pathrel && pathrel[0]=='/') pathrel++;
			if (!wctx->isAjaxRequest){
				wctx_printfn(wctx,"<div class=\"level3-div\">\n",0,1);
				wctx_printfn(wctx,"<div class=\"level3-top\">\n",0,1);
				printRecPathUl(wctx,pathrel);
				wctx_printfn(wctx,"</div>\n",-1,0); //level3-top
			}
			recDirList_t rdirs;
			initRecDirList(&rdirs);
			getRecDirList(pathrel,&rdirs,false);
			if (rdirs.length){
				printRecDirListUL(wctx,pathrel,(pathrel)?strlen(pathrel):0,(rdirs.length>1) ? &rdirs : &rdirs.entry->subdirs,0);
			}
			freeRecDirList(&rdirs);
			free(path);
			if (!wctx->isAjaxRequest) {
				wctx_printfn(wctx,"</div>\n",-1,0); //level3-div
			}
		}
		if (wctx->currentAction==PA_SUMMARY) {
			recList_t recs;
			getRecList(&recs,wctx->sortBy,wctx->sortDirection);
			wctx_printfn(wctx,"<table id=\"%s\" class=\"level3-div\" summary=\"\">\n",0,1,AJAX_REPLACE_PREFIX("recordings"));
			wctx_printf0(wctx,"<col class=\"number\"/>\n");
			wctx_printf0(wctx,"<col class=\"date\"/>\n");
			wctx_printf0(wctx,"<col class=\"hour\"/>\n");
			wctx_printf0(wctx,"<col class=\"content\"/>\n");
			wctx_printfn(wctx,"<thead class=\"level3-top\">\n",0,1);
			wctx_printfn(wctx,"<tr>\n",0,1);
			printList1TH(wctx,"recordings.kl1",SF_RC_NUMBER,"#");
			printList1TH(wctx,"recordings.kl1",SF_START,tr("date"));
			printList1TH(wctx,"recordings.kl1",SF_START,tr("start"));
			printList1TH(wctx,"recordings.kl1",SF_TITLE,tr("title"));
			wctx_printfn(wctx,"</tr>\n",-1,0);
			wctx_printfn(wctx,"</thead>\n",-1,0);
			wctx_printfn(wctx,"<tbody class=\"level3\">\n",0,1);
			const char *RecEdit=tr("rec.edit");
			const char *RecDelete=tr("rec.delete");
			const char *Play=tr("play");
			rec_t *prec;
			int i,l;
			for (i=0,prec=recs.entry;i<recs.length;i++,prec++) {
				struct tm t1=*localtime(&prec->event.start);
				wctx_printfn(wctx,"<tr class=\"rec\">\n",0,1);
				wctx_printf0(wctx,"<td class=\"number\" >%d</td>\n",prec->id);
				wctx_printf0(wctx,"<td class=\"date\">%s</td>\n",formatDate(&t1,0));
				wctx_printf0(wctx,"<td class=\"hour\">%02d:%02d</td>\n",t1.tm_hour,t1.tm_min);
				wctx_printfn(wctx,"<td class=\"content\">\n",0,1);
				wctx_printfn(wctx,"<form action=\"/recordings.kl1\" class=\"recControls\" >\n",0,1);
				wctx_printf0(wctx,"<input type=\"hidden\" name=\"sort\" value=\"%d\" />\n",wctx->sortBy);
				wctx_printf0(wctx,"<input type=\"hidden\" name=\"direction\" value=\"%d\" />\n",wctx->sortDirection);
				wctx_printf0(wctx,"<input type=\"hidden\" name=\"na\" value=\"%d\" />\n",PA_SUMMARY);
				printRecControls(wctx,prec,Play,RecEdit,RecDelete);
				l=strlen(prec->name);
				CTX_HTML_ENCODE(prec->name,l);
				//wctx_printf0(wctx,"<input type=\"text\" name=\"name\" class=\"name readOnly\" readonly=\"readonly\" value=\"%s\" size=\"%d\" />\n"
				//	,wctx->buffer,l);
				wctx_printfn(wctx,"</form>\n",-1,0);
				wctx_printfn(wctx,"%s</td>\n",-1,0,wctx->buffer);
				wctx_printfn(wctx,"</tr>\n",-1,0);
			}
			freeRecList(&recs);
			wctx_printfn(wctx,"</tbody>\n",-1,0);
			wctx_printfn(wctx,"</table>\n",-1,0);
			if (!wctx->isAjaxRequest) wctx->currentAction=PA_PARTITION_USAGE;
		}

		if (wctx->currentAction==PA_PARTITION_USAGE) {
			if (!wctx->isAjaxRequest) {
				wctx_printfn(wctx,"</div>\n",-1,0); //level2
				wctx_printfn(wctx,"</div>\n",-1,0); //level2-div

				wctx_printfn(wctx,"<div class=\"level2-div ui-widget\">\n",0,1);
				wctx_printf0(wctx,"<h2 class=\"level2-top ui-widget-header\">%s</h2>\n",tr("freeSpace"));
				wctx_printfn(wctx,"<div class=\"level2 ui-widget-content\">\n",0,1);
			}
			partitionList_t partitions;
			getPartitionList(&partitions);
			printPartitionList(wctx,&partitions);
			freePartitionList(&partitions);
		}

		if (wctx->currentAction==PA_GET_REC_INFO) {
			rec_t rec;
			if (initRecFromArgs(wctx,&rec,args) && getRecInfo(&rec)) {
				printRecInfo(wctx,&rec);
			}
			freeRec(&rec);
		}

		if (!wctx->isAjaxRequest) {
			wctx_printfn(wctx,"</div>\n",-1,0); //level2
			wctx_printfn(wctx,"</div>\n",-1,0); //level2-div
		}
		finishHtmlPage(wctx);
		goto end;
outOfMemory:
		crit("recordings.kl1:out of memory");
		exit(1);
end:
		closeSvdrpAll();
	}
	freeCtx(wctx);
%>
