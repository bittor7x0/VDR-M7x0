diff -Naur vdr-m7x0-orig/shutdown.c vdr-m7x0/shutdown.c
--- vdr-m7x0-orig/shutdown.c	2007-08-05 14:07:16.000000000 +0200
+++ vdr-m7x0/shutdown.c	2007-08-06 20:52:09.000000000 +0200
@@ -100,11 +100,9 @@
   Exit(1);
 }
 
-void cShutdownHandler::CheckManualStart(int ManualStart)
+void cShutdownHandler::CheckManualStart()
 {
-  time_t Delta = Setup.NextWakeupTime ? Setup.NextWakeupTime - time(NULL) : 0;
-
-  if (!Setup.NextWakeupTime || abs(Delta) > ManualStart) {
+  if (getIaMode()) {
      // Apparently the user started VDR manually
      dsyslog("assuming manual start of VDR");
      // Set inactive after MinUserInactivity
@@ -112,6 +110,7 @@
      }
   else
      // Set inactive from now on
+     cDevice::PrimaryDevice()->SetTvSettings(0);
      SetUserInactive();
 }
 
diff -Naur vdr-m7x0-orig/shutdown.h vdr-m7x0/shutdown.h
--- vdr-m7x0-orig/shutdown.h	2007-08-05 14:07:16.000000000 +0200
+++ vdr-m7x0/shutdown.h	2007-08-06 20:55:01.000000000 +0200
@@ -62,7 +62,7 @@
        ///< Returns true if an emergency exit was requested.
   void RequestEmergencyExit(void);
        ///< Requests an emergency exit of the VDR main loop.
-  void CheckManualStart(int ManualStart);
+  void CheckManualStart();
        ///< Check whether the next timer is in ManualStart time window.
        ///< If yes, assume non-interactive use.
   void SetShutdownCommand(const char *ShutdownCommand);
diff -Naur vdr-m7x0-orig/vdr.c vdr-m7x0/vdr.c
--- vdr-m7x0-orig/vdr.c	2007-08-06 11:20:12.000000000 +0200
+++ vdr-m7x0/vdr.c	2007-08-07 17:56:46.000000000 +0200
@@ -95,7 +95,6 @@
 #define SHUTDOWNFORCEPROMPT 5 // seconds to wait in user prompt to allow forcing shutdown
 #define SHUTDOWNCANCELROMPT 5 // seconds to wait in user prompt to allow canceling shutdown
 #define RESTARTCANCELPROMPT 5 // seconds to wait in user prompt before restarting on SIGHUP
-#define MANUALSTART       600 // seconds the next timer must be in the future to assume manual start
 #define CHANNELSAVEDELTA  600 // seconds before saving channels.conf after automatic modifications
 #define LASTCAMMENUTIMEOUT  3 // seconds to run the main loop 'fast' after a CAM menu has been closed
                               // in order to react on a possible new CAM menu as soon as possible
@@ -670,13 +669,10 @@
            }
         }
      }
-     
-     if(!getIaMode())
-        cDevice::PrimaryDevice()->SetTvSettings(0);
 
-  // Check for timers in automatic start time window:
+  // Check for interactive mode
 
-  ShutdownHandler.CheckManualStart(MANUALSTART);
+  ShutdownHandler.CheckManualStart();
 
   // User interface:
 
@@ -1142,6 +1138,13 @@
                break;
           default: break;
           }
+          }else{
+          if(NORMALKEY(key) == kPower){
+               dsyslog("DEBUG: wakeup from IaMode");
+               setIaMode(1);
+               cDevice::PrimaryDevice()->SetTvSettings(1);
+               }
+          }
         Interact = Menu ? Menu : cControl::Control(); // might have been closed in the mean time
         if (Interact) {
            eOSState state = Interact->ProcessKey(key);
@@ -1205,6 +1208,7 @@
            }
         else {
            // Key functions in "normal" viewing mode:
+           if(getIaMode()){
            if (key != kNone && KeyMacros.Get(key)) {
               cRemote::PutMacro(key);
               key = kNone;
@@ -1251,14 +1255,8 @@
                   break;
              default:    break;
              }
+             }
            }
-	   }else{
-	   if(NORMALKEY(key) == kPower){
-	        dsyslog("DEBUG: wakeup from IaMode");
-		setIaMode(1);
-		cDevice::PrimaryDevice()->SetTvSettings(1);
-		}
-	   }
         if (!Menu) {
            if (!InhibitEpgScan)
               EITScanner.Process();
