
	This patch brings over a few features from MirBSD:
	* -fhonour-copts
	  If this option is not given, it's warned (depending
	  on environment variables). This is to catch errors
	  of misbuilt packages which override CFLAGS themselves.
	* -Werror-maybe-reset
	  Has the effect of -Wno-error if GCC_NO_WERROR is
	  set and not '0', a no-operation otherwise. This is
	  to be able to use -Werror in "make" but prevent
	  GNU autoconf generated configure scripts from
	  freaking out.
	* Make -fno-strict-aliasing and -fno-delete-null-pointer-checks
	  the default for -O2/-Os, because they trigger gcc bugs
	  and can delete code with security implications.

	This patch was authored by Thorsten Glaser <tg at mirbsd.de>
	with copyright assignment to the FSF in effect.

diff -Naur a/gcc/c-family/c.opt b/gcc/c-family/c.opt
--- a/gcc/c-family/c.opt	2013-01-19 06:25:25.000000000 +0100
+++ b/gcc/c-family/c.opt	2013-03-28 13:32:43.000000000 +0100
@@ -379,6 +379,10 @@
 C ObjC RejectNegative Warning Alias(Werror=, implicit-function-declaration)
 This switch is deprecated; use -Werror=implicit-function-declaration instead
 
+Werror-maybe-reset
+C ObjC C++ ObjC++
+; Documented in common.opt
+
 Wfloat-equal
 C ObjC C++ ObjC++ Var(warn_float_equal) Warning
 Warn if testing floating point numbers for equality
@@ -949,6 +953,9 @@
 fhonor-std
 C++ ObjC++ Ignore Warn(switch %qs is no longer supported)
 
+fhonour-copts
+C ObjC C++ ObjC++ RejectNegative
+
 fhosted
 C ObjC
 Assume normal C execution environment
diff -Naur a/gcc/c-family/c-opts.c b/gcc/c-family/c-opts.c
--- a/gcc/c-family/c-opts.c	2013-02-18 20:42:56.000000000 +0100
+++ b/gcc/c-family/c-opts.c	2013-03-28 14:41:46.000000000 +0100
@@ -104,6 +104,9 @@
 /* Whether any standard preincluded header has been preincluded.  */
 static bool done_preinclude;
 
+/* Check if a port honours COPTS.  */
+static int honour_copts = 0;
+
 static void handle_OPT_d (const char *);
 static void set_std_cxx98 (int);
 static void set_std_cxx11 (int);
@@ -383,6 +386,9 @@
       cpp_opts->warn_endif_labels = value;
       break;
 
+    case OPT_Werror_maybe_reset:
+      break;
+
     case OPT_Winvalid_pch:
       cpp_opts->warn_invalid_pch = value;
       break;
@@ -491,6 +497,12 @@
       flag_no_builtin = !value;
       break;
 
+    case OPT_fhonour_copts:
+      if (c_language == clk_c) {
+        honour_copts++;
+      }
+      break;
+
     case OPT_fconstant_string_class_:
       constant_string_class_name = arg;
       break;
@@ -1027,6 +1039,47 @@
       return false;
     }
 
+  if (c_language == clk_c) {
+    char *ev = getenv ("GCC_HONOUR_COPTS");
+    int evv;
+    if (ev == NULL)
+      evv = -1;
+    else if ((*ev == '0') || (*ev == '\0'))
+      evv = 0;
+    else if (*ev == '1')
+      evv = 1;
+    else if (*ev == '2')
+      evv = 2;
+    else if (*ev == 's')
+      evv = -1;
+    else {
+      warning (0, "unknown GCC_HONOUR_COPTS value, assuming 1");
+      evv = 1; /* maybe depend this on something like MIRBSD_NATIVE?  */
+    }
+    if (evv == 1) {
+      if (honour_copts == 0) {
+        error ("someone does not honour COPTS at all in lenient mode");
+        return false;
+      } else if (honour_copts != 1) {
+        warning (0, "someone does not honour COPTS correctly, passed %d times",
+         honour_copts);
+      }
+    } else if (evv == 2) {
+      if (honour_copts == 0) {
+        error ("someone does not honour COPTS at all in strict mode");
+        return false;
+      } else if (honour_copts != 1) {
+        error ("someone does not honour COPTS correctly, passed %d times",
+         honour_copts);
+        return false;
+      }
+    } else if (evv == 0) {
+      if (honour_copts != 1)
+        inform (0, "someone does not honour COPTS correctly, passed %d times",
+         honour_copts);
+    }
+  }
+
   return true;
 }
 
diff -Naur a/gcc/common.opt b/gcc/common.opt
--- a/gcc/common.opt	2013-03-14 10:13:36.000000000 +0100
+++ b/gcc/common.opt	2013-03-28 13:32:43.000000000 +0100
@@ -541,6 +541,10 @@
 Common Joined
 Treat specified warning as error
 
+Werror-maybe-reset
+Common
+If environment variable GCC_NO_WERROR is set, act as -Wno-error
+
 Wextra
 Common Var(extra_warnings) Warning
 Print extra (possibly unwanted) warnings
@@ -1242,6 +1246,9 @@
 Common Report Var(flag_guess_branch_prob) Optimization
 Enable guessing of branch probabilities
 
+fhonour-copts
+Common RejectNegative
+
 ; Nonzero means ignore `#ident' directives.  0 means handle them.
 ; Generate position-independent code for executables if possible
 ; On SVR4 targets, it also controls whether or not to emit a
diff -Naur a/gcc/doc/cppopts.texi b/gcc/doc/cppopts.texi
--- a/gcc/doc/cppopts.texi	2013-01-10 21:38:27.000000000 +0100
+++ b/gcc/doc/cppopts.texi	2013-03-28 13:32:43.000000000 +0100
@@ -163,6 +163,11 @@
 Make all warnings into hard errors.  Source code which triggers warnings
 will be rejected.
 
+ at item -Werror-maybe-reset
+ at opindex Werror-maybe-reset
+Act like @samp{-Wno-error} if the @env{GCC_NO_WERROR} environment
+variable is set to anything other than 0 or empty.
+
 @item -Wsystem-headers
 @opindex Wsystem-headers
 Issue warnings for code in system headers.  These are normally unhelpful
diff -Naur a/gcc/doc/invoke.texi b/gcc/doc/invoke.texi
--- a/gcc/doc/invoke.texi	2013-03-14 10:13:36.000000000 +0100
+++ b/gcc/doc/invoke.texi	2013-03-28 13:32:43.000000000 +0100
@@ -240,7 +240,7 @@
 -Wconversion  -Wcoverage-mismatch  -Wno-cpp  -Wno-deprecated  @gol
 -Wno-deprecated-declarations -Wdisabled-optimization  @gol
 -Wno-div-by-zero -Wdouble-promotion -Wempty-body  -Wenum-compare @gol
--Wno-endif-labels -Werror  -Werror=* @gol
+-Wno-endif-labels -Werror  -Werror=* -Werror-maybe-reset @gol
 -Wfatal-errors  -Wfloat-equal  -Wformat  -Wformat=2 @gol
 -Wno-format-contains-nul -Wno-format-extra-args -Wformat-nonliteral @gol
 -Wformat-security  -Wformat-y2k @gol
@@ -4808,6 +4808,22 @@
 @option{-Wall} and by @option{-Wpedantic}, which can be disabled with
 @option{-Wno-pointer-sign}.
 
+ at item -Werror-maybe-reset
+ at opindex Werror-maybe-reset
+Act like @samp{-Wno-error} if the @env{GCC_NO_WERROR} environment
+variable is set to anything other than 0 or empty.
+
+ at item -fhonour-copts
+ at opindex fhonour-copts
+If @env{GCC_HONOUR_COPTS} is set to 1, abort if this option is not
+given at least once, and warn if it is given more than once.
+If @env{GCC_HONOUR_COPTS} is set to 2, abort if this option is not
+given exactly once.
+If @env{GCC_HONOUR_COPTS} is set to 0 or unset, warn if this option
+is not given exactly once.
+The warning is quelled if @env{GCC_HONOUR_COPTS} is set to @samp{s}.
+This flag and environment variable only affect the C language.
+
 @item -Wstack-protector
 @opindex Wstack-protector
 @opindex Wno-stack-protector
@@ -6919,7 +6935,7 @@
 second branch or a point immediately following it, depending on whether
 the condition is known to be true or false.
 
-Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.
+Enabled at levels @option{-O3}.
 
 @item -fsplit-wide-types
 @opindex fsplit-wide-types
diff -Naur a/gcc/opts.c b/gcc/opts.c
--- a/gcc/opts.c	2013-03-05 07:01:13.000000000 +0100
+++ b/gcc/opts.c	2013-03-28 13:32:43.000000000 +0100
@@ -468,8 +468,6 @@
     { OPT_LEVELS_2_PLUS, OPT_fschedule_insns2, NULL, 1 },
 #endif
     { OPT_LEVELS_2_PLUS, OPT_fregmove, NULL, 1 },
-    { OPT_LEVELS_2_PLUS, OPT_fstrict_aliasing, NULL, 1 },
-    { OPT_LEVELS_2_PLUS, OPT_fstrict_overflow, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_freorder_blocks, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_freorder_functions, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_ftree_vrp, NULL, 1 },
@@ -488,6 +486,8 @@
     { OPT_LEVELS_2_PLUS, OPT_fhoist_adjacent_loads, NULL, 1 },
 
     /* -O3 optimizations.  */
+    { OPT_LEVELS_3_PLUS, OPT_fstrict_aliasing, NULL, 1 },
+    { OPT_LEVELS_3_PLUS, OPT_fstrict_overflow, NULL, 1 },
     { OPT_LEVELS_3_PLUS, OPT_ftree_loop_distribute_patterns, NULL, 1 },
     { OPT_LEVELS_3_PLUS, OPT_fpredictive_commoning, NULL, 1 },
     /* Inlining of functions reducing size is a good idea with -Os
@@ -1423,6 +1423,17 @@
 			       opts, opts_set, loc, dc);
       break;
 
+    case OPT_Werror_maybe_reset:
+      {
+        char *ev = getenv ("GCC_NO_WERROR");
+        if ((ev != NULL) && (*ev != '0'))
+          warnings_are_errors = 0;
+      }
+      break;
+
+    case OPT_fhonour_copts:
+      break;
+
     case OPT_Wlarger_than_:
       opts->x_larger_than_size = value;
       opts->x_warn_larger_than = value != -1;
