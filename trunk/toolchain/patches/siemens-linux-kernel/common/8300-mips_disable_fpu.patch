MIPS: allow disabling the kernel FPU emulator

This patch (adapted for M7x0) allows turning off the in-kernel
Algorithmics FPU emulator support, which allows one to save a
couple of precious blocks on an embedded system.

Signed-off-by: Florian Fainelli <florian@openwrt.org>
--
diff -Naur slin_m740_orig/arch/mips/config-shared.in slin_m740/arch/mips/config-shared.in
--- slin_m740_orig/arch/mips/config-shared.in	2011-06-21 20:10:20.000000000 +0200
+++ slin_m740/arch/mips/config-shared.in	2011-06-21 21:04:20.000000000 +0200
@@ -809,6 +809,7 @@
    define_bool CONFIG_CPU_HAS_LLSC n
    define_bool CONFIG_CPU_HAS_WB n
    define_bool CONFIG_CPU_NO_FPU y
+   define_bool CONFIG_MIPS_FPU_EMULATOR n
    define_bool CONFIG_HAS_VRC4173 n
    define_bool CONFIG_NONCOHERENT_IO y
    define_bool CONFIG_IDE n
diff -Naur slin_m740_orig/arch/mips/math-emu/cp1emu.c slin_m740/arch/mips/math-emu/cp1emu.c
--- slin_m740_orig/arch/mips/math-emu/cp1emu.c	2004-05-29 14:44:24.000000000 +0200
+++ slin_m740/arch/mips/math-emu/cp1emu.c	2011-06-20 18:56:23.263482000 +0200
@@ -55,6 +55,12 @@
 #endif
 #define __mips 4
 
+/* Further private data for which no space exists in mips_fpu_soft_struct */
+
+struct mips_fpu_emulator_private fpuemuprivate;
+
+#ifdef CONFIG_MIPS_FPU_EMULATOR
+
 /* Function which emulates a floating point instruction. */
 
 static int fpu_emu(struct pt_regs *, struct mips_fpu_soft_struct *,
@@ -65,10 +71,6 @@
 	struct mips_fpu_soft_struct *, mips_instruction);
 #endif
 
-/* Further private data for which no space exists in mips_fpu_soft_struct */
-
-struct mips_fpu_emulator_private fpuemuprivate;
-
 /* Control registers */
 
 #define FPCREG_RID	0	/* $0  = revision id */
@@ -1333,3 +1335,10 @@
 
 	return sig;
 }
+#else
+int fpu_emulator_cop1Handler(int xcptno, struct pt_regs *xcp,
+	struct mips_fpu_soft_struct *ctx)
+{
+	return 0;
+}
+#endif /* CONFIG_MIPS_FPU_EMULATOR */
diff -Naur slin_m740_orig/arch/mips/math-emu/dsemul.c slin_m740/arch/mips/math-emu/dsemul.c
--- slin_m740_orig/arch/mips/math-emu/dsemul.c	2004-05-29 14:44:24.000000000 +0200
+++ slin_m740/arch/mips/math-emu/dsemul.c	2011-06-20 18:56:33.101482000 +0200
@@ -115,6 +115,7 @@
 	return SIGILL;		/* force out of emulation loop */
 }
 
+#ifdef CONFIG_MIPS_FPU_EMULATOR
 int do_dsemulret(struct pt_regs *xcp)
 {
 	struct emuframe *fr;
@@ -171,3 +172,9 @@
 
 	return 1;
 }
+#else
+int do_dsemulret(struct pt_regs *xcp)
+{
+	return 0;
+}
+#endif /* CONFIG_MIPS_FPU_EMULATOR */
diff -Naur slin_m740_orig/arch/mips/math-emu/kernel_linkage.c slin_m740/arch/mips/math-emu/kernel_linkage.c
--- slin_m740_orig/arch/mips/math-emu/kernel_linkage.c	2004-05-29 14:44:24.000000000 +0200
+++ slin_m740/arch/mips/math-emu/kernel_linkage.c	2011-06-20 18:59:49.027655000 +0200
@@ -35,6 +35,7 @@
 
 #define SIGNALLING_NAN 0x7ff800007ff80000LL
 
+#ifdef CONFIG_MIPS_FPU_EMULATOR
 void fpu_emulator_init_fpu(void)
 {
 	static int first = 1;
@@ -89,4 +90,21 @@
 
 	return err;
 }
+#else
+void fpu_emulator_init_fpu(void)
+{
+	printk(KERN_INFO "FPU emulator disabled, make sure your toolchain"
+		"was compiled with software floating point support (soft-float)\n");
+	return;
+}
+
+int fpu_emulator_save_context(struct sigcontext *sc)
+{
+	return 0;
+}
 
+int fpu_emulator_restore_context(struct sigcontext *sc)
+{
+	return 0;
+}
+#endif /* CONFIG_MIPS_FPU_EMULATOR */
diff -Naur slin_m740_orig/arch/mips/math-emu/Makefile slin_m740/arch/mips/math-emu/Makefile
--- slin_m740_orig/arch/mips/math-emu/Makefile	2004-05-29 14:44:24.000000000 +0200
+++ slin_m740/arch/mips/math-emu/Makefile	2011-06-20 18:47:16.536482000 +0200
@@ -10,12 +10,14 @@
 
 O_TARGET:= fpu_emulator.o
 
-obj-y	:= cp1emu.o ieee754m.o ieee754d.o ieee754dp.o ieee754sp.o ieee754.o \
+obj-y	:= kernel_linkage.o dsemul.o cp1emu.o
+
+obj-$(CONFIG_MIPS_FPU_EMULATOR)	+= ieee754m.o ieee754d.o ieee754dp.o ieee754sp.o ieee754.o \
 	   ieee754xcpt.o dp_frexp.o dp_modf.o dp_div.o dp_mul.o dp_sub.o \
 	   dp_add.o dp_fsp.o dp_cmp.o dp_logb.o dp_scalb.o dp_simple.o \
 	   dp_tint.o dp_fint.o dp_tlong.o dp_flong.o sp_frexp.o sp_modf.o \
 	   sp_div.o sp_mul.o sp_sub.o sp_add.o sp_fdp.o sp_cmp.o sp_logb.o \
 	   sp_scalb.o sp_simple.o sp_tint.o sp_fint.o sp_tlong.o sp_flong.o \
-	   dp_sqrt.o sp_sqrt.o kernel_linkage.o dsemul.o
+	   dp_sqrt.o sp_sqrt.o
 
 include $(TOPDIR)/Rules.make
