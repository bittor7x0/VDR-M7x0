<%!
/*
* 
* This source-code is licensed under GPL v2.
* See ../../LICENSE for details
* 
* (c) Christian Kelinski <k@kille.cx>
* Please checkout the README file!
* 
* Originally written for the open7x0.org VDR-FW project:
* www.open7x0.org
* 
* Modified for http://vdr-m7x0.foroactivo.com.es by:
* atinar <atinar1@hotmail.com>
* 
* You will need the KLONE web application development framework
* from www.koanlogic.com Version 2.
* 
*/

#include <klapp_conf.h>
#include <klone/utils.h>
#include <time.h>

#include "conf.h"
#include "misc.h"
#include "i18n.h"
#include "recordings.h"
#include "svdrp_comm.h"

#ifdef DEBUG
dbg_recordings_kl1(void) { dbg("recordings.kl1"); }
#endif

%><%

	#ifdef DEBUG
	dbg_recordings_kl1();
	#endif

	config(session, request);
	vars_t *args = request_get_args(request);
	enum {AUXSZ=4096};
	char aux[AUXSZ];
	sortBy=(vars_countn(args, "sort")>0) ? vars_get_value_i(args,"sort") : SF_START;
	sortDirection=(vars_countn(args, "direction")>0) ? vars_get_value_i(args,"direction") : SD_ASC;
	currentPage=PN_RECORDINGS;
	currentAction = (vars_countn(args,"a")>0) ? vars_get_value_i(args,"a") : PA_SUMMARY;
	
	if (currentAction==PA_PLAY) {
		rec_t rec;
		initRecFromArgs(&rec,args);
		boolean_t ok=printRecPlaylist(request,response,out,&rec,aux);
		freeRec(&rec);
		if (ok) goto end;
	}
	
	int ntabs=initHtmlPage(response,out,tr("recordings"),
"	<script type=\"text/javascript\">\n"
"		$(function(){\n"
"			$('button.delete').click(function (event){\n"
"				if (!confirm('%s')){\n"
"					event.preventDefault();\n"
"				}\n"
"			});\n"
"		});\n"
"	</script>\n"
		,tr("recDeleteConfirm")
	);
	printMenu(out,ntabs);
	io_printf(out,"%.*s<div id=\"main\" class=\"content\">\n",ntabs++,tabs);
	io_printf(out,"%.*s<h2>%s</h2>\n",ntabs,tabs,tr("recordings"));
	
	if (currentAction==PA_DELETE) {
		if (webifConf.recDeletionDisabled) {
			io_printf(out,"%.*s<div class=\"alert\">%s</div>\n",ntabs,tabs,tr("recDeletionDisabled"));
		} else {
			rec_t rec;
			initRecFromArgs(&rec,args);
			char *message=NULL;
			if (deleRec(&rec,&message))
				printMessage(out,ntabs,"message",tr("recDeleteOk"),message,aux);
			else
				printMessage(out,ntabs,"message",tr("recDeleteErr"),message,aux);
			if (message) free(message);
			freeRec(&rec);
		}
	}
	if (currentAction==PA_EDIT) {
		rec_t rec;
		initRecFromArgs(&rec,args);
		getRecInfo(&rec);
		io_printf(out,"%.*s<form action=\"/recordings.kl1\" method=\"post\">\n",ntabs++,tabs);
		io_printf(out,"%.*s<input type=\"hidden\" name=\"sort\" value=\"%d\"/>\n",ntabs,tabs,sortBy);
		io_printf(out,"%.*s<input type=\"hidden\" name=\"direction\" value=\"%d\"/>\n",ntabs,tabs,sortDirection);
		printRecEditForm(out,ntabs,&rec,aux);
		io_printf(out,"%.*s</form>\n",--ntabs,tabs);
		freeRec(&rec);
		goto end;
	}
	if (currentAction==PA_CONFIRM) {
		rec_t rec;
		initRecFromArgs(&rec,args);
		const char *oldName=vars_get_value(args,"oldName");
		if (oldName!=NULL && !sameString(oldName,rec.name)){
			char *message=NULL;
			if (editRec(&rec,&message))
				printMessage(out,ntabs,"message",tr("recEditOk"),message,aux);
			else 
				printMessage(out,ntabs,"message",tr("recEditErr"),message,aux);
			free(message);
		}
		freeRec(&rec);
	}
	if (BT_TRUE){
		io_printf(out,
"			<table id=\"recordings\" class=\"list1\" summary=\"\">\n"
"				<col class=\"number\"/>\n"
"				<col class=\"date\"/>\n"
"				<col class=\"hour\"/>\n"
"				<col class=\"content\"/>\n"
"				<thead>\n"
"					<tr>\n"
"						<th><a class=\"%s\" href=\"recordings.kl1?sort=%d&amp;direction=%d\">%s</a></th>\n"
"						<th><a class=\"%s\" href=\"recordings.kl1?sort=%d&amp;direction=%d\">%s</a></th>\n"
"						<th><a class=\"%s\" href=\"recordings.kl1?sort=%d&amp;direction=%d\">%s</a></th>\n"
"						<th><a class=\"%s\" href=\"recordings.kl1?sort=%d&amp;direction=%d\">%s</a></th>\n"
"					</tr>\n"
"				</thead>\n"
"				<tbody>\n"
			,sortClass(SF_RC_NUMBER),SF_RC_NUMBER,newSortDirection(SF_RC_NUMBER),"#"
			,sortClass(SF_START),SF_START,newSortDirection(SF_START),tr("date")
			,sortClass(SF_START),SF_START,newSortDirection(SF_START),tr("start")
			,sortClass(SF_TITLE),SF_TITLE,newSortDirection(SF_TITLE),tr("title")
		);
		recList_t recs;
		getRecList(&recs,sortBy,sortDirection);
		const char *RecEdit=tr("recEdit");
		const char *RecDelete=tr("recDelete");
		const char *Play=tr("play");
		rec_t *prec;
		int i,l;
		for (i=0,prec=recs.entry;i<recs.length;i++,prec++) {
			struct tm t1=*localtime(&prec->event.start);
			io_printf(out,
"					<tr class=\"rec\">\n"
"						<td class=\"number\" >%d</td>\n"
"						<td class=\"date\">%s</td>\n"
"						<td class=\"hour\">%02d:%02d</td>\n"
				,prec->id
				,formatDate(&t1,0)
				,t1.tm_hour,t1.tm_min
			);
			io_printf(out,
"						<td class=\"content\">\n"
"							<form action=\"/recordings.kl1\" method=\"get\">\n"
"								<input type=\"hidden\" name=\"sort\" value=\"%d\" />\n"
"								<input type=\"hidden\" name=\"direction\" value=\"%d\" />\n"
								,sortBy
								,sortDirection
			);
			printRecControls(out,8,prec,aux,Play,RecEdit,RecDelete);
			l=strlen(prec->name);
			u_htmlncpy(aux,prec->name,l,HTMLCPY_ENCODE);
			io_printf(out,
"								<input type=\"text\" name=\"name\" class=\"name readOnly\" readonly=\"readonly\" value=\"%s\" "
									"size=\"%d\"/>\n"
"							</form>\n"
"						</td>\n"
"					</tr>\n"
								,aux,l
			);
		}
		freeRecList(&recs);
		io_printf(out,
"				</tbody>\n"
"			</table>\n"
		);
	}
	io_printf(out,"%.*s</div>\n",--ntabs,tabs);
	finishHtmlPage(out,ntabs);
	goto end;
outOfMemory:
	crit("recordings.kl1:out of memory");
	exit(1);
end:
	closeSvdrpAll();
%>
