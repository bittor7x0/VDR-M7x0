<%!
/*
* 
* This source-code is licensed under GPL v2.
* See ../../LICENSE for details
* 
* (c) Christian Kelinski <k@kille.cx>
* Please checkout the README file!
* 
* Originally written for the open7x0.org VDR-FW project:
* www.open7x0.org
* 
* Modified for http://vdr-m7x0.foroactivo.com.es by:
* atinar <atinar1@hotmail.com>
* 
* You will need the KLONE web application development framework
* from www.koanlogic.com Version 2.
* 
*/

#include <klapp_conf.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>
#include <u/libu.h>

#include "i18n.h"
#include "misc.h"
#include "channels.h"
#include "epg.h"
#include "timers.h"
#include "svdrp_comm.h"
#include "svdrp_parse.h"

#ifdef DEBUG
dbg_program_kl1(void) { dbg("program.kl1"); }
#endif

%><%
#ifdef DEBUG
dbg_program_kl1();
#endif

const char isTimerStr[3][3]={""," t"," T"};
int isTimerInt=0;

int i=0;
int channelNum=0;

vars_t *args = request_get_args(request);
channelNum=vars_get_value_i(args,"chan");

currentPage=PN_PROGRAMS;
%>

<%@ include ../../components/pre-content.kl1 %>

<div class="content">
<%
channelList channels;
getChannelList(&channels);

int max_timers;
timerEntry * timers;
timers=getTimerList(&channels,&max_timers,0,0);

if (channelNum<1) {
	nowNextList nnl;
	getNowNextList(&nnl,&channels);

	io_printf(out,"<h2>%s</h2>\n",tr("Now on TV"));
	io_printf(out,"<table class=\"list1\">\n");
	
	io_printf(out,"<tr><th>%s</th><th colspan=\"2\">%s</th><th colspan=\"2\">%s</th></tr>\n",tr("channel"),tr("Now"),tr("Next"));
	nowNextEntry *nne;
	channelEntry *ce;
	eventEntry *ee;
	char newt[256]="";
	struct tm *timeptr;
	int n;
	if (nnl.length>0) {
		for (i=0;i<nnl.length;i++) {
			nne=&nnl.entry[i];
			ce=&channels.entry[i];
			io_printf(out,"<tr>\n\t<td><a class=\"strong\" href=\"program.kl1?chan=%d\">%s</a></td>\n",ce->channelNum,ce->channelName);
			for (n=0;n<2;n++){
				ee=&nne->event[n];
				if (ee->time>0) {
					long int end_time = ee->time+ee->duration;
					make_timer(newt,1,ce->channelNum,ee->time,end_time,50,99,ee->title);
					isTimerInt=checkForTimer(timers,max_timers,ce->channelNum,ee->time,0,ee->duration);
					timeptr = localtime(&ee->time);
					io_printf(out,"\n\t<td><nobr><b>%02d:%02d%s</b></nobr></td>",timeptr->tm_hour,timeptr->tm_min,isTimerStr[isTimerInt]);
					io_printf(out,"\n\t<td><div class=\"box_right\">");
					const char * record=tr("record");
					io_printf(out,"<a href=\"timers.kl1?a=add&timer=%s\" title=\"%s\"><img src=\"/img/rec16.png\" alt=\"%s\" /></a>",newt,record,record);
					io_printf(out,"</div>");
					char * eT=io_printf_infobox(out,ee);
					io_printf(out,"%s</td>\n",eT);
					free(eT);
				} else {
					free(encode_printf(out,"<td>&nbsp;</td><td>%s</td>",ee->title));
				}
			}
			io_printf(out,"\n</tr>\n");
		}
	} else {
		io_printf(out,"<p>%s</p>",i18n[14][langID]);		
	}
	freeNNL(&nnl);
	
} else {

// TODO generalizar nowNextList a eventList con numero de eventos por canal uno de {1=now,2={now,next},0=todos}
// TODO chanelNum coincide siempre con idx+1?
// NEU ************************************************************************	
	char cmd[20]="";
	char ret_code[10]="";
	char * data;
	char * p;
	char * D=NULL;
	char * S=NULL;
	char * T=NULL;
	//TODO_KILLE space for trailinng 0 in datum_str and now.
	long int now_time=0;
	long int next_time=0;
	int duration=0;
	char newt[256]="";
	int previous_yday=-1;

	sprintf(cmd,"LSTE %d\r",channelNum);
	write_svdrp(cmd);
	data=read_svdrp();
	io_printf(out,"<h2>%s %s &raquo;%s&laquo;</h2>\n<table class=\"list1\">\n<tr><th>%s</th><th>%s</th><th>&nbsp;</th></tr>\n",tr("Schedule"),tr("for"),channels.entry[channelNum-1].channelName,tr("Time"),tr("program")); 
	for(p=strtok(data,"\r\n");p!=0;p=strtok(0,"\r\n")) {
		parse_ret_code(p,ret_code);
		if (!strcmp(ret_code,"550")) {
			io_printf(out,"<p>%s</p>",i18n[14][langID]);
			return;
		} else if (!strcmp(ret_code,"215-D")) {
			D=strdup(p+6); //TODO Necesario duplicar?
		} else if (!strcmp(ret_code,"215-S")) {
			S=strdup(p+6);
		} else if (!strcmp(ret_code,"215-T")) {
			T=strdup(p+6);
		} else if (!strcmp(ret_code,"215-E")) {
			parse_215E(p+6,NULL,&now_time,&duration,NULL,NULL);
			next_time=now_time+duration;
		} else if (!strcmp(ret_code,"215-e")) {
			if (now_time>0) {
				struct tm timeptr=*localtime(&now_time);
				isTimerInt=checkForTimer(timers,max_timers,channelNum,now_time,next_time,0);
				make_timer(newt,1,channelNum,now_time,next_time,50,99,T);
				if (previous_yday!=timeptr.tm_yday) {
					previous_yday=timeptr.tm_yday;
					io_printf(out,"<tr class=\"anotherday\"><td colspan=\"3\">%s %s</td></tr>\n",weekdays[langID][timeptr.tm_wday],formatDate(&timeptr,0));
				}
				io_printf(out,"<tr><td><b>%02d:%02d%s</b></td><td>%s</td><td style=\"width:70px;\">\n",timeptr.tm_hour,timeptr.tm_min,isTimerStr[isTimerInt],T);
				const char * createTimer=tr("Create timer");
				io_printf(out,"<div class=\"box_right\"><a href=\"timers.kl1?a=edit&timer=%s\" title=\"%s\"><img src=\"/img/timer16.png\" alt=\"%s\" /></a></div>\n",newt,createTimer,createTimer);
				io_printf(out,"<div class=\"box_right\"><a href=\"timers.kl1?a=add&timer=%s\" title=\"%s\"><img src=\"/img/rec16.png\" alt=\"%s\" /></a></div>\n",newt,tr("record"),tr("record"));
				io_printf(out,"<div class=\"box_right\">");
				io_printf(out,"<div class=\"infobox\">&nbsp;<img src=\"/img/info16.png\" alt=\"%s\" /><div class=\"shadow\"><div class=\"info\">\n",tr("more infos"));
				io_printf(out,"  <b>%s</b><br />",T);
				free(encode_printf(out,"  %s<br />\n",S));
				io_printf(out,"  %s <b>%02d:%02d</b>",tr("from"),timeptr.tm_hour,timeptr.tm_min);
				timeptr=*localtime(&next_time);
				io_printf(out," %s <b>%02d:%02d</b> (%s: %s %d %s)  <p>",tr("to"),timeptr.tm_hour,timeptr.tm_min,tr("runtime"),tr("approx."),duration/60,tr("minutes"));
				free(encode_printf(out,"%s",D));
				io_printf(out,"</p></div></div></div>");
				io_printf(out,"</div></td></tr>\n");
			} else if (!strcmp(ret_code,"250")) {
				io_printf(out,"<tr><td>&nbsp;</td><td>%s</td><td>&nbsp;</td></tr>\n",T);
			} else {
				dbg("Unknown answer from svdrpd.");
			}
			free(D); free(S); free(T);
			D=NULL;  S=NULL;  T=NULL;
		}
	} 
	free(data);

// NEU ************************************************************************	
	
}

freeCL(&channels);
close_svdrp();
%>

</table>

</div>

<%@ include ../../components/post-content.kl1 %>

