<%!
/*
* 
* This source-code is licensed under GPL v2.
* See ../../LICENSE for details
* 
* (c) Christian Kelinski <k@kille.cx>
* Please checkout the README file!
* 
* Originally written for the open7x0.org VDR-FW project:
* www.open7x0.org
* 
* Modified for http://vdr-m7x0.foroactivo.com.es by:
* atinar <atinar1@hotmail.com>
* 
* You will need the KLONE web application development framework
* from www.koanlogic.com Version 2.
* 
*/

#include <klapp_conf.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>
#include <u/libu.h>

#include "i18n.h"
#include "misc.h"
#include "channels.h"
#include "epg.h"
#include "timers.h"
#include "svdrp_comm.h"
#include "svdrp_parse.h"

channelList_t channels;
timerList_t timers;

boolean_t intersects(timerEntry_t *timer, time_t pstart, time_t pend, int *mstart, int *mend){
	boolean_t result=BT_FALSE;
	*mstart=timer->start-pstart; //margen no cubierto al inicio
	*mend  =pend-timer->stop;    //margen no cubierto al final
	result=boolean( ((*mstart<=0) && (*mend<=0)) || ((*mstart<0) && (timer->stop>pstart)) || ((timer->start<pend) && (*mend<0)) );
	if (timer->type==TT_REGULAR && timer->stop<pstart){
		//Set regular timer to next date and reorder timers
		struct tm sdate=*localtime(&timer->start);
		int wday=(sdate.tm_wday+6)%7;
		for(;;){
			//TODO daylight savings?
			wday=(wday+1)%7;
			timer->start+=24*60*60;
			timer->stop+=24*60*60;
			if (timer->reg_timer[wday]!='-') {
				sortTimerList(&timers,SF_START,SD_ASC);
				break;
			}
		}
	}
	return result;
}

void printTimers(int channelNum, time_t startTime, int duration,char urlEnc[]) {
	int mstart=0;
	int mend=0;

	time_t endTime=startTime+duration;
	boolean_t isStart, isEnd, anyMatch;
	anyMatch=BT_FALSE;
	if ( (timers.length>0) && (channelNum>0) && (startTime>0) && (duration>0) ) {
		int i;
		const char *TimerEdit=tr("timerEdit");
		for (i=0;i<timers.length;i++) {
			if (timers.entry[i].channelNum==channelNum && intersects(&timers.entry[i],startTime,endTime,&mstart,&mend)) {
				isStart=boolean(mstart>=0);
				isEnd=boolean(mend>=0);
				if(!anyMatch){
					anyMatch=BT_TRUE;
					io_printf(out,"\n");
				}
				mstart=(mstart<=0) ? 0 : 100 * mstart / duration;
				mend=  (mend<=0)   ? 0 : 100 * mend / duration;
				io_printf(out,
"							<div id=\"timer%d_%d\" class=\"timer\" title=\"%s\">\n"
"								<div class=\"progressbar\">\n"
"									<div class=\"pb%s%s%s\" style=\"left:%d%%;right:%d%%;\">"
									"&nbsp;"
								"</div>\n"
"								</div>\n"
				,timers.entry[i].ID,++timers.entry[i].count,timers.entry[i].title
				,(isStart) ? " pbstart":"",(isEnd) ? " pbend":""
				,(timers.entry[i].active) ? " pbenabled":" pbdisabled"
				,mstart,mend
				);
				u_urlncpy(urlEnc,timers.entry[i].timerStr,strlen(timers.entry[i].timerStr),URLCPY_ENCODE);
				io_printf(out,
"								<a class=\"wi-icon wi-icon-edit\" href=\"timers.kl1?a=%d&amp;timer=%s&amp;timerId=%d\" title=\"%s\">%s</a>\n"
"							</div>\n"
				,PA_EDIT,urlEnc,timers.entry[i].ID,TimerEdit,TimerEdit
				);
			}
		}
	}
	io_printf(out,(anyMatch)?
"\n						":
"&nbsp;"
	);
}

#ifdef DEBUG
dbg_program_kl1(void) { dbg("program.kl1"); }
#endif

%><%
	#ifdef DEBUG
	dbg_program_kl1();
	#endif

	int i=0;
	int channelNum=0;
	char urlEnc[2048];


	vars_t *args = request_get_args(request);
	channelNum=vars_get_value_i(args,"chan");

	config(session, request);
	currentPage=PN_PROGRAMS;
	initHtmlPage(response,out,tr("schedule"),NULL);
	printMenu(out);

	io_printf(out,
"		<div id=\"main\" class=\"content\">\n"
	);
	getChannelList(&channels,SF_NONE,SD_NONE);
	getTimerList(&timers,&channels,SF_START,SD_ASC);

	boolean_t addTimer;
	boolean_t isTv;
	const char * Schedule=tr("schedule");
	const char * TimerCreate=tr("timerCreate");
	if (channelNum<1) {
		nowNextList_t nnl;
		getNowNextList(&nnl,&channels);

		io_printf(out,
"			<h2>%s</h2>\n"
			,tr("nowOnTv")
		);
		if (nnl.length==0) {
			io_printf(out,
"				<div class=\"alert\">%s</div>\n",tr("warnNoEPG")
			);
		} else {
			nowNextEntry_t *nne;
			channelEntry_t *ce;
			eventEntry_t *ee;
			struct tm *timeptr;
			int pcbegin;
			int pcend;
			const char *LiveStream=tr("liveStream");
			io_printf(out,
"			<table id=\"programs\" class=\"list1\" summary=\"%s\">\n"
"				<col class=\"channel\"/>\n"
"				<col class=\"space\"/>\n"
"				<colgroup id=\"colNow\" class=\"nowNext\">\n"
"					<col class=\"hour\"/>\n"
"					<col class=\"timers\"/>\n"
"					<col class=\"pgName\"/>\n"
"				</colgroup>\n"
"				<col class=\"space\"/>\n"
"				<colgroup id=\"colNext\" class=\"nowNext\">\n"
"					<col class=\"hour\"/>\n"
"					<col class=\"timers\"/>\n"
"					<col class=\"pgName\"/>\n"
"				</colgroup>\n"
"				<thead>\n"
"					<tr>"
						"<th>%s</th>"
						"<td class=\"space\"></td>"
						"<th colspan=\"3\">%s</th>"
						"<td class=\"space\"></td>"
						"<th colspan=\"3\">%s</th>"
					"</tr>\n"
"				</thead>\n"
"				<tbody>\n"
					,Schedule
					,tr("channel")
					,tr("now")
					,tr("next")
			);
			for (i=0;i<nnl.length;i++) {
				nne=&nnl.entry[i];
				ce=&channels.entry[i];
				isTv=boolean(ce->vpid>1);
				io_printf(out,
"					<tr>\n"
"						<td class=\"channel\">\n"
"							<div class=\"boxRight\">"
								"<a class=\"wi-icon %s\" href=\"watchit.kl1?channelnum=%d\" title=\"%s\">%s</a>"
							"</div>\n"
"							<a class=\"channel\" href=\"program.kl1?chan=%d\" title=\"%s\">%s</a>\n"
"						</td>\n"
					,(isTv)?"wi-icon-tv":"wi-icon-radio",ce->channelNum,LiveStream,LiveStream
					,ce->channelNum,Schedule,ce->channelName
				);
				int n;
				for (n=0;n<2;n++){
					ee=&nne->event[n];
					if (ee->time>0) {
						long int end_time = ee->time+ee->duration;
						char *timerStr=NULL;
						addTimer=makeTimerStr(&timerStr,1,ce->channelNum,ee->time,end_time,50,99,ee->title);
						timeptr = localtime(&ee->time);
						io_printf(out,
"						<td class=\"space\"></td>\n"
"						<td class=\"hour\">%02d:%02d</td>\n"
"						<td class=\"timers\">"
						,timeptr->tm_hour,timeptr->tm_min
						);
						printTimers(ce->channelNum,ee->time,ee->duration,urlEnc);
						u_urlncpy(urlEnc,timerStr,strlen(timerStr),URLCPY_ENCODE);
						io_printf(out,
						"</td>\n"
"						<td class=\"title\">\n"
"							<div class=\"boxRight\">\n"
"								<a class=\"wi-icon wi-icon-rec\" href=\"timers.kl1?a=%d&amp;timer=%s\" title=\"%s\">%s</a>\n"
"							</div>\n"
"							<div class=\"boxRight infoLeft\">\n"
							,PA_EDIT,urlEnc,TimerCreate,TimerCreate
						);
						printInfobox(out,8,ee);
						io_printf(out,
"							</div>\n"
"							<div class=\"title\">%s</div>\n"
"						</td>\n",(ee->title)?ee->title:"&nbsp;"
						);
						free(timerStr);
					} else {
						io_printf(out,
"						<td class=\"space\"></td>\n"
"						<td>&nbsp;</td>\n"
"						<td class=\"timers\">&nbsp;</td>\n"
"						<td class=\"title\">%s</td>\n",(ee->title)?ee->title:"&nbsp;"
						);
					}
				}
				io_printf(out,
"					</tr>\n"
				);
			}
			io_printf(out,
"				</tbody>\n"   
"			</table>\n"
			);
		}
		freeNNL(&nnl);
		
	} else {

		// TODO generalizar nowNextList_t a eventList con numero de eventos por canal uno de {1=now,2={now,next},0=todos}
		// TODO chanelNum coincide siempre con idx+1?
		char *cmd;
		char * data;
		char * p;
		eventEntry_t ee;
		time_t next_time=0;
		int previous_yday=-1;
		int pcbegin;
		int pcend;

		initEE(&ee);
		asprintf(&cmd,"LSTE %d\r",channelNum);
		write_svdrp(cmd);
		free(cmd);
		data=read_svdrp();

		int retCode;
		int cont=0;
		for(p=strtok(data,"\r\n");p!=0;p=strtok(0,"\r\n")) {
			retCode=strtol(p,&p,10);
			if (retCode==215){
				p++;
				if (p[0]=='D') {
					ee.desc=strdup(p+2);
				} else if (p[0]=='S') {
					ee.shortdesc=strdup(p+2);
				} else if (p[0]=='T') {
					ee.title=strdup(p+2);
				} else if (p[0]=='E') {
					parse_215E(p+2,NULL,&ee.time,&ee.duration,NULL,NULL);
					next_time=ee.time+ee.duration;
				} else if (p[0]=='e') {
					if (ee.time>0) {
						if (cont==0){
							io_printf(out,
"			<h2>%s %s &raquo;%s&laquo;</h2>\n"
"			<table id=\"programs\" class=\"list1\" summary=\"%s\">\n"
"				<col class=\"hour\"/>\n"
"				<col class=\"timers\"/>\n"
"				<col class=\"pgName\"/>\n"
"				<thead>\n"
"					<tr>"
						"<th>%s</th>"
						"<th class=\"timers\">%s</th>"
						"<th>%s</th>"
					"</tr>\n"
"				</thead>\n"
"				<tbody>\n"
								,tr("schedule"),tr("for"),channels.entry[channelNum-1].channelName
								,Schedule
								,tr("time")
								,tr("timers.")
								,tr("program")
							); 
						}
						cont++;
						struct tm timeptr=*localtime(&ee.time);
						char *timerStr=NULL;
						addTimer=makeTimerStr(&timerStr,1,channelNum,ee.time,next_time,50,99,ee.title);
						if (previous_yday!=timeptr.tm_yday) {
							previous_yday=timeptr.tm_yday;
							io_printf(out,
"					<tr class=\"anotherDay\">"
						"<td colspan=\"3\">%s %s</td>"
					"</tr>\n"	,weekdays[langID][timeptr.tm_wday],formatDate(&timeptr,0)
							);
						}
						io_printf(out,
"					<tr>\n"
"						<td class=\"hour\">%02d:%02d</td>\n"
"						<td class=\"timers\">"
							,timeptr.tm_hour,timeptr.tm_min
						);
						printTimers(channelNum,ee.time,ee.duration,urlEnc);
						io_printf(out,
						"</td>\n"
						);
						
						u_urlncpy(urlEnc,timerStr,strlen(timerStr),URLCPY_ENCODE);
						io_printf(out,
"						<td>\n"
"							<div class=\"boxRight\">\n"
"								<a class=\"wi-icon wi-icon-rec\" href=\"timers.kl1?a=%d&amp;timer=%s\" title=\"%s\">%s</a>\n"
"							</div>\n"
"							<div class=\"boxRight infoLeft\">\n"
							,PA_EDIT,urlEnc,TimerCreate,TimerCreate
						);
						printInfobox(out,7,&ee);
						io_printf(out,
"							</div>\n"
"							<div class=\"title\">%s</div>\n"
"						</td>\n"
"					</tr>\n",(ee.title)?ee.title:""
						);
						free(timerStr);
					} 
					freeEE(&ee);
				}
			}
		}
		freeEE(&ee);
		free(data);
		if (cont>0){
			io_printf(out,
"				</tbody>\n"   
"			</table>\n"
			);
		} else {
			io_printf(out,
"			<div class=\"alert\">%s</div>",tr("warnNoEPG")
			);
		}
	}
	freeTL(&timers);
	freeCL(&channels);
	close_svdrp();
	io_printf(out,
"		</div>\n"
	);
	finishHtmlPage(out);
%>

