<%!
/*
* 
* This source-code is licensed under GPL v2.
* See ../../LICENSE for details
* 
* (c) Christian Kelinski <k@kille.cx>
* Please checkout the README file!
* 
* Originally written for the open7x0.org VDR-FW project:
* www.open7x0.org
* 
* Modified for http://vdr-m7x0.foroactivo.com.es by:
* atinar <atinar1@hotmail.com>
* 
* You will need the KLONE web application development framework
* from www.koanlogic.com Version 2.
* 
*/

#include <klapp_conf.h>
#include <time.h>
#include <locale.h>
#include <u/libu.h>

#include "i18n.h"
#include "misc.h"
#include "timers.h"
#include "channels.h"
#include "svdrp_comm.h"
#include "svdrp_parse.h"

#ifdef DEBUG
void dbg_timers_kl1(void) { dbg("timers.kl1"); }
#endif
%><%
#ifdef DEBUG
dbg_timers_kl1();
#endif

const char * SUMMARY = "summary";
const char * EDIT = "edit";
const char * NEW = "new";
const char * ADD = "add";
const char * DELE = "dele";
const char * NOACTION = "";

int i=0;

sortBy=SF_START;
sortDirection=SD_ASC;
int timerID=-1;
const char * argAction=NULL;
const char * argAltAction=NULL;
const char * altAction=NOACTION;
const char * oldTimer=NULL;

vars_t *args = request_get_args(request);
if (vars_countn(args,"a")>0) { argAction=vars_get_value(args,"a"); }
action = (argAction!=NULL) ? argAction : SUMMARY;
if (vars_countn(args,"alt")>0) { argAltAction=vars_get_value(args,"alt"); }
altAction = (argAltAction!=NULL) ? argAltAction : NOACTION;
if (vars_countn(args,"timer")>0) { newt=(char *)vars_get_value(args,"timer");}
if (vars_countn(args,"oldTimer")>0) { oldTimer=vars_get_value(args,"oldTimer");}
if (vars_countn(args,"sort")>0) { sortBy=vars_get_value_i(args,"sort"); }
if (vars_countn(args,"direction")>0) { sortDirection=vars_get_value_i(args,"direction"); }
if (vars_countn(args,"timerID")>0) { timerID=vars_get_value_i(args,"timerID"); }

currentPage=PN_CHANNELS;
 %>

<%@ include ../../components/pre-content.kl1 %>

<div class="content">

<h2><% io_printf(out,i18n[7][langID]); %></h2>

<%
channelList channels;
initCL(&channels);

if (!strcmp(altAction,DELE)) {
	if ( (timerID>0) && (timerID<1000) && (newt) ) {
		dbg("Try to del timer with ID %d (%s)",timerID,newt+5);
		if (deleTimer(timerID,newt+5)==0) {
			io_printf(out,"<p><b>%s</b></p>\n",tr("Timer deleted!"));
			action=SUMMARY;
		} else {
			io_printf(out,"<p><b>%s</b></p>\n",tr("Failed to delete timer!"));
			action=EDIT;
		}
	}
}

if (!strcmp(action,ADD)) {
	if ( (timerID>0) && (newt) && (oldTimer) ) {
		if (editTimer(timerID,oldTimer+5,newt+5)==0) {
			io_printf(out,"<p><b>%s</b></p>\n",tr("Timer updated!"));
		} else {
			io_printf(out,"<p><b>%s</b></p>\n",tr("Failed to update timer! Maybe it changed in the meantime?"));
		}
	} else if ( (newt) && (addTimer(newt))) {
		io_printf(out,"<p><b>%s</b></p>\n",tr("Timer added!"));
	} else {  
		io_printf(out,"<p><b>%s</b></p>\n",tr("Failed to add timer!"));
	}
	action=SUMMARY;
} else if (!strcmp(action,NEW)) {
	int active=0; 
	if (vars_countn(args,"active")>0) { active=vars_get_value_i(args,"active"); }
	int chan_id=0;
	if (vars_countn(args,"sender")>0) { chan_id=vars_get_value_i(args,"sender"); }
	enum timerType type=UNDEFINED;
	char reg_timer[8]="";
	const char * date=NULL;
	if (vars_countn(args,"day")>0) {
		if (!strcmp(vars_get_value(args,"day"),"once")) {
			type=ONE_TIME;
				date=vars_get_value(args,"date");
		} else if (!strcmp(vars_get_value(args,"day"),"reg")) {
			strcpy(reg_timer,"-------");
			if (vars_countn(args,"mon")>0) { reg_timer[0]='M'; }
			if (vars_countn(args,"tue")>0) { reg_timer[1]='D'; }
			if (vars_countn(args,"wed")>0) { reg_timer[2]='M'; }
			if (vars_countn(args,"thu")>0) { reg_timer[3]='D'; }
			if (vars_countn(args,"fri")>0) { reg_timer[4]='F'; }
			if (vars_countn(args,"sat")>0) { reg_timer[5]='S'; }
			if (vars_countn(args,"sun")>0) { reg_timer[6]='S'; }
			type=REGULAR;
		}
	}
	const char * startH= vars_get_value(args,"startHour"); 
	const char * startM= vars_get_value(args,"startMin");
	const char * endH  = vars_get_value(args,"endHour");
	const char * endM  = vars_get_value(args,"endMin");
	int lifetime= (vars_countn(args,"lifetime")>0) ? vars_get_value_i(args,"lifetime") : 99;
	int priority= (vars_countn(args,"priority")>0) ? vars_get_value_i(args,"priority") : 50;
	const char * title = vars_get_value(args,"title");
	int addMargin= (vars_countn(args,"addMargin")>0);
		
	if ( (type==UNDEFINED) ||
		( (type==ONE_TIME) && (!date) ) ||
		( (type==REGULAR) && (strlen(reg_timer)<7) ) ||
		( (!startH) || (!startM) || (!endH) || (!endM) ) ) 
	{
		io_printf(out,"Fatal Error!\n");
	} else {
		int ms=0; int me=0;
		if (addMargin) { ms=margin_start; me=margin_stop; }
		char newTimer[256];
		if (makeTimerEx(newTimer,active,chan_id,type,reg_timer,date,startH,startM,endH,endM,ms,me,priority,lifetime,title)==0) {
			if (timerID>0) {
				io_printf(out,"<h2>%s</h2>\n",tr("Edit timer"));  
			} else {
				io_printf(out,"<h2>%s</h2>\n",tr("New timer"));
			}
			io_printf(out,"<table><tr><td>%s</td>\n",tr("active"));
			if (active==1) {
				io_printf(out,"<td><b>%s</b></td></tr>\n",tr("yes"));  
			} else {
				io_printf(out,"<td><b>%s</b></td></tr>\n",tr("no"));
			}
			io_printf(out,"<tr><td>%s</td><td><b>%d</b></td></tr>\n",tr("channel"),chan_id);
			if (type==ONE_TIME) {
				io_printf(out,"<tr><td>%s</td><td><b>%s</b></td></tr>\n",tr("one-time recording"),date);
			} else {
				//REGULAR
				io_printf(out,"<tr><td>%s</td><td><b>%s</b></td></tr>\n",tr("regular recording"),reg_timer);
			}
			io_printf(out,"<tr><td>%s</td><td><b>%s:%s</b></td></tr>\n",tr("from"),startH,startM);
			io_printf(out,"<tr><td>%s</td><td><b>%s:%s</b></td></tr>\n",tr("to"),endH,endM);
			if (addMargin) {
				io_printf(out,"<tr><td>%s</td><td><b>%s</b></td></tr>\n",tr("add start/stop margin"),tr("yes"));
			} else {
				io_printf(out,"<tr><td>%s</td><td><b>%s</b></td></tr>\n",tr("add start/stop margin"),tr("yes"));
			}
			io_printf(out,"<tr><td>%s</td><td><b>%d</b></td></tr>\n",tr("priority"),priority);
			io_printf(out,"<tr><td>%s</td><td><b>%d</b></td></tr>\n",tr("lifetime"),lifetime);
			io_printf(out,"<tr><td>%s</td><td><b>%s</b></td></tr>\n",tr("Title"),title);
			if (timerID>0) {
				io_printf(out,"<tr><td colspan=\"2\" align=\"right\"><a href=\"/timers.kl1?a=add&amp;timer=%s&amp;timerID=%d&amp;oldTimer=%s\">%s</a></td></tr></table>\n",newTimer,timerID,newt,tr("add"));
			} else {
				io_printf(out,"<tr><td colspan=\"2\" align=\"right\"><a href=\"/timers.kl1?a=add&amp;timer=%s\">%s</a></td></tr></table>\n",newTimer,tr("add"));
			}
		}   
	}
		
} else if (!strcmp(action,EDIT)) {
	timerEntry timer;
	initTE(&timer);
	
	if (channels.length==0){
		getChannelList(&channels);
	}
	
	if (newt) {
		parseTimer(newt+5,&timer);    
		io_printf(out,"<h1>%s</h1>\n<form action=\"/timers.kl1\">\n",tr("Edit timer"));
		if (timerID>0) {
			io_printf(out,"<input type=\"hidden\" name=\"timerID\" value=\"%d\" />\n",timerID);
			io_printf(out,"<input type=\"hidden\" name=\"timer\" value=\"%s\" />",newt);
		}
	} else {
		io_printf(out,"<h1>%s</h1>\n<form action=\"/timers.kl1\">\n",tr("New timer"));
	}
	io_printf(out,"<input type=\"hidden\" name=\"a\" value=\"new\" />\n<table class=\"list1\" style=>\n");
	io_printf(out,"<tr><td>&nbsp;</td><td><input type=\"checkbox\" name=\"active\" value=\"1\" %s />%s</td></tr>\n",checked[timer.active],tr("active"));
	io_printf(out,"<tr><td>%s</td><td><select name=\"sender\" size=\"1\">\n",tr("channel"));
	for (i=0;i<channels.length;i++) {
		io_printf(out,"<option value=\"%d\"",channels.entry[i].channelNum);
		if (timer.channelNum==i+1) { io_printf(out," selected=\"selected\""); }
		io_printf(out,">%d - %s</option>\n",channels.entry[i].channelNum,channels.entry[i].channelName);
	}  
	io_printf(out,"</select></td></tr>\n<tr><td><input type=\"radio\" name=\"day\" value=\"once\"");
	if (timer.type==ONE_TIME) {
		io_printf(out," checked"); 
		strcpy(timer.reg_timer,"-------"); 
	}
	io_printf(out,">%s</input></td><td><select name=\"date\" size=\"1\">\n",tr("one-time recording"));
	time_t ttDate=time(NULL);
	char cdate[11];
	char cldate[11];
	for(i=0;i<14;i++) {
		struct tm date=*localtime(&ttDate);
		strftime(cdate,11,"%Y-%m-%d",&date);
		io_printf(out,"<option value=\"%s\" %s>%s, %s</option>\n",cdate,selected[sameDay(ttDate,timer.start)],weekdays[langID][date.tm_wday],formatDate(&date,0));
		if ( (sameDay(ttDate,timer.start)==1) && (timer.type==REGULAR) ) {  //TODO_KILLE wrong timer.type value
			timer.reg_timer[(date.tm_wday+6)%7]='x'; //TODO weekdays[langID][date.tm_wday][0]; 
		}
		ttDate+=24*60*60;
	} 
	io_printf(out,"</select></td></tr>\n<tr><td><input type=\"radio\" name=\"day\" value=\"reg\"");
	if (timer.type==REGULAR) {  //TODO_KILLE wrong timer.type value
		io_printf(out," checked"); 
	}
	io_printf(out,">%s</input></td><td>",tr("regular recording"));
	for(i=startOfWeek[langID];i<startOfWeek[langID]+7;i++) {
		io_printf(out,"<input type=\"checkbox\" name=\"%s\" value=\"%d\"",shortWeekdays[langID][i%7],(i%7));
		if ( timer.reg_timer[(i+6)%7]!='-' ) {
			io_printf(out," checked");
		}
		io_printf(out,">%s</input>&nbsp;&nbsp;",weekdays[langID][i%7]);
	}
	struct tm start_date=*localtime(&timer.start);
	io_printf(out,"</td></tr>\n<tr><td>%s</td><td><input type=\"text\" name=\"startHour\" maxlength=\"2\" size=\"3\" value=\"%02d\" />&nbsp;:&nbsp;<input type=\"text\" name=\"startMin\" maxlength=\"2\" size=\"3\" value=\"%02d\" />&nbsp;</td></tr>\n",tr("from"),start_date.tm_hour,start_date.tm_min);
	struct tm end_date=*localtime(&timer.stop);
	io_printf(out,"<tr><td>%s</td><td><input type=\"text\" name=\"endHour\" maxlength=\"2\" size=\"3\" value=\"%02d\" />&nbsp;:&nbsp;<input type=\"text\" name=\"endMin\" maxlength=\"2\" size=\"3\" value=\"%02d\" />&nbsp;</td></tr>\n",tr("to"),end_date.tm_hour,end_date.tm_min);
	if (timerID==-1) {
		io_printf(out,"<tr><td>&nbsp;</td><td><input type=\"checkbox\" name=\"addMargin\" value=\"1\" checked>%s</input></td></tr>\n",tr("add start/stop margin"));
	} else {
		io_printf(out,"<tr><td>&nbsp;</td><td><input type=\"checkbox\" name=\"addMargin\" value=\"0\">%s</input></td></tr>\n",tr("add start/stop margin"));
	}
	io_printf(out,"<tr><td>%s</td><td><input type=\"text\" name=\"priority\" maxlength=\"2\" size=\"3\" value=\"%d\"/></td></tr>\n<tr><td>%s</td><td><input type=\"text\" name=\"lifetime\" value=\"%d\" maxlength=\"2\" size=\"3\" /></td></tr>\n",tr("priority"),timer.priority,tr("lifetime"),timer.lifetime);
	io_printf(out,"<tr><td>%s</td><td><input type=\"text\" name=\"title\" size=\"70\" value=\"%s\" /></td></tr>\n<tr><td colspan=\"2\" align=\"right\"><input type=\"submit\" value=\" %s \" /></td></tr>\n",tr("Title"),timer.title,tr("Check timer"));
	
	if (timerID>0) {
		io_printf(out,"<tr><td colspan=\"2\"><hr><b>%s</b></td></tr>\n",tr("- or -"));
		io_printf(out,"<tr><td colspan=\"2\"><input type=\"radio\" name=\"alt\" value=\"dele\">%s</input></td></tr>\n",tr("delete timer"));
		io_printf(out,"<tr><td colspan=\"2\" align=\"right\"><input type=\"submit\" value=\" %s \" /></td></tr>\n",tr(" execute "));
	}
	io_printf(out,"</table></form>\n");
	freeTE(&timer);
	
} else {
	action=SUMMARY;
}

if (strcmp(action,SUMMARY)==0) {
	if (channels.length==0){
		getChannelList(&channels);
	}
	
	if (channels.length>0) {
		timerEntry * timers;
		int max_timers=1;
		%>
	<table class="list1">
		<tr>
			<th><a class="<%= sortClass(SF_START) %>" href="<% printLink(SF_START); %>"><%= tr("Date")      %></a></th>
			<th><a class="<%= sortClass(SF_NAME)  %>" href="<% printLink(SF_NAME);  %>"><%= tr("channel")   %></a></th>
			<th><a class="<%= sortClass(SF_START) %>" href="<% printLink(SF_START); %>"><%= tr("from")      %></a></th>
			<th><a class="<%= sortClass(SF_START) %>" href="<% printLink(SF_START); %>"><%= tr("to")        %></a></th>
			<th><a class="<%= sortClass(SF_TITLE) %>" href="<% printLink(SF_TITLE); %>"><%= tr("program")   %></a></th>
			<th><a class="<%= sortClass(SF_MUX)   %>" href="<% printLink(SF_MUX);   %>"><%= tr("multiplex") %></a></th>
			<th>&nbsp;</th>
		</tr>
		<%
		timers=getTimerList(&channels,&max_timers,sortBy,sortDirection);
		const char *editTimer=tr("Edit timer");
		for (i=0;i<max_timers;i++) {
			struct tm t1=*localtime(&timers[i].start);
			struct tm t2=*localtime(&timers[i].stop);
			if (timers[i].type==REGULAR) {
				io_printf(out,"<tr>\n <td>%s (%s)</td>\n",formatDate(&t1,0),timers[i].reg_timer);
			} else {
				io_printf(out,"<tr>\n <td>%s</td>\n",formatDate(&t1,0));
			}
			io_printf(out," <td>%s</a></td>\n",timers[i].channelName);
			io_printf(out," <td>%02d:%02d</td>\n",t1.tm_hour,t1.tm_min);
			io_printf(out," <td>%02d:%02d</td>\n",t2.tm_hour,t2.tm_min);
			io_printf(out," <td>%s</td>\n",timers[i].title);
			io_printf(out," <td>%s</td>\n",timers[i].mux);
			io_printf(out," <td><a href=\"timers.kl1?a=edit&timer=NEWT %s&timerID=%d\"><img src=\"/img/edit16.png\" alt=\"%s\" /></a></td>\n",timers[i].newt,timers[i].ID,editTimer);
			io_printf(out,"</tr>\n");
		}
		io_printf(out,"</table>\n");
		freeTimerList(timers,max_timers);
	} else {
		//TODO
	}
}
freeCL(&channels);
close_svdrp();
%>

</div>

<%@ include ../../components/post-content.kl1 %>
