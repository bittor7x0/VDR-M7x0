<%!
/*
* 
* This source-code is licensed under GPL v2.
* See ../../LICENSE for details
* 
* (c) Christian Kelinski <k@kille.cx>
* Please checkout the README file!
* 
* Originally written for the open7x0.org VDR-FW project:
* www.open7x0.org
* 
* Modified for http://vdr-m7x0.foroactivo.com.es by:
* atinar <atinar1@hotmail.com>
* 
* You will need the KLONE web application development framework
* from www.koanlogic.com Version 2.
* 
*/

#include <klapp_conf.h>
#include <time.h>
#include <mntent.h>
#include <sys/vfs.h>

#include "i18n.h"
#include "misc.h"
#include "epg.h"
#include "svdrp_comm.h"

#ifdef DEBUG
void dbg_index_kl1(void) { dbg("index.kl1"); }
#endif

%><%

	#ifdef DEBUG
	dbg_index_kl1();
	#endif
	
	config(session, request);
	currentPage=PN_INDEX;
	int ntabs=initHtmlPage(response,out,tr("homepage"),NULL);
	printMenu(out,ntabs);

	io_printf(out,"%.*s<div id=\"main\" class=\"content\">\n",ntabs++,tabs);
	hostConf_t *host=getFirstVdrHost();
	channel_t channel;
	if (host && getChannel(host,0,&channel)) {
		channelList_t channels;
		channels.length=1;
		channels.channel=&channel;
		nowNextList_t nnl;
		getNowNextList(host,&nnl,&channels);
		if (nnl.length>0) {
			nowNextEntry_t *nne=&nnl.entry[0];
			const char *LiveStream=tr("liveStream");
			io_printf(out,"%.*s"
				"<h2>"
					"<a class=\"ui-icon ui-icon-tv\" href=\"watchit.kl1?channelnum=%d\" title=\"%s\">%s</a>"
					"%s &raquo;%s&laquo;"
				"</h2>\n",ntabs,tabs,channel.channelNum,LiveStream,LiveStream,tr("channelWatching"),channel.channelName);
			io_printf(out,"%.*s<div class=\"section\">\n",ntabs++,tabs);
			if (nne->event[0].start==0) {
				io_printf(out,"%.*s<div class=\"alert\">%s</div>\n",ntabs,tabs,tr("warnNoEPG"));
			} else {
				io_printf(out,"%.*s<table id=\"nowOnTv\" class=\"list1 programs\" summary=\"%s\">\n",ntabs++,tabs,tr("nowOnTv"));
				io_printf(out,"%.*s<colgroup id=\"colNow\" class=\"nowNext\">\n",ntabs++,tabs);
				io_printf(out,"%.*s<col class=\"hour\"/>\n",ntabs,tabs);
				io_printf(out,"%.*s<col class=\"info\"/>\n",ntabs,tabs);
				io_printf(out,"%.*s</colgroup>\n",--ntabs,tabs);
				io_printf(out,"%.*s<col class=\"space\"/>\n",ntabs,tabs);
				io_printf(out,"%.*s<colgroup id=\"colNext\" class=\"nowNext\">\n",ntabs++,tabs);
				io_printf(out,"%.*s<col class=\"hour\"/>\n",ntabs,tabs);
				io_printf(out,"%.*s<col class=\"info\"/>\n",ntabs,tabs);
				io_printf(out,"%.*s</colgroup>\n",--ntabs,tabs);
				io_printf(out,"%.*s<thead>\n",ntabs++,tabs);
				io_printf(out,"%.*s"
					"<tr>"
						"<th colspan=\"2\">%s</th>"
						"<td class=\"space\"></td>"
						"<th colspan=\"2\">%s</th>"
					"</tr>\n",ntabs,tabs,tr("now"),tr("next"));
				io_printf(out,"%.*s</thead>\n",--ntabs,tabs);
				io_printf(out,"%.*s<tbody>\n",ntabs++,tabs);
				io_printf(out,"%.*s<tr>\n",ntabs++,tabs);
				int n;
				eventEntry_t *ee;
				struct tm *t;
				for (n=0;n<2;n++){
					ee=&nne->event[n];
					if(n>0){
						io_printf(out,"%.*s<td class=\"space\"></td>\n",ntabs,tabs);
					}
					if (ee->start>0) {
						t = localtime(&ee->start);
						io_printf(out,"%.*s<td class=\"hour\">%02d:%02d</td>\n",ntabs,tabs,t->tm_hour,t->tm_min);
						io_printf(out,"%.*s<td class=\"info\">\n",ntabs++,tabs);
						printEvent(out,ntabs,ee);
						io_printf(out,"%.*s</td>\n",--ntabs,tabs);
					} else {
						io_printf(out,"%.*s"
							"<td class=\"info\" colspan=\"2\">"
								"<div class=\"title\">%s</div>"
							"</td>\n",ntabs,tabs,(ee->title)?ee->title:"&nbsp;");
					}
				}
				io_printf(out,"%.*s</tr>\n",--ntabs,tabs);
				io_printf(out,"%.*s</tbody>\n",--ntabs,tabs);
				io_printf(out,"%.*s</table>\n",--ntabs,tabs);
				/*
				//TODO pendiente de que funcione el comando SVDRP necesario
				io_printf(out,"%.*s"
					"<div class=\"currentImage\">"
						"<img style=\"width:400px;height:300px\" src=\"currentimage.kl1?quality=80&sizex=400&sizey=300\"/>"
					"</div>\n",ntabs,tabs);
				*/
			}
			io_printf(out,"%.*s</div>\n",--ntabs,tabs);
		}
		freeNNL(&nnl);
	} else {
		printMessage(out,ntabs,"alert",tr("VDR not running!"),NULL,NULL);
		io_printf(out,"%.*s</div>",--ntabs,tabs);
	}
	freeChannel(&channel);
	
	//TODO integrar en comando SVDRP
	if (host && host->video0[0]){
		io_printf(out,"%.*s<h2>%s</h2>\n",ntabs,tabs,tr("freeSpace"));
		io_printf(out,"%.*s<div class=\"section\">\n",ntabs++,tabs);
		FILE *mountTable;
		struct mntent *mountEntry;
		int numFS=0;
		mountTable = setmntent("/etc/mtab","r");
		//TODO deducir las particiones a partir de host->video0
		while ((mountEntry = getmntent(mountTable))) {
			if (strncmp(mountEntry->mnt_dir,"/var/media/",10)==0) {
				struct statfs s;
				long blocksUsed;
				long blocksPercent;
				statfs(mountEntry->mnt_dir,&s);
				if (s.f_blocks > 0) {
					blocksUsed=s.f_blocks-s.f_bfree;
					blocksPercent=(long)(blocksUsed*100.0/(blocksUsed+s.f_bavail)+0.5);
					if (numFS==0) {
						io_printf(out,"%.*s<table id=\"partitionSpace\" class=\"list1\" summary=\"%s\">\n",ntabs++,tabs,tr("partitionSpace"));
						io_printf(out,"%.*s"
							"<tr>"
								"<th>%s</th>"
								"<th colspan=\"2\">%s</th>"
								"<th>%s</th>"
							"</tr>\n",ntabs,tabs,tr("partition"),tr("used"),tr("available"));
					}
					io_printf(out,"%.*s"
						"<tr>"
							"<td>%s</td>"
							"<td>%d MB</td>"
							"<td>%d %%</td>"
							"<td>%d MB</td>"
						"</tr>\n",ntabs,tabs
						,(mountEntry->mnt_dir)+11
						,(long)(blocksUsed*(s.f_bsize/1048576.0))
						,blocksPercent
						,(long)(s.f_bfree*(s.f_bsize/1048576.0))
					);
					numFS++;
				}
			}
		}
		endmntent(mountTable);
		if (numFS==0) {
			io_printf(out,"%.*s<p>%s</p>\n",ntabs,tabs,tr("noMediaErr"));
		} else {
			io_printf(out,"%.*s</table>\n",--ntabs,tabs);
		}
		io_printf(out,"%.*s</div>\n",--ntabs,tabs);
	}
	io_printf(out,"%.*s</div>\n",--ntabs,tabs);
	finishHtmlPage(out,ntabs);
end:
	closeSvdrpAll();
%>
