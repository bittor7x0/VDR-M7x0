Backport for linuxthreads.new from:
   http://cgit.uclibc-ng.org/cgi/cgit/uclibc-ng.git/commit/?id=75a5fc9e5033f47e955406e300a070004c14b8ae

	linuxthreads: Avoid unused variable warning

	The spurious_wakeup_count variable is set but is never actually used for
	the semaphore implementation. To avoid a clang warning for this case
	remove the unused variable.

diff -Naur a/libpthread/linuxthreads/semaphore.c b/libpthread/linuxthreads/semaphore.c
--- a/libpthread/linuxthreads/semaphore.c
+++ b/libpthread/linuxthreads/semaphore.c
@@ -61,7 +61,6 @@
   __volatile__ pthread_descr self = thread_self();
   pthread_extricate_if extr;
   int already_canceled = 0;
-  int spurious_wakeup_count;
 
   /* Set up extrication interface */
   extr.pu_object = sem;
@@ -90,7 +89,6 @@
   }
 
   /* Wait for sem_post or cancellation, or fall through if already canceled */
-  spurious_wakeup_count = 0;
   while (1)
     {
       suspend(self);
@@ -98,8 +96,7 @@
 	  && (THREAD_GETMEM(self, p_woken_by_cancel) == 0
 	      || THREAD_GETMEM(self, p_cancelstate) != PTHREAD_CANCEL_ENABLE))
 	{
-	  /* Count resumes that don't belong to us. */
-	  spurious_wakeup_count++;
+	  /* Resume does not belong to us. */
 	  continue;
 	}
       break;
@@ -213,7 +210,6 @@
   pthread_descr self = thread_self();
   pthread_extricate_if extr;
   int already_canceled = 0;
-  int spurious_wakeup_count;
 
   __pthread_lock(&sem->__sem_lock, self);
   if (sem->__sem_value > 0) {
@@ -250,7 +246,6 @@
     __pthread_do_exit(PTHREAD_CANCELED, CURRENT_STACK_FRAME);
   }
 
-  spurious_wakeup_count = 0;
   while (1)
     {
       if (timedsuspend(self, abstime) == 0) {
@@ -277,8 +272,7 @@
 	  && (THREAD_GETMEM(self, p_woken_by_cancel) == 0
 	      || THREAD_GETMEM(self, p_cancelstate) != PTHREAD_CANCEL_ENABLE))
 	{
-	  /* Count resumes that don't belong to us. */
-	  spurious_wakeup_count++;
+	  /* Resume does not belong to us. */
 	  continue;
 	}
       break;
