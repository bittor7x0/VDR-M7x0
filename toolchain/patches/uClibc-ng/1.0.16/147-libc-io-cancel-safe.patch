From: Filippo ARCIDIACONO <filippo.arcidiacono@st.com>
Date: Tue, 11 Sep 2012 16:46:20 +0200
Subject: libc: make I/O locking cancel-safe with futexes

Current implementation of I/O locking macros using futexes are not
cancel safe, as if a thread is cancelled while doing IO operations,
it does not release the lock on the IO stream. So following
attempts to acquire the IO stream's lock would dead-lock.
In order to make it cancel-safe, it needs to rely upon the
pthread_cleanup push & pop protocol, as it is already done for
the pthread_mutex counterpart.

[ stlinux.com commit 414a400292 ]

Refs.:
 http://bugzilla.stlinux.com/show_bug.cgi?id=21083
 http://lists.uclibc.org/pipermail/uclibc/2012-September/047018.html

Trivial modifications to hide new symbol by Leonid Lisovskiy.

---
 libc/stdio/Makefile.in                            |    3 +++
 libc/stdio/io_lock_unlock.c                       |   16 ++++++++++++++++
 libc/sysdeps/linux/common/bits/uClibc_mutex.h     |   22 ++++++++++++++--------
 libpthread/nptl/sysdeps/pthread/bits/stdio-lock.h |    2 ++
 4 files changed, 35 insertions(+), 8 deletions(-)
 create mode 100644 libc/stdio/io_lock_unlock.c

diff --git a/libc/stdio/Makefile.in b/libc/stdio/Makefile.in
--- a/libc/stdio/Makefile.in
+++ b/libc/stdio/Makefile.in
@@ -52,6 +52,9 @@ endif
 
 # pthread functions
 CSRC-y += flockfile.c ftrylockfile.c funlockfile.c
+ifeq ($(UCLIBC_HAS_STDIO_FUTEXES),y)
+CSRC-y += io_lock_unlock.c
+endif
 
 # Functions with unlocked versions
 CUSRC-y := \
diff --git a/libc/stdio/io_lock_unlock.c b/libc/stdio/io_lock_unlock.c
new file mode 100644
--- /dev/null
+++ b/libc/stdio/io_lock_unlock.c
@@ -0,0 +1,16 @@
+/*
+ * Copyright (C) 2012 STMicroelectronics, Ltd
+ *
+ * Author(s): Filippo Arcidiacono  <filippo.arcidiacono@st.com>
+ *
+ * Licensed under the LGPL v2.1, see the file COPYING.LIB in this tarball
+ */
+
+#include <bits/stdio-lock.h>
+
+/* Function wrapper needed for I/O locking macros. */
+
+void attribute_hidden __IO_lock_unlock (_IO_lock_t *lock)
+{
+  _IO_lock_unlock (*lock);
+}
diff --git a/libc/sysdeps/linux/common/bits/uClibc_mutex.h b/libc/sysdeps/linux/common/bits/uClibc_mutex.h
--- a/libc/sysdeps/linux/common/bits/uClibc_mutex.h
+++ b/libc/sysdeps/linux/common/bits/uClibc_mutex.h
@@ -77,15 +78,21 @@
 #define __UCLIBC_IO_MUTEX_INIT(M) 	_IO_lock_t M = _IO_lock_initializer
 #define __UCLIBC_IO_MUTEX_EXTERN(M)		extern _IO_lock_t M
 
-#define __UCLIBC_IO_MUTEX_CONDITIONAL_LOCK(M,C)		\
-	if (C) {										\
-		_IO_lock_lock(M);							\
-	}
+#define __UCLIBC_IO_MUTEX_CONDITIONAL_LOCK(M,C)						\
+	do {										\
+		struct _pthread_cleanup_buffer __infunc_pthread_cleanup_buffer;		\
+		int __infunc_need_locking = (C);					\
+		if (__infunc_need_locking) {						\
+			_pthread_cleanup_push_defer(&__infunc_pthread_cleanup_buffer,	\
+						    (void (*) (void *))__IO_lock_unlock,	\
+						    &(M));				\
+			_IO_lock_lock((M));						\
+		}									\
+		((void)0)
+
 
-#define __UCLIBC_IO_MUTEX_CONDITIONAL_UNLOCK(M,C)	\
-	if (C) {										\
-		_IO_lock_unlock(M);							\
-	}
+#define __UCLIBC_IO_MUTEX_CONDITIONAL_UNLOCK(M,C)		\
+		__UCLIBC_MUTEX_CONDITIONAL_UNLOCK(M,C)
 
 #define __UCLIBC_IO_MUTEX_AUTO_LOCK(M,A,V)			\
 		__UCLIBC_IO_MUTEX_CONDITIONAL_LOCK(M,((A=(V))) == 0)
diff --git a/libpthread/nptl/sysdeps/pthread/bits/stdio-lock.h b/libpthread/nptl/sysdeps/pthread/bits/stdio-lock.h
--- a/libpthread/nptl/sysdeps/pthread/bits/stdio-lock.h
+++ b/libpthread/nptl/sysdeps/pthread/bits/stdio-lock.h
@@ -29,6 +29,8 @@
 
 typedef struct { int lock; int cnt; void *owner; } _IO_lock_t;
 
+void __IO_lock_unlock (_IO_lock_t *lock) attribute_hidden;
+
 #define _IO_lock_initializer { LLL_LOCK_INITIALIZER, 0, NULL }
 
 #define _IO_lock_init(_name) \
-- 
