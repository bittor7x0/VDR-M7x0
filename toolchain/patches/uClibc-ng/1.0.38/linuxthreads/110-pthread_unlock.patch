Backport for linuxthreads.new from:
   http://cgit.uclibc-ng.org/cgi/cgit/uclibc-ng.git/commit/?id=361f679c652647cdea4d5a66999a4b96c1653576

	linuxthreads.old: Fix segfault when pthread_mutex_unlock() called against unlocked NORMAL mutex.

	Althought, it is undefined behavior, there is no reason for segfault.

	 Program received signal SIGSEGV, Segmentation fault.
	 __pthread_unlock (lock=lock@entry=0x804b03c <lock+16>)
		at libpthread/linuxthreads.old/spinlock.c:231
	 231                 (&lock->__status, oldstatus, (long)(thr->p_nextlock) & ~1L))

	It occurs only on platforms which has HAS_COMPARE_AND_SWAP defined.

	Restore glibc commit fbaf6e72d6 "spinlock.c (__pthread_unlock): Don't crash if
	called for an untaken mutex." behavior, broken later by commit 4ad1d0cfbf.

	Signed-off-by: Leonid Lisovskiy <lly.dev@gmail.com>

--- a/libpthread/linuxthreads/spinlock.c
+++ b/libpthread/linuxthreads/spinlock.c
@@ -172,6 +172,9 @@ int __pthread_unlock(struct _pthread_fas
   int maxprio;
 #endif
 
+  if (lock->__status == 0)
+    return ENOLCK;
+
 #if defined TEST_FOR_COMPARE_AND_SWAP
   if (!__pthread_has_cas)
 #endif
