From 771f6952c823f5fdb2e0ceb246e2e87a98371660 Mon Sep 17 00:00:00 2001
From: Fedor <fedork@ubuntu.(none)>
Date: Mon, 2 Feb 2009 22:07:58 -0500
Subject: [PATCH] Backport of allow_restart flag for scsi/usb devices (stolen
 from wl500g.info forums).

---
 drivers/scsi/hosts.h       |  13 ++
 drivers/scsi/scsi.h        |   3 +
 drivers/scsi/scsi_error.c  | 148 ++++++++++++++++++++-
 drivers/scsi/scsi_scan.c   |  10 ++
 drivers/usb/storage/scsiglue.c |  26 ++++
 5 files changed, 199 insertions(+), 1 deletion(-)

diff --git a/drivers/scsi/hosts.h b/drivers/scsi/hosts.h
index 726633ec63..bfc5d1fc6e 100644
--- a/drivers/scsi/hosts.h
+++ b/drivers/scsi/hosts.h
@@ -297,6 +297,19 @@ typedef struct	SHT
      * Name of proc directory
      */
     char *proc_name;
+    
+    /*
+     * Once the device has responded to an INQUIRY and we know the
+     * device is online, we call into the low level driver with the
+     * struct scsi_device *.  If the low level device driver implements
+     * this function, it *must* perform the task of setting the queue
+     * depth on the device.  All other tasks are optional and depend
+     * on what the driver supports and various implementation details.
+     *
+     * Status: OPTIONAL
+     */
+    int (* slave_configure)(Scsi_Device *dev);
+
 
 } Scsi_Host_Template;
 
diff --git a/drivers/scsi/scsi.h b/drivers/scsi/scsi.h
index 06fdb6754c..d1846c19fd 100644
--- a/drivers/scsi/scsi.h
+++ b/drivers/scsi/scsi.h
@@ -597,6 +597,9 @@ struct scsi_device {
 	unsigned remap:1;	/* support remapping  */
 	unsigned starved:1;	/* unable to process commands because
 				   host busy */
+ 	unsigned no_start_on_add:1;	/* do not issue start on add */
+	unsigned allow_restart:1; /* issue START_UNIT in error handler */
+	unsigned retry_hwerror:1; /* retry HARDWARE_ERROR */
 
 	// Flag to allow revalidate to succeed in sd_open
 	int allow_revalidate;
diff --git a/drivers/scsi/scsi_error.c b/drivers/scsi/scsi_error.c
index 64eaa09a1f..7b2369ebfc 100644
--- a/drivers/scsi/scsi_error.c
+++ b/drivers/scsi/scsi_error.c
@@ -57,6 +57,7 @@
 #define SENSE_TIMEOUT (10*HZ)
 #define RESET_TIMEOUT (2*HZ)
 #define ABORT_TIMEOUT (15*HZ)
+#define START_STOP_TIMEOUT (60*HZ)
 #endif
 
 #define STATIC
@@ -75,6 +76,7 @@ STATIC int scsi_check_sense(Scsi_Cmnd * SCpnt);
 STATIC int scsi_request_sense(Scsi_Cmnd *);
 STATIC void scsi_send_eh_cmnd(Scsi_Cmnd * SCpnt, int timeout);
 STATIC int scsi_try_to_abort_command(Scsi_Cmnd *, int);
+STATIC int scsi_try_start_unit(Scsi_Cmnd * SCpnt);
 STATIC int scsi_test_unit_ready(Scsi_Cmnd *);
 STATIC int scsi_try_bus_device_reset(Scsi_Cmnd *, int timeout);
 STATIC int scsi_try_bus_reset(Scsi_Cmnd *);
@@ -522,6 +524,63 @@ STATIC int scsi_test_unit_ready(Scsi_Cmnd * SCpnt)
 }
 
 /*
+ * Function:  scsi_send_stu()
+ *
+ * Purpose:     Send start unit command.
+ *
+ */
+STATIC int scsi_send_stu(Scsi_Cmnd * SCpnt)
+{
+	static unsigned char stu_command[6] =
+	{START_STOP, 0, 0, 0, 1, 0};
+	int saved_resid;
+
+	memcpy((void *) SCpnt->cmnd, (void *) stu_command,
+	       sizeof(stu_command));
+
+	if (SCpnt->device->scsi_level <= SCSI_2)
+		SCpnt->cmnd[1] = SCpnt->lun << 5;
+
+	/*
+	 * Zero the sense buffer.  The SCSI spec mandates that any
+	 * untransferred sense data should be interpreted as being zero.
+	 */
+	memset((void *) SCpnt->sense_buffer, 0, sizeof(SCpnt->sense_buffer));
+
+	saved_resid = SCpnt->resid;
+	SCpnt->request_buffer = NULL;
+	SCpnt->request_bufflen = 0;
+	SCpnt->use_sg = 0;
+	SCpnt->cmd_len = COMMAND_SIZE(SCpnt->cmnd[0]);
+	SCpnt->underflow = 0;
+	SCpnt->sc_data_direction = SCSI_DATA_NONE;
+
+	scsi_send_eh_cmnd(SCpnt, START_STOP_TIMEOUT);
+
+	/*
+	 * When we eventually call scsi_finish, we really wish to complete
+	 * the original request, so let's restore the original data. (DB)
+	 */
+	memcpy((void *) SCpnt->cmnd, (void *) SCpnt->data_cmnd,
+	       sizeof(SCpnt->data_cmnd));
+	SCpnt->resid = saved_resid;
+	SCpnt->request_buffer = SCpnt->buffer;
+	SCpnt->request_bufflen = SCpnt->bufflen;
+	SCpnt->use_sg = SCpnt->old_use_sg;
+	SCpnt->cmd_len = SCpnt->old_cmd_len;
+	SCpnt->sc_data_direction = SCpnt->sc_old_data_direction;
+	SCpnt->underflow = SCpnt->old_underflow;
+
+	/*
+	 * Hey, we are done.  Let's look to see what happened.
+	 */
+	SCSI_LOG_ERROR_RECOVERY(3,
+		printk("scsi_send_stu: SCpnt %p eh_state %x\n",
+		SCpnt, SCpnt->eh_state));
+	return SCpnt->eh_state;
+}
+
+/*
  * This would normally need to get the IO request lock,
  * but as it doesn't actually touch anything that needs
  * to be locked we can avoid the lock here..
@@ -754,6 +813,36 @@ STATIC int scsi_try_to_abort_command(Scsi_Cmnd * SCpnt, int timeout)
 }
 
 /*
+ * Function:  scsi_try_start_unit
+ *
+ * Purpose:     Try to start device.
+ *
+ * Returns:     FAILED          Operation failed or not supported.
+ *              SUCCESS         Succeeded.
+ */
+
+
+STATIC int scsi_try_start_unit(Scsi_Cmnd * SCpnt)
+{
+	unsigned long flags;
+	int rtn;
+
+	if (SCpnt->device->allow_restart == 0)
+		return FAILED;
+
+	SCpnt->eh_state = FAILED;	/* Until we come up with something better */
+
+	spin_lock_irqsave(&io_request_lock, flags);
+	rtn = scsi_send_stu(SCpnt);
+	spin_unlock_irqrestore(&io_request_lock, flags);
+
+	if (rtn == SUCCESS)
+		SCpnt->eh_state = SUCCESS;
+
+	return SCpnt->eh_state;
+}
+
+/*
  * Function:  scsi_try_bus_device_reset
  *
  * Purpose:     Ask host adapter to perform a bus device reset for a given
@@ -1163,6 +1252,15 @@ STATIC int scsi_check_sense(Scsi_Cmnd * SCpnt)
 			(SCpnt->sense_buffer[13] == 0x01)) {
 			return NEEDS_RETRY;
 		}
+		/*
+		 * if the device is not started, we need to wake
+		 * the error handler to start the motor
+		 */
+		if (SCpnt->device->allow_restart &&
+			(SCpnt->sense_buffer[12] == 0x04) &&
+			(SCpnt->sense_buffer[13] == 0x02)) {
+			return FAILED;
+		}
 		return SUCCESS;
 
 		/* these three are not supported */
@@ -1172,12 +1270,20 @@ STATIC int scsi_check_sense(Scsi_Cmnd * SCpnt)
 		return SUCCESS;
 
 	case MEDIUM_ERROR:
+		if (SCpnt->sense_buffer[12] == 0x11 || /* UNRECOVERED READ END */
+		    SCpnt->sense_buffer[12] == 0x13 || /* AMNF DATA FILED */
+		    SCpnt->sense_buffer[12] == 0x14) { /* RECORD NOT FOUND */
+			return SUCCESS;
+		}
 		return NEEDS_RETRY;
+		
+	case HARDWARE_ERROR:
+		if (SCpnt->device->retry_hwerror)
+			return ADD_TO_MLQUEUE;
 
 	case ILLEGAL_REQUEST:
 	case BLANK_CHECK:
 	case DATA_PROTECT:
-	case HARDWARE_ERROR:
 	default:
 		return SUCCESS;
 	}
@@ -1433,6 +1539,45 @@ STATIC int scsi_unjam_host(struct Scsi_Host *host)
 		ourrtn = TRUE;
 		goto leave;
 	}
+
+	/*
+	 *  If commands are failing due to not ready, initializing command required,
+	 *  try revalidating the device, which will end up sending a start unit.
+	 */
+	SCSI_LOG_ERROR_RECOVERY(3, printk("scsi_unjam_host: Checking to see if we want to try start unit\n"));
+
+	for (SDpnt = host->host_queue; SDpnt; SDpnt = SDpnt->next) {
+		for (SCloop = SDpnt->device_queue; SCloop; SCloop = SCloop->next) {
+			if (SCloop->state == SCSI_STATE_FAILED) {
+				break;
+			}
+		}
+
+		if (SCloop == NULL) {
+			continue;
+		}
+		
+		rtn = scsi_try_start_unit(SCloop);
+
+		if (rtn == SUCCESS) {
+			rtn = scsi_test_unit_ready(SCloop);
+
+			if (rtn == SUCCESS && scsi_unit_is_ready(SCloop)) {
+				rtn = scsi_eh_retry_command(SCloop);
+
+				if (rtn == SUCCESS) {
+					SCloop->host->host_failed--;
+					scsi_eh_finish_command(&SCdone, SCloop);
+				}
+			}
+		}
+	}
+
+	if (host->host_failed == 0) {
+		ourrtn = TRUE;
+		goto leave;
+	}
+
 	/*
 	 * Either the abort wasn't appropriate, or it didn't succeed.
 	 * Now try a bus device reset.  Still, look to see whether we have
@@ -1590,6 +1735,7 @@ STATIC int scsi_unjam_host(struct Scsi_Host *host)
 						    && SCloop->state != SCSI_STATE_TIMEOUT) {
 							continue;
 						}
+						scsi_try_start_unit(SCloop);
 						rtn = scsi_test_unit_ready(SCloop);
 
 						if (rtn == SUCCESS && scsi_unit_is_ready(SCloop)) {
diff --git a/drivers/scsi/scsi_scan.c b/drivers/scsi/scsi_scan.c
index a76f2dee8a..b10f0fc21d 100644
--- a/drivers/scsi/scsi_scan.c
+++ b/drivers/scsi/scsi_scan.c
@@ -37,6 +37,8 @@
 #define BLIST_ISDISK    	0x100	/* Treat as (removable) disk */
 #define BLIST_ISROM     	0x200	/* Treat as (removable) CD-ROM */
 #define BLIST_LARGELUN		0x400	/* LUNs larger than 7 despite reporting as SCSI 2 */
+#define BLIST_NOSTARTONADD	0x1000	/* do not do automatic start on add */
+#define BLIST_RETRY_HWERROR	0x400000/* retry HARDWARE ERROR */
 
 static void print_inquiry(unsigned char *data);
 static int scan_scsis_single(unsigned int channel, unsigned int dev,
@@ -737,6 +739,14 @@ static int scan_scsis_single(unsigned int channel, unsigned int dev,
 	if (bflags & BLIST_SINGLELUN)
 		SDpnt->single_lun = 1;
 
+	/* configure device if needed */
+	if (SDpnt->host->hostt->slave_configure) {
+		if (!SDpnt->host->hostt->slave_configure(SDpnt)) {
+			printk("scsi: scan_scsis_single: Cannot configure device\n");
+			return 0;
+		}
+	}
+
 	/*
 	 * These devices need this "key" to unlock the devices so we can use it
 	 */
diff --git a/drivers/usb/storage/scsiglue.c b/drivers/usb/storage/scsiglue.c
index 6b1e2cb840..06c479c312 100644
--- a/drivers/usb/storage/scsiglue.c
+++ b/drivers/usb/storage/scsiglue.c
@@ -335,6 +335,30 @@ static int host_reset( Scsi_Cmnd *srb )
 	return FAILED;
 }
 
+static int slave_configure( Scsi_Device *dev )
+{
+	US_DEBUGP("device_reset() called\n" );
+
+	if (dev->type == TYPE_DISK) {
+	
+		/* USB-IDE bridges tend to report SK = 0x04 (Non-recoverable
+		 * Hardware Error) when any low-level error occurs,
+	         * recoverable or not.  Setting this flag tells the SCSI
+		 * midlayer to retry such commands, which frequently will
+		 * succeed and fix the error.  The worst this can lead to
+		 * is an occasional series of retries that will all fail. */
+		dev->retry_hwerror = 1;
+
+		/* USB disks should allow restart. Some drives spin down
+		 * automatically, requiring a START-STOP UNIT command. */
+		dev->allow_restart = 1;
+
+	}
+
+	US_DEBUGP("bus_reset() complete\n");
+	return 1;
+}
+
 /***********************************************************************
  * /proc/scsi/ functions
  ***********************************************************************/
@@ -429,6 +453,8 @@ Scsi_Host_Template usb_stor_host_template = {
 	eh_bus_reset_handler:	bus_reset,
 	eh_host_reset_handler:	host_reset,
 
+	slave_configure:	slave_configure,
+
 	can_queue:		1,
 	this_id:		-1,
 
-- 
2.11.4.GIT

