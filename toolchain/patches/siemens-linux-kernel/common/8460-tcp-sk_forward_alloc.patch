From 95896912bea545cadf49f14f17f5c7c2bcc561fe Mon Sep 17 00:00:00 2001
From: lly <lly@sf.net>
Date: Thu, 30 Sep 2010 18:27:52 -0400
Subject: [PATCH] [TCP]: Fix sk_forward_alloc underflow in tcp_sendmsg
 (backport from 2.6) Backport of ef015786152adaff5a6a8bf0c8ea2f70cee8059d

---
 include/net/tcp.h | 28 ++++++++++++++++++----------
 net/ipv4/tcp.c    | 14 +++++++++-----
 2 files changed, 27 insertions(+), 15 deletions(-)

diff --git a/include/net/tcp.h b/include/net/tcp.h
index 018a6f85bf..142d6cc00a 100644
--- a/include/net/tcp.h
+++ b/include/net/tcp.h
@@ -1877,6 +1877,12 @@ static inline void tcp_enter_memory_pressure(void)
 	}
 }
 
+static inline int tcp_wmem_schedule(struct sock *sk, int size)
+{
+	return size <= sk->forward_alloc ||
+		tcp_mem_schedule(sk, size, 0);
+}
+
 static inline void tcp_moderate_sndbuf(struct sock *sk)
 {
 	if (!(sk->userlocks&SOCK_SNDBUF_LOCK)) {
@@ -1891,8 +1897,11 @@ static inline struct sk_buff *tcp_alloc_pskb(struct sock *sk, int size, int mem,
 
 	if (skb) {
 		skb->truesize += mem;
-		if (sk->forward_alloc >= (int)skb->truesize ||
-		    tcp_mem_schedule(sk, skb->truesize, 0)) {
+		if (tcp_wmem_schedule(sk, skb->truesize)) {
+			/*
+			 * Make sure that we have exactly size bytes
+			 * available to the caller, no more, no less.
+			 */
 			skb_reserve(skb, MAX_TCP_HEADER);
 			return skb;
 		}
@@ -1911,15 +1920,14 @@ static inline struct sk_buff *tcp_alloc_skb(struct sock *sk, int size, int gfp)
 
 static inline struct page * tcp_alloc_page(struct sock *sk)
 {
-	if (sk->forward_alloc >= (int)PAGE_SIZE ||
-	    tcp_mem_schedule(sk, PAGE_SIZE, 0)) {
-		struct page *page = alloc_pages(sk->allocation, 0);
-		if (page)
-			return page;
+	struct page *page;
+
+	page = alloc_pages(sk->allocation, 0);
+	if (!page) {
+		tcp_enter_memory_pressure();
+		tcp_moderate_sndbuf(sk);
 	}
-	tcp_enter_memory_pressure();
-	tcp_moderate_sndbuf(sk);
-	return NULL;
+	return page;
 }
 
 static inline void tcp_writequeue_purge(struct sock *sk)
diff --git a/net/ipv4/tcp.c b/net/ipv4/tcp.c
index c63c2b43f7..aff9c3021f 100644
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@ -1112,19 +1112,23 @@ new_segment:
 					if (off == PAGE_SIZE) {
 						put_page(page);
 						TCP_PAGE(sk) = page = NULL;
+						off = 0;
 					}
-				}
+				} else
+					off = 0;
+
+				if (copy > PAGE_SIZE - off)
+					copy = PAGE_SIZE - off;
+
+				if (!tcp_wmem_schedule(sk, copy))
+					goto wait_for_memory;
 
 				if (!page) {
 					/* Allocate new cache page. */
 					if (!(page=tcp_alloc_page(sk)))
 						goto wait_for_memory;
-					off = 0;
 				}
 
-				if (copy > PAGE_SIZE-off)
-					copy = PAGE_SIZE-off;
-
 				/* Time to copy data. We are close to the end! */
 				err = tcp_copy_to_page(sk, from, skb, page, off, copy);
 				if (err) {
-- 
2.11.4.GIT

