diff -Naur uClibc-0.9.30.3-orig/Rules.mak uClibc-0.9.30.3/Rules.mak
--- uClibc-0.9.30.3-orig/Rules.mak	2011-07-27 20:06:05.000000000 +0200
+++ uClibc-0.9.30.3/Rules.mak	2011-07-27 20:07:34.000000000 +0200
@@ -148,9 +148,9 @@
 ARFLAGS:=cr
 
 # Flags in OPTIMIZATION are used only for non-debug builds
-OPTIMIZATION:=
+OPTIMIZATION:= -Ofast -funroll-loops -funsigned-char -fno-builtin -fno-asm --std=gnu99
 # Use '-Os' optimization if available, else use -O2, allow Config to override
-OPTIMIZATION+=$(call check_gcc,-Os,-O2)
+# OPTIMIZATION+=$(call check_gcc,-Os,-O2)
 # Use the gcc 3.4 -funit-at-a-time optimization when available
 OPTIMIZATION+=$(call check_gcc,-funit-at-a-time,)
 
@@ -286,7 +286,18 @@
 
 ifeq ($(TARGET_ARCH),mips)
 	CPU_CFLAGS-$(CONFIG_MIPS_ISA_1)+=-mips1
-	CPU_CFLAGS-$(CONFIG_MIPS_ISA_2)+=-mips2 -mtune=mips2
+	CPU_CFLAGS-$(CONFIG_MIPS_ISA_2)+=-march=mips2 -mtune=vr4120 -mfix-vr4120
+	CPU_CFLAGS-y  += $(call check_gcc,-ffunction-sections -fdata-sections,)
+	CPU_LDFLAGS-y +=-Wl,-O1
+ifneq ($(call check_ld,--sort-common,),)
+	CPU_LDFLAGS-y += -Wl,--sort-common
+endif
+ifneq ($(call check_ld,--sort-section alignment),)
+	CPU_LDFLAGS-y += -Wl,--sort-section,alignment
+endif
+ifneq ($(call check_ld,--gc-sections),)
+	CPU_LDFLAGS-y += -Wl,--gc-sections
+endif
 	CPU_CFLAGS-$(CONFIG_MIPS_ISA_3)+=-mips3 -mtune=mips3
 	CPU_CFLAGS-$(CONFIG_MIPS_ISA_4)+=-mips4 -mtune=mips4
 	CPU_CFLAGS-$(CONFIG_MIPS_ISA_MIPS32)+=-mips32 -mtune=mips32
