diff -Nru cramfs-1.1/cramfsck.c cramfs-1.1-openbsd/cramfsck.c
--- cramfs-1.1/cramfsck.c	Thu Nov 29 11:01:59 2007
+++ cramfs-1.1-openbsd/cramfsck.c	Thu Nov 29 11:05:23 2007
@@ -47,7 +47,7 @@
 #include <stdlib.h>
 #include <errno.h>
 #include <string.h>
-#include <sys/sysmacros.h>
+//#include <sys/sysmacros.h>
 #ifndef __CYGWIN__
 #include <utime.h>
 #endif /* __CYGWIN__ */
@@ -229,7 +229,7 @@
 
 	buf = mmap(NULL, super.size, PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, 0);
 	if (buf == MAP_FAILED) {
-		buf = mmap(NULL, super.size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
+		buf = mmap(NULL, super.size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON, -1, 0);
 		if (buf != MAP_FAILED) {
 			lseek(fd, 0, SEEK_SET);
 			read(fd, buf, super.size);
diff -Nru cramfs-1.1/getline.c cramfs-1.1-openbsd/getline.c
--- cramfs-1.1/getline.c	Thu Jan  1 01:00:00 1970
+++ cramfs-1.1-openbsd/getline.c	Tue Oct  9 09:48:24 2007
@@ -0,0 +1,158 @@
+/* getline.c -- Replacement for GNU C library function getline
+
+Copyright (C) 1993, 1996 Free Software Foundation, Inc.
+
+This program is free software; you can redistribute it and/or
+modify it under the terms of the GNU General Public License as
+published by the Free Software Foundation; either version 2 of the
+License, or (at your option) any later version.
+
+This program is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program; if not, write to the Free Software
+Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
+
+/* Written by Jan Brittenson, bson@gnu.ai.mit.edu.  */
+
+#if HAVE_CONFIG_H
+# include <config.h>
+#endif
+
+/* The `getdelim' function is only declared if the following symbol
+   is defined.  */
+#ifndef _GNU_SOURCE
+#define _GNU_SOURCE	1
+#endif
+#include <stdio.h>
+#include <sys/types.h>
+
+#if defined __GNU_LIBRARY__ && HAVE_GETDELIM
+
+int
+getline (lineptr, n, stream)
+     char **lineptr;
+     size_t *n;
+     FILE *stream;
+{
+  return getdelim (lineptr, n, '\n', stream);
+}
+
+
+#else /* ! have getdelim */
+
+# define NDEBUG
+# include <assert.h>
+
+# define STDC_HEADERS 1
+# if STDC_HEADERS
+#  include <stdlib.h>
+# else
+char *malloc (), *realloc ();
+# endif
+
+/* Always add at least this many bytes when extending the buffer.  */
+# define MIN_CHUNK 64
+
+/* Read up to (and including) a TERMINATOR from STREAM into *LINEPTR
+   + OFFSET (and null-terminate it). *LINEPTR is a pointer returned from
+   malloc (or NULL), pointing to *N characters of space.  It is realloc'd
+   as necessary.  Return the number of characters read (not including the
+   null terminator), or -1 on error or EOF.  */
+
+int
+getstr (lineptr, n, stream, terminator, offset)
+     char **lineptr;
+     size_t *n;
+     FILE *stream;
+     char terminator;
+     size_t offset;
+{
+  int nchars_avail;		/* Allocated but unused chars in *LINEPTR.  */
+  char *read_pos;		/* Where we're reading into *LINEPTR. */
+  int ret;
+
+  if (!lineptr || !n || !stream)
+    return -1;
+
+  if (!*lineptr)
+    {
+      *n = MIN_CHUNK;
+      *lineptr = malloc (*n);
+      if (!*lineptr)
+	return -1;
+    }
+
+  nchars_avail = *n - offset;
+  read_pos = *lineptr + offset;
+
+  for (;;)
+    {
+      register int c = getc (stream);
+
+      /* We always want at least one char left in the buffer, since we
+	 always (unless we get an error while reading the first char)
+	 NUL-terminate the line buffer.  */
+
+      assert(*n - nchars_avail == read_pos - *lineptr);
+      if (nchars_avail < 2)
+	{
+	  if (*n > MIN_CHUNK)
+	    *n *= 2;
+	  else
+	    *n += MIN_CHUNK;
+
+	  nchars_avail = *n + *lineptr - read_pos;
+	  *lineptr = realloc (*lineptr, *n);
+	  if (!*lineptr)
+	    return -1;
+	  read_pos = *n - nchars_avail + *lineptr;
+	  assert(*n - nchars_avail == read_pos - *lineptr);
+	}
+
+      if (c == EOF || ferror (stream))
+	{
+	  /* Return partial line, if any.  */
+	  if (read_pos == *lineptr)
+	    return -1;
+	  else
+	    break;
+	}
+
+      *read_pos++ = c;
+      nchars_avail--;
+
+      if (c == terminator)
+	/* Return the line.  */
+	break;
+    }
+
+  /* Done - NUL terminate and return the number of chars read.  */
+  *read_pos = '\0';
+
+  ret = read_pos - (*lineptr + offset);
+  return ret;
+}
+
+int
+getline (lineptr, n, stream)
+     char **lineptr;
+     size_t *n;
+     FILE *stream;
+{
+  return getstr (lineptr, n, stream, '\n', 0);
+}
+
+int
+getdelim (lineptr, n, delimiter, stream)
+     char **lineptr;
+     size_t *n;
+     int delimiter;
+     FILE *stream;
+{
+  return getstr (lineptr, n, stream, delimiter, 0);
+}
+#endif
diff -Nru cramfs-1.1/mkcramfs.c cramfs-1.1-openbsd/mkcramfs.c
--- cramfs-1.1/mkcramfs.c	Thu Nov 29 11:01:59 2007
+++ cramfs-1.1-openbsd/mkcramfs.c	Thu Nov 29 11:08:02 2007
@@ -49,6 +49,10 @@
 #include <getopt.h>
 #include <linux/cramfs_fs.h>
 #include <zlib.h>
+
+#include "getline.c"
+typedef long long int loff_t;
+
 #ifdef DMALLOC
 #include <dmalloc.h>
 #endif
@@ -939,11 +943,6 @@
  the following macros use it if available or use a hacky workaround...
  */
 
-#ifdef __GNUC__
-#define SCANF_PREFIX "a"
-#define SCANF_STRING(s) (&s)
-#define GETCWD_SIZE 0
-#else
 #define SCANF_PREFIX "511"
 #define SCANF_STRING(s) (s = xmalloc(512))
 #define GETCWD_SIZE -1
@@ -957,7 +956,6 @@
 	va_end(ap);
 	return ret;
 }
-#endif
 
 /*  device table entries take the form of:
     <path>	<type> <mode>	<uid>	<gid>	<major>	<minor>	<start>	<inc>	<count>
@@ -1027,7 +1025,7 @@
 		}
 		break;
 	default:
-		error_msg_and_die("Unsupported file type");
+		error_msg_and_die("Unsupported file type - %s %s\n%s", type, name, line);
 	}
 	free(name);
 	return 0;
@@ -1242,7 +1240,7 @@
 	   RAM free.  If the reason is to be able to write to
 	   un-mmappable block devices, then we could try shared mmap
 	   and revert to anonymous mmap if the shared mmap fails. */
-	rom_image = mmap(NULL, fslen_ub?fslen_ub:1, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
+	rom_image = mmap(NULL, fslen_ub?fslen_ub:1, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON, -1, 0);
 
 	if (rom_image == MAP_FAILED) {
 		error_msg_and_die("mmap failed");
