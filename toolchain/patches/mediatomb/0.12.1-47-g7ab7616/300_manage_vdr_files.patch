diff -Naur mediatomb-0.12.1-orig/src/layout/fallback_layout.cc mediatomb-0.12.1/src/layout/fallback_layout.cc
--- mediatomb-0.12.1-orig/src/layout/fallback_layout.cc	2011-03-17 13:11:21.380294352 +0100
+++ mediatomb-0.12.1/src/layout/fallback_layout.cc	2011-03-17 13:25:52.723217071 +0100
@@ -86,6 +86,39 @@
 void FallbackLayout::addVideo(zmm::Ref<CdsObject> obj, String rootpath)
 {
     Ref<StringConverter> f2i = StringConverter::f2i();
+    if(obj->getLocation().substring(obj->getLocation().rindex('.')+1)=="vdr")
+    {
+	if((obj->getLocation().substring(obj->getLocation().rindex('/')+1)=="index.vdr")&&(obj->getLocation().length()>36))
+	{
+		String myLocation = obj->getLocation().substring(0,obj->getLocation().length()-10);
+		if((myLocation.substring(myLocation.length()-4)==".rec")&&(myLocation.charAt(myLocation.length()-27)=='/'))
+		{
+			String title(myLocation.substring(myLocation.length()-26,10)+" ["+myLocation.substring(myLocation.length()-15,2)+":"+myLocation.substring(myLocation.length()-12,2)+"]");
+			myLocation=myLocation.substring(0,myLocation.length()-27);
+			if(myLocation.substring(0,15)=="/var/vdr/video0")
+				myLocation=myLocation.substring(15);
+			if(myLocation.substring(0,1)=='/')
+				myLocation=myLocation.substring(1);
+			int id=myLocation.rindex('/');
+			obj->setTitle(f2i->convert(myLocation.substring(id+1)+" "+title));
+			if(id>0)
+				id=ContentManager::getInstance()->addContainerChain(_("/Vídeos/Grabaciones/")+f2i->convert(myLocation.substring(0,id)));
+			else
+				id=ContentManager::getInstance()->addContainerChain(_("/Vídeos/Grabaciones"));
+			if(obj->getID()!=INVALID_OBJECT_ID)
+			{
+				obj->setRefID(obj->getID());
+				add(obj,id);
+			}
+			else
+			{
+				add(obj,id);
+				obj->setRefID(obj->getID());
+			}
+		}
+	}
+	return;
+    }
     int id = ContentManager::getInstance()->addContainerChain(_("/Vídeos/Todo"));
 
     if (obj->getID() != INVALID_OBJECT_ID)
diff -Naur mediatomb-0.12.1-orig/src/content_manager.cc mediatomb-0.12.1/src/content_manager.cc
--- mediatomb-0.12.1-orig/src/content_manager.cc	2011-03-17 13:11:21.380294352 +0100
+++ mediatomb-0.12.1/src/content_manager.cc	2011-03-17 13:25:52.723217071 +0100
@@ -878,6 +878,12 @@
                 continue;    
             }
         }
+	String myName(name);
+	if(myName.substring(myName.rindex('.')+1)=="vdr")
+		if(myName!="index.vdr")
+			continue;
+	if(myName.substring(myName.rindex('.')+1)=="del")
+		continue;
 
         path = location + DIR_SEPARATOR + name; 
         ret = stat(path.c_str(), &statbuf);
@@ -1030,6 +1036,12 @@
             else if (hidden == false)
                 continue;
         }
+	String myName(name);
+	if(myName.substring(myName.rindex('.')+1)=="vdr")
+		if(myName!="index.vdr")
+			continue;
+	if(myName.substring(myName.rindex('.')+1)=="del")
+		continue;
         String newPath = path + DIR_SEPARATOR + name;
 
         if (ConfigManager::getInstance()->getConfigFilename() == newPath)
diff -Naur mediatomb-0.12.1-orig/src/file_request_handler.cc mediatomb-0.12.1/src/file_request_handler.cc
--- mediatomb-0.12.1-orig/src/file_request_handler.cc	2010-03-25 15:58:11.000000000 +0100
+++ mediatomb-0.12.1/src/file_request_handler.cc	2011-06-23 13:39:15.000000000 +0200
@@ -47,6 +47,7 @@
 #include "session_manager.h"
 #include "ixml.h"
 #include "file_io_handler.h"
+#include "vdr_io_handler.h"
 #include "dictionary.h"
 #include "file_request_handler.h"
 #include "metadata_handler.h"
@@ -291,7 +292,9 @@
             else
 #endif
             {
-                info->file_length = statbuf.st_size;
+
+                info->file_length = VDRIOHandler::size(path);
+
                 // if we are dealing with a regular file we should add the
                 // Accept-Ranges: bytes header, in order to indicate that we support
                 // seeking
@@ -664,7 +667,7 @@
             if (mimeType == nil)
                 mimeType = item->getMimeType();
 
-            info->file_length = statbuf.st_size;
+            info->file_length = VDRIOHandler::size(path);
             info->content_type = ixmlCloneDOMString(mimeType.c_str());
 
             log_debug("Adding content disposition header: %s\n", 
@@ -686,8 +689,16 @@
             if (string_ok(header))
                 info->http_header = ixmlCloneDOMString(header.c_str());
 
-
-            Ref<IOHandler> io_handler(new FileIOHandler(path));
+            IOHandler *io_handler_ptr;
+            if (path.substring(path.rindex(DIR_SEPARATOR)+1) == "index.vdr")
+            {
+                io_handler_ptr = new VDRIOHandler(path);
+            }
+            else
+            {
+                io_handler_ptr = new FileIOHandler(path);
+            }
+            Ref<IOHandler> io_handler(io_handler_ptr);
             io_handler->open(mode);
             PlayHook::getInstance()->trigger(obj);
             return io_handler;
diff -Naur mediatomb-0.12.1-orig/src/vdr_io_handler.h mediatomb-0.12.1/src/vdr_io_handler.h
--- mediatomb-0.12.1-orig/src/vdr_io_handler.h	1970-01-01 01:00:00.000000000 +0100
+++ mediatomb-0.12.1/src/vdr_io_handler.h	2011-06-23 13:30:00.000000000 +0200
@@ -0,0 +1,85 @@
+/*MT*
+    
+    MediaTomb - http://www.mediatomb.cc/
+    
+    vdr_io_handler.h - this file is derived from MediaTomb sources.
+    
+    Copyright (C) 2011 VDR for Siemens Gigaset M7x0 box
+                       http://www.assembla.com/wiki/show/VDR-M7x0
+
+    MediaTomb is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License version 2
+    as published by the Free Software Foundation.
+    
+    MediaTomb is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+    
+    You should have received a copy of the GNU General Public License
+    version 2 along with MediaTomb; if not, write to the Free Software
+    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
+    
+*/
+
+/// \file vdr_io_handler.h
+/// \brief Definition of the VDRIOHandler class.
+#ifndef __VDR_IO_HANDLER_H__
+#define __VDR_IO_HANDLER_H__
+#define MAX_VDR_FILES 256
+#include <sys/types.h>
+
+#include "common.h"
+#include "io_handler.h"
+
+/// \brief Allows the web server to read a VDR recording.
+class VDRIOHandler : public IOHandler
+{
+protected:
+    /// \brief Name of the file.
+    zmm::String filename;
+
+    /// \brief Handles of the recording files.
+    FILE *f[MAX_VDR_FILES];
+
+    off_t file_offsets[MAX_VDR_FILES];
+
+    /// \brief Index of current file. Range 0 .. MAX_VDR_FILES-1.
+    int file_i;
+public:
+    /// \brief Sets the filename to work with.
+    VDRIOHandler(zmm::String filename);
+
+    /// \brief Gives the total size of the recording if index.vdr is passed,
+    /// otherwise the size of the passed single file.
+    static off_t size(zmm::String filename);
+
+    /// \brief Opens file for reading (writing is not supported)
+    virtual void open(IN enum UpnpOpenFileMode mode);
+
+    /// \brief Reads a previously opened file sequentially.
+    /// \param buf Data from the file will be copied into this buffer.
+    /// \param length Number of bytes to be copied into the buffer.
+    virtual int read(OUT char *buf, IN size_t length);
+   
+    /// \brief Writes to a previously opened file.
+    /// \param buf Data from the buffer will be written to the file.
+    /// \param length Number of bytes to be written from the buffer.
+    /// \return number of bytes written.
+    virtual int write(OUT char *buf, IN size_t length);
+
+    /// \brief Performs seek on an open file.
+    /// \param offset Number of bytes to move in the file. For seeking forwards
+    /// positive values are used, for seeking backwards - negative. Offset must
+    /// be positive if origin is set to SEEK_SET
+    /// \param whence The position to move relative to. SEEK_CUR to move relative
+    /// to current position, SEEK_END to move relative to the end of file,
+    /// SEEK_SET to specify an absolute offset.
+    virtual void seek(IN off_t offset, IN int whence);
+
+    /// \brief Close a previously opened file.
+    virtual void close();
+};
+
+
+#endif // __VDR_IO_HANDLER_H__
diff -Naur mediatomb-0.12.1-orig/src/vdr_io_handler.cc mediatomb-0.12.1/src/vdr_io_handler.cc
--- mediatomb-0.12.1-orig/src/vdr_io_handler.cc	1970-01-01 01:00:00.000000000 +0100
+++ mediatomb-0.12.1/src/vdr_io_handler.cc	2011-06-23 13:35:09.000000000 +0200
@@ -0,0 +1,203 @@
+/*MT*
+    
+    MediaTomb - http://www.mediatomb.cc/
+    
+    file_io_handler.cc - this file is derived from MediaTomb sources.
+    
+    Copyright (C) 2011 VDR for Siemens Gigaset M7x0 box
+                       http://www.assembla.com/wiki/show/VDR-M7x0
+
+    MediaTomb is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License version 2
+    as published by the Free Software Foundation.
+    
+    MediaTomb is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+    
+    You should have received a copy of the GNU General Public License
+    version 2 along with MediaTomb; if not, write to the Free Software
+    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
+    
+*/
+
+/// \file vdr_io_handler.cc
+
+#ifdef HAVE_CONFIG_H
+    #include "autoconfig.h"
+#endif
+
+#include "server.h"
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <unistd.h>
+#include <string.h>
+#include <stdio.h>
+#include "common.h"
+#include "logger.h"
+#include "vdr_io_handler.h"
+
+using namespace zmm;
+using namespace mxml;
+
+VDRIOHandler::VDRIOHandler(String filename) : IOHandler()
+{
+    if (filename.substring(filename.rindex(DIR_SEPARATOR)+1) != "index.vdr") {
+
+	  throw _Exception(_("VDRIOHandler::VDRIOHandler: invalid filename. Expected index.vdr"));
+    }
+
+    this->filename = filename;
+    file_i = 0;
+}
+
+off_t VDRIOHandler::size(String filename)
+{
+    struct stat stat_buf;
+    off_t ret = 0;
+
+    if (filename.substring(filename.rindex(DIR_SEPARATOR)+1) != "index.vdr") {
+
+        if (stat(filename.c_str(), &stat_buf) != -1) 
+        {
+	    ret = stat_buf.st_size;  
+	}
+        else
+	{
+	    throw _Exception(_("VDRIOHandler::size: invalid filename."));
+	}
+    }
+    else
+    {
+	int vdr_file_index = 0;
+	String vdr_path = filename.substring(0, filename.rindex(DIR_SEPARATOR));
+	char vdr_filename[] = "001.vdr";
+	vdr_path = vdr_path + DIR_SEPARATOR + vdr_filename;
+
+       while (stat(vdr_path.c_str(), &stat_buf) != -1)
+	{
+	  ret = ret + stat_buf.st_size;
+	  
+	  vdr_file_index++;
+	  sprintf(vdr_filename, "%03d.vdr", vdr_file_index + 1);
+	  vdr_path = filename.substring(0, filename.rindex(DIR_SEPARATOR)) + DIR_SEPARATOR + vdr_filename;
+	}
+    }
+
+    return ret;
+}
+void VDRIOHandler::open(IN enum UpnpOpenFileMode mode)
+{
+    struct stat stat_buf;
+    int vdr_file_index;
+    String vdr_path = filename.substring(0, filename.rindex(DIR_SEPARATOR));
+    char vdr_filename[] = "001.vdr";
+    vdr_path = vdr_path + DIR_SEPARATOR + vdr_filename;
+
+    if (mode != UPNP_READ) {
+       throw _Exception(_("VDRIOHandler::open: invalid mode"));
+    }
+
+    file_offsets [0] = 0;
+    vdr_file_index = 0;
+
+    while (stat(vdr_path.c_str(), &stat_buf) != -1)
+    {
+
+      file_offsets[vdr_file_index+1] = file_offsets[vdr_file_index] +
+	   stat_buf.st_size;
+
+      f[vdr_file_index] = fopen(vdr_path.c_str(), "rb");
+      
+      if (f[vdr_file_index] == NULL)
+      {
+	  throw _Exception(_("VDRIOHandler::open: failed to open: ") + vdr_path.c_str());
+      }
+      vdr_file_index++;
+      sprintf(vdr_filename, "%03d.vdr", vdr_file_index + 1);
+      vdr_path = filename.substring(0, filename.rindex(DIR_SEPARATOR)) + DIR_SEPARATOR + vdr_filename;
+    }
+  
+    f[vdr_file_index] = NULL;
+}
+
+int VDRIOHandler::read(OUT char *buf, IN size_t length)
+{
+    int ret = 0;
+
+    ret = fread(buf, sizeof(char), length, f[file_i]);
+
+    if (ret < length)
+    {
+        if (feof(f[file_i]))
+        {
+           file_i++;
+           if (f[file_i] == NULL) {
+               return 0;
+           }
+           else 
+           {
+               ret = ret + fread(buf+ret, sizeof(char), length - ret, f[file_i]);
+           }
+        }
+        else 
+        {
+	  if (ferror(f[file_i])) return -1;
+	}
+    }
+
+    return ret;
+}
+
+int VDRIOHandler::write(IN char *buf, IN size_t length)
+{
+    return -1;
+}
+
+void VDRIOHandler::seek(IN off_t offset, IN int whence)
+{
+    off_t final_offset;
+
+    switch (whence)
+    {
+    case SEEK_CUR:
+       final_offset = file_offsets[file_i] + ftell(f[file_i]) + offset;
+       log_debug("seek0: final_offset=%jd, file_i=%d, whence=%d, offset=%jd, ftell=%jd\n", (intmax_t)final_offset, file_i, whence, (intmax_t)offset, (intmax_t)ftell(f[file_i]));
+       break;
+    case SEEK_SET:
+       final_offset = file_offsets[file_i] + offset;
+       break;
+    case SEEK_END:
+       throw _Exception(_("fseek SEEK_END not supported for VDR files"));
+       break;
+    default:
+       throw _Exception(_("fseek whence value not expected"));
+    }
+    log_debug("seek1: final_offset=%jd, file_i=%d, whence=%d, offset=%jd\n", (intmax_t)final_offset, file_i, whence, (intmax_t)offset);
+    file_i = 0;
+    for (int i = 0; file_offsets[i] < final_offset; i++)
+    {
+       file_i = i;
+       log_debug("for: file_i=%d, file_offsets[file_i]=%jd\n", file_i, (intmax_t)file_offsets[file_i]);
+    }
+    log_debug("seek2: final_offset=%jd, file_i=%d, whence=%d, file_offsets[file_i]=%jd\n", (intmax_t)final_offset, file_i, whence, (intmax_t)file_offsets[file_i]);
+
+    if (fseeko(f[file_i], final_offset - file_offsets[file_i], SEEK_SET) != 0)
+    {
+        perror ("fseek failed");
+        throw _Exception(_("fseek failed"));
+    }
+   
+}
+
+void VDRIOHandler::close()
+{
+    for (int i=0; f[i] != NULL; i++) {
+      if (fclose(f[i]) != 0)
+      {
+	  throw _Exception(_("fclose failed"));
+      }
+      f[i] = NULL;
+    }
+}
diff -Naur mediatomb-0.12.1-orig/build/libmediatomb_src mediatomb-0.12.1/build/libmediatomb_src
--- mediatomb-0.12.1-orig/build/libmediatomb_src	2010-03-22 18:09:53.000000000 +0100
+++ mediatomb-0.12.1/build/libmediatomb_src	2012-03-29 21:46:08.793652388 +0200
@@ -42,6 +42,8 @@
 ../src/fd_io_handler.h \
 ../src/file_io_handler.cc \
 ../src/file_io_handler.h \
+../src/vdr_io_handler.cc \
+../src/vdr_io_handler.h \
 ../src/file_request_handler.cc \
 ../src/file_request_handler.h \
 ../src/filesystem.cc \
--- mediatomb-0.12.1-orig/src/tools.cc	2010-03-25 15:58:11.000000000 +0100
+++ mediatomb-0.12.1/src/tools.cc	2011-06-23 14:33:09.000000000 +0200
@@ -56,6 +56,7 @@
 
 #include "md5/md5.h"
 #include "file_io_handler.h"
+#include "vdr_io_handler.h"
 #include "metadata_handler.h"
 
 #define WHITE_SPACE " \t\r\n"
@@ -193,7 +194,7 @@
         throw _Exception(_("Not a file: ") + path);
 
     if ((filesize != NULL) && S_ISREG(statbuf.st_mode))
-        *filesize = statbuf.st_size;
+        *filesize = VDRIOHandler::size (path);
 
     return statbuf.st_mtime;
 }
--- mediatomb-0.12.1-orig/src/serve_request_handler.cc	2010-03-25 15:58:11.000000000 +0100
+++ mediatomb-0.12.1/src/serve_request_handler.cc	2011-06-23 14:36:55.000000000 +0200
@@ -46,6 +46,7 @@
 #include "update_manager.h"
 #include "ixml.h"
 #include "file_io_handler.h"
+#include "vdr_io_handler.h"
 #include "dictionary.h"
 #include "serve_request_handler.h"
 #include "tools.h"
@@ -121,7 +122,7 @@
         }
 #endif // HAVE_MAGIC
 
-        info->file_length = statbuf.st_size;
+        info->file_length = VDRIOHandler::size (path);
         info->last_modified = statbuf.st_mtime;
         info->is_directory = S_ISDIR(statbuf.st_mode);
 
@@ -209,7 +210,7 @@
         }
 #endif // HAVE_MAGIC
 
-        info->file_length = statbuf.st_size;
+        info->file_length =  VDRIOHandler::size (path);
         info->last_modified = statbuf.st_mtime;
         info->is_directory = S_ISDIR(statbuf.st_mode);
 
