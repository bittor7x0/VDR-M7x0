--- uClibc-0.9.29/libpthread/linuxthreads/wrap.c.orig	2007-10-07 15:40:07.000000000 +0200
+++ uClibc-0.9.29/libpthread/linuxthreads/wrap.c	2007-10-07 15:33:45.000000000 +0200
@@ -0,0 +1,249 @@
+/* Wrapper arpund system calls to provide cancelation points.
+   Copyright (C) 1996,1997,1998,1999,2000,2001 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1996.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Library General Public License as
+   published by the Free Software Foundation; either version 2 of the
+   License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Library General Public License for more details.
+
+   You should have received a copy of the GNU Library General Public
+   License along with the GNU C Library; see the file COPYING.LIB.  If not,
+   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.  */
+
+#define __FORCE_GLIBC
+#include <features.h>
+#include <fcntl.h>
+#include <sys/mman.h>
+#include <unistd.h>
+#include <stdarg.h>
+#include <stddef.h>
+#include <stdlib.h>
+#include <termios.h>
+#include <poll.h>
+#include <sys/resource.h>
+#include <sys/wait.h>
+#include <sys/socket.h>
+#include <sys/syscall.h>
+#include <sys/time.h>
+#include <sys/types.h>
+#include <sys/uio.h>
+#include "internals.h"
+
+#ifndef __PIC__
+/* We need a hook to force this file to be linked in when static
+   libpthread is used.  */
+const int __pthread_provide_wrappers = 0;
+#endif
+
+
+#define CANCELABLE(res_type, name, param_list, params) \
+res_type __libc_##name param_list;					      \
+res_type								      \
+__attribute__ ((weak))							      \
+name param_list								      \
+{									      \
+  res_type result;							      \
+  int oldtype;								      \
+  oldtype = __pthread_enable_asynccancel();				      \
+  result = __libc_##name params;					      \
+  __pthread_disable_asynccancel(oldtype);				      \
+  return result;							      \
+}
+
+#define CANCELABLE_VA(res_type, name, param_list, params, last_arg) \
+res_type __libc_##name param_list;					      \
+res_type								      \
+__attribute__ ((weak))							      \
+name param_list								      \
+{									      \
+  res_type result;							      \
+  int oldtype;								      \
+  va_list ap;								      \
+  oldtype = __pthread_enable_asynccancel();				      \
+  va_start (ap, last_arg);						      \
+  result = __libc_##name params;					      \
+  va_end (ap);								      \
+  __pthread_disable_asynccancel(oldtype);				      \
+  return result;							      \
+}
+
+
+/* close(2).  */
+CANCELABLE (int, close, (int fd), (fd))
+
+
+/* fcntl(2).  */
+CANCELABLE_VA (int, fcntl, (int fd, int cmd, ...),
+		       (fd, cmd, va_arg (ap, long int)), cmd)
+
+
+/* fsync(2).  */
+CANCELABLE (int, fsync, (int fd), (fd))
+
+
+/* lseek(2).  */
+CANCELABLE (off_t, lseek, (int fd, off_t offset, int whence),
+		    (fd, offset, whence))
+
+#ifdef __UCLIBC_HAS_LFS__
+/* lseek64(2).  */
+CANCELABLE (off64_t, lseek64, (int fd, off64_t offset, int whence),
+		    (fd, offset, whence))
+#endif
+
+#ifdef __NR_msync
+/* msync(2).  */
+CANCELABLE (int, msync, (__ptr_t addr, size_t length, int flags),
+		    (addr, length, flags))
+#endif
+
+
+/* nanosleep(2).  */
+libpthread_hidden_proto(nanosleep)
+CANCELABLE (int, nanosleep, (const struct timespec *requested_time,
+				     struct timespec *remaining),
+		    (requested_time, remaining))
+libpthread_hidden_def(nanosleep)
+
+
+/* open(2).  */
+CANCELABLE_VA (int, open, (const char *pathname, int flags, ...),
+		       (pathname, flags, va_arg (ap, mode_t)), flags)
+
+
+#ifdef __UCLIBC_HAS_LFS__
+/* open64(3).  */
+CANCELABLE_VA (int, open64, (const char *pathname, int flags, ...),
+		       (pathname, flags, va_arg (ap, mode_t)), flags)
+#endif
+
+/* pause(2).  */
+CANCELABLE (int, pause, (void), ())
+
+
+/* Enable this if enabling these in syscalls.c */
+/* pread(3).  */
+CANCELABLE (ssize_t, pread, (int fd, void *buf, size_t count,
+				     off_t offset),
+		    (fd, buf, count, offset))
+
+
+#if defined __UCLIBC_HAS_LFS__ && defined __NR_pread64
+/* pread64(3).  */
+CANCELABLE (ssize_t, pread64, (int fd, void *buf, size_t count,
+				       off64_t offset),
+		    (fd, buf, count, offset))
+#endif
+
+/* pwrite(3).  */
+CANCELABLE (ssize_t, pwrite, (int fd, const void *buf, size_t n,
+				      off_t offset),
+		    (fd, buf, n, offset))
+
+
+#if defined __UCLIBC_HAS_LFS__ && defined __NR_pwrited64
+/* pwrite64(3).  */
+CANCELABLE (ssize_t, pwrite64, (int fd, const void *buf, size_t n,
+					off64_t offset),
+		    (fd, buf, n, offset))
+#endif
+
+/* read(2).  */
+CANCELABLE (ssize_t, read, (int fd, void *buf, size_t count),
+		    (fd, buf, count))
+
+
+/* system(3).  */
+CANCELABLE (int, system, (const char *line), (line))
+
+
+/* tcdrain(2).  */
+CANCELABLE (int, tcdrain, (int fd), (fd))
+
+
+/* wait(2).  */
+CANCELABLE (__pid_t, wait, (__WAIT_STATUS_DEFN stat_loc), (stat_loc))
+
+
+/* waitpid(2).  */
+libpthread_hidden_proto(waitpid)
+CANCELABLE (__pid_t, waitpid, (__pid_t pid, int *stat_loc,
+				       int options),
+		    (pid, stat_loc, options))
+libpthread_hidden_def(waitpid)
+
+
+/* write(2).  */
+CANCELABLE (ssize_t, write, (int fd, const void *buf, size_t n),
+		    (fd, buf, n))
+
+
+/* The following system calls are thread cancellation points specified
+   in XNS.  */
+
+/* accept(2).  */
+CANCELABLE (int, accept, (int fd, __SOCKADDR_ARG addr,
+				  socklen_t *addr_len),
+		    (fd, addr, addr_len))
+
+/* connect(2).  */
+CANCELABLE (int, connect, (int fd, __CONST_SOCKADDR_ARG addr,
+				     socklen_t len),
+		    (fd, addr, len))
+
+/* recv(2).  */
+CANCELABLE (ssize_t, recv, (int fd, __ptr_t buf, size_t n, int flags),
+		    (fd, buf, n, flags))
+
+/* recvfrom(2).  */
+CANCELABLE (ssize_t, recvfrom, (int fd, __ptr_t buf, size_t n, int flags,
+					__SOCKADDR_ARG addr, socklen_t *addr_len),
+		    (fd, buf, n, flags, addr, addr_len))
+
+/* recvmsg(2).  */
+CANCELABLE (ssize_t, recvmsg, (int fd, struct msghdr *message, int flags),
+		    (fd, message, flags))
+
+/* send(2).  */
+CANCELABLE (ssize_t, send, (int fd, const __ptr_t buf, size_t n,
+				    int flags),
+		    (fd, buf, n, flags))
+
+/* sendmsg(2).  */
+CANCELABLE (ssize_t, sendmsg, (int fd, const struct msghdr *message,
+				       int flags),
+		    (fd, message, flags))
+
+/* sendto(2).  */
+CANCELABLE (ssize_t, sendto, (int fd, const __ptr_t buf, size_t n,
+				      int flags, __CONST_SOCKADDR_ARG addr,
+				      socklen_t addr_len),
+		    (fd, buf, n, flags, addr, addr_len))
+
+/* select */
+libpthread_hidden_proto(select)
+CANCELABLE (int, select, (int n, fd_set *readfds, fd_set *writefds,  
+				 fd_set *exceptfds, struct timeval *timeout),
+		        (n, readfds, writefds, exceptfds, timeout))
+libpthread_hidden_def(select)
+
+
+/* poll */
+CANCELABLE (int, poll, (struct pollfd *fds, nfds_t nfds, int timeout),
+		 (fds,  nfds, timeout))
+
+
+CANCELABLE (ssize_t, readv, (int fd, const struct iovec *vector, int count),
+		 (fd, vector, count))
+		 
+CANCELABLE (ssize_t, writev, (int fd, const struct iovec *vector, int count),
+                 (fd, vector, count))
+
--- uClibc-0.9.29/libpthread/linuxthreads/cancel.c.orig	2007-10-07 15:35:41.000000000 +0200
+++ uClibc-0.9.29/libpthread/linuxthreads/cancel.c	2007-10-07 15:36:43.000000000 +0200
@@ -236,3 +236,11 @@
       __rpc_thread_destroy ();
 #endif
 }
+
+#ifndef __PIC__
+/* We need a hook to force the cancelation wrappers to be linked in when
+   static libpthread is used.  */
+   extern const int __pthread_provide_wrappers;
+   static const int * const __pthread_require_wrappers =
+     &__pthread_provide_wrappers;
+#endif
--- uClibc-0.9.29/libpthread/linuxthreads/Makefile.in.orig	2007-10-07 15:40:24.000000000 +0200
+++ uClibc-0.9.29/libpthread/linuxthreads/Makefile.in	2007-10-07 15:44:16.000000000 +0200
@@ -48,7 +48,7 @@
 	ptclock_gettime ptclock_settime ptfork pthandles \
 	pthread_setegid pthread_seteuid pthread_setgid pthread_setregid \
 	pthread_setresgid pthread_setresuid pthread_setreuid pthread_setuid \
-	rwlock semaphore sighandler signals specific spinlock
+	rwlock semaphore sighandler signals specific spinlock wrap
 pthread_SRC := $(patsubst %,$(libpthread_DIR)/%.c,$(pthread_SRC))
 
 libpthread_static_SRC := pthread_atfork
