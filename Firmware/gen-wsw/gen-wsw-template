#!/bin/bash
copyright="(c) Lemmi, m740av (at) cle-mens.de, 2007-04-03, GPL2"

#
#------------------------------------------------------------------------------
# setup

LC_ALL=POSIX
WSW=
temp=`mktemp -d /tmp/gen-wsw.$$.XXXXXXXX` || exit 1

#
#------------------------------------------------------------------------------
# help

function help_exit()
{
    cat <<- ---EOT--- >&2

	Usage: ${0##*/} [option]...  new_wsw_file
	   or: ${0##*/} [option]...  name  new_wsw_file
	   or: ${0##*/} [option]...  name  dir_of_new_wsw_file

	  new_wsw_file: extension '.wsw' appended if missed.

	  Options:

	    -h  --help           print this help
	    -v  --verbose        be verbose
	    -q  --quiet          be quiet

	    -4  --m740 --m740av  generate a M740-wsw (default)
	    -5  --m750 --m750s   generate a M750-wsw

	    -r  --rootfs         insert a rootfs template
	    -d  --data           insert a data template
	    -e  --etc file       insert a /var/etc template
	    -B  --boot-sector    insert a boot sector template
	    -k  --kernel         insert a kernel template
	    -K  --rescue-kernel  insert a rescue kernel template
	    -R  --rescue-rootfs  insert a rescue rootfs template

	    -H  --only-header    generate only the WSW-Header

	    The options from -r to -R are printed in file content order.
	    The upper case options -EBKR signal unusal WSW parts
	    and should be used with care, because they can damage a M7x0-box.

	$copyright

	---EOT---

    rm -rf $temp
    exit 1
}

((!$#)) && help_exit

function info_exit()
{
    {
	echo ""
	while (($#)); do echo "${0##*/}: $1"; shift; done
	#echo "${0##*/}: try '${0##*/} --help' for more help"
	echo ""
    } >&2
    rm -rf $temp
    rm -f "$WSW"
    exit 1
}

#
#------------------------------------------------------------------------------
# getopt

args=`getopt -n "${0##*/}" \
        -l help,verbose,quiet,m740,m740av,m750,m750s \
        -l rootfs,data,etc,boot-sector,kernel,rescue-kernel,rescue-rootfs \
        -l enable-boot-sector,enable-rescue,only-header \
        -o hvq45rdeBkKRH \
        -- "$@"`
if (( $? )); then
    echo "${0##*/}: try option -h or --help for more help" >&2
    exit 1
fi

eval set -- $args

#
#------------------------------------------------------------------------------
# analyse options

quiet=0
verbose=0

mode=m740
rootfs=0
data=0
etc=0
boot_sector=0
kernel=0
rescue_kernel=0
rescue_rootfs=0
gen_data=1

scan_opt=1

while (( $# && scan_opt ))
do
    [[ "$1" = "" ]] && shift && continue
    case "$1" in
	--)			scan_opt=0 ;;

	-h|--help)		help_exit ;;
	-q|--quiet)		quiet=1 verbose=0 ;;
	-v|--verbose)		quiet=0 verbose=1 ;;

	-4|--m740|--m740av)	mode=m740 ;;
	-5|--m750|--m750s)	mode=m750 ;;

	-r|--rootfs)		rootfs=1 ;;
	-d|--data)		data=1 ;;
	-e|--etc)		etc=1 ;;
	-B|--boot-sector)	boot_sector=1 ;;
	-k|--kernel)		kernel=1 ;;
	-K|--rescue-kernel)	rescue_kernel=1 ;;
	-R|--rescue-rootfs)	rescue_rootfs=1 ;;

	-H|--onyl-header)	gen_data=0 ;;

	*)			echo "${0##*/}: INTERNAL ERROR 'option': $1" >&2
				exit 1 ;;
    esac
    shift
done

#----- verbose

if ((verbose))
then
    VOUT=/dev/stdout
    VERR=/dev/stderr
else
    VOUT=/dev/null
    VERR=/dev/null
fi

#----- param

if (( $# == 1 ))
then
    NAME="${1##*/}"
    NAME="${NAME%.wsw}"
    NAME="${NAME:0:63}"
else
    NAME="${1:0:63}"
fi
[[ $NAME = "" ]] \
	&& info_exit "missing wsw name"

WSW="$2"
[[ $WSW = "" ]] && WSW="$1"
[[ -d $WSW ]] && WSW="$WSW/${1##*/}"
[[ ${WSW##*.} != "wsw" ]] && WSW="$WSW.wsw"

(( $# > 2 )) \
	&& info_exit "to much parameters: $*"

#
#------------------------------------------------------------------------------
# mapping

case $mode in
    m750)
	wsw_signature=M750S

	  map_rootfs="00-7f"
	    map_data="80-bb"
	     map_etc="bc-bf"
	    map_boot="c0-c0"
          map_kernel="c1-cc"
        map_r_kernel="cd-d7"
        map_r_rootfs="d8-ff"
	;;

    *)
	wsw_signature=M740AV

	  map_rootfs="00-5f"
	    map_data="60-bb"
	     map_etc="bc-bf"
	    map_boot="c0-c0"
          map_kernel="c1-cc"
        map_r_kernel="cd-d7"
        map_r_rootfs="d8-ff"
	;;
esac

function gen_mapping() # map list
{
    local len=0 p n1 n2
    for ((p=1;p<=$#;p++))
    do
	let n1=16#${!p:0:2}
	let n2=16#${!p:3:2}
	let len+=n2-n1+1
	#echo "${!p} -> $n1..$n2" >&2
    done
    printf "`printf "\\%03o\\%03o" $((len>>8&255)) $((len&255))`"
    for ((p=1;p<=$#;p++))
    do
	let n1=16#${!p:0:2}
	let n2=16#${!p:3:2}
	while ((n1<=n2))
	do
	    printf "`printf "\\%03o" $n1`"
	    let n1+=1
	done
    done
    echo $len >$temp/blocklen
}

mapping_list=

#
#------------------------------------------------------------------------------
# generate wsw header

((!quiet)) && echo "${0##*/}: create WSW-Header: $wsw_signature, $NAME"

{
    echo -n "WSW /$/," | tr / '\0'
    dd if=/dev/zero bs=1 count=$((16#480-8)) 2>$VERR
    d=`date +%s`
    printf "`printf "\\%03o\\%03o\\%03o\\%03o" $((d>>24&255)) $((d>>16&255)) $((d>>8&255)) $((d&255))`"
    dd if=/dev/zero bs=$((16#588-16#484)) count=1 2>$VERR
} >"$WSW"

[[ -f $WSW ]] || info_exit "can't create WSW file: $WSW"

echo -n "$wsw_signature" | dd bs=1 "of=$WSW" seek=$((16#400)) conv=notrunc 2>$VERR
echo -n "$NAME" | dd bs=1 "of=$WSW" seek=$((16#440)) conv=notrunc 2>$VERR

#
#------------------------------------------------------------------------------
# pack wsw

function gen_template() # name enable map
{
    if (($2))
    then
	local name="$1"
	local map="$3"
	((!quiet)) && echo "${0##*/}: store template '$name' to wsw"
	mapping_list="$mapping_list $map"
	if ((gen_data))
	then
	    local n1 n2 maxsize
	    let n1=16#${map:0:2}
	    let n2=16#${map:3:2}
	    let size=(n2-n1+1)*16#10000
	    dd if=/dev/zero bs=$size count=1 2>$VERR | tr '\0' '\377' >>$WSW
	fi
    fi
}

#---------------------------------------------------------------
# function	name		enabled		map
#---------------------------------------------------------------
gen_template	rootfs		$rootfs		"$map_rootfs"
gen_template	data		$data		"$map_data"
gen_template	etc		$etc		"$map_etc"
gen_template	boot-sector	$boot_sector	"$map_boot"
gen_template	kernel		$kernel		"$map_kernel"
gen_template	rescue-kernel	$rescue_kernel	"$map_r_kernel"
gen_template	rescue-rootfs	$rescue_rootfs	"$map_r_rootfs"
#---------------------------------------------------------------

#
#------------------------------------------------------------------------------
# write mapping

((!quiet)) && echo "${0##*/}: write mapping '$mapping_list'"
gen_mapping $mapping_list | dd bs=1 "of=$WSW" seek=$((16#486)) conv=notrunc 2>$VERR

[[ -f $WSW ]] || info_exit "can't create WSW file: $WSW"

wswsize=`stat -c%s "$WSW"`
blocklen=`cat $temp/blocklen`
goodsize=1416
((gen_data)) && let goodsize=16#588+blocklen*16#10000

(( wswsize != goodsize )) && info_exit "wrong WSW size: wanted=$goodsize but not $wswsize"

#
#------------------------------------------------------------------------------
# clean

rm -rf $temp

